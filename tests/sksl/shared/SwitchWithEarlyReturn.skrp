    1. store_src_rg                   coords = src.rg
    2. init_lane_masks                CondMask = LoopMask = RetMask = true
    3. copy_constant                  $0 = colorGreen(1)
    4. cast_to_int_from_float         $0 = FloatToInt($0)
    5. copy_slot_unmasked             x = $0
    6. store_condition_mask           $91 = CondMask
    7. store_condition_mask           $32 = CondMask
    8. store_condition_mask           $38 = CondMask
    9. store_condition_mask           $26 = CondMask
   10. store_condition_mask           $57 = CondMask
   11. store_condition_mask           $43 = CondMask
   12. store_condition_mask           $19 = CondMask
   13. store_condition_mask           $50 = CondMask
   14. store_condition_mask           $84 = CondMask
   15. store_condition_mask           $64 = CondMask
   16. store_condition_mask           $12 = CondMask
   17. store_condition_mask           $78 = CondMask
   18. store_condition_mask           $71 = CondMask
   19. branch_if_no_active_lanes      branch_if_no_active_lanes +32 (label 14 at #51)
   20. store_return_mask              $72 = RetMask
   21. copy_slot_unmasked             x₁ = x
   22. zero_slot_unmasked             val = 0
   23. store_loop_mask                $73 = LoopMask
   24. copy_slot_unmasked             $74 = x₁
   25. store_loop_mask                $75 = LoopMask
   26. mask_off_loop_mask             LoopMask &= ~(CondMask & LoopMask & RetMask)
   27. case_op                        if ($74 == 0x00000001) { LoopMask = true; $75 = false; }
   28. branch_if_no_active_lanes      branch_if_no_active_lanes +8 (label 15 at #36)
   29. copy_slot_unmasked             $76 = val
   30. copy_constant                  $77 = 0x00000001 (1.401298e-45)
   31. add_int                        $76 += $77
   32. copy_slot_masked               val = Mask($76)
   33. zero_slot_unmasked             $76 = 0
   34. copy_slot_masked               [return_in_one_case].result = Mask($76)
   35. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   36. label                          label 0x0000000F
   37. reenable_loop_mask             LoopMask |= $75
   38. branch_if_no_active_lanes      branch_if_no_active_lanes +5 (label 16 at #43)
   39. copy_slot_unmasked             $75 = val
   40. copy_constant                  $76 = 0x00000001 (1.401298e-45)
   41. add_int                        $75 += $76
   42. copy_slot_masked               val = Mask($75)
   43. label                          label 0x00000010
   44. load_loop_mask                 LoopMask = $73
   45. copy_slot_unmasked             $73 = val
   46. copy_constant                  $74 = 0x00000001 (1.401298e-45)
   47. cmpeq_int                      $73 = equal($73, $74)
   48. copy_slot_masked               [return_in_one_case].result = Mask($73)
   49. load_return_mask               RetMask = $72
   50. copy_slot_unmasked             $72 = [return_in_one_case].result
   51. label                          label 0x0000000E
   52. zero_slot_unmasked             $79 = 0
   53. merge_condition_mask           CondMask = $71 & $72
   54. branch_if_no_active_lanes      branch_if_no_active_lanes +18 (label 13 at #72)
   55. store_return_mask              $80 = RetMask
   56. copy_slot_unmasked             x₂ = x
   57. store_loop_mask                $81 = LoopMask
   58. copy_slot_unmasked             $82 = x₂
   59. store_loop_mask                $83 = LoopMask
   60. mask_off_loop_mask             LoopMask &= ~(CondMask & LoopMask & RetMask)
   61. reenable_loop_mask             LoopMask |= $83
   62. branch_if_no_active_lanes      branch_if_no_active_lanes +4 (label 18 at #66)
   63. copy_constant                  $83 = 0xFFFFFFFF
   64. copy_slot_masked               [return_in_default].result = Mask($83)
   65. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   66. label                          label 0x00000012
   67. load_loop_mask                 LoopMask = $81
   68. load_return_mask               RetMask = $80
   69. copy_slot_unmasked             $80 = [return_in_default].result
   70. label                          label 0x00000011
   71. copy_slot_masked               $79 = Mask($80)
   72. label                          label 0x0000000D
   73. load_condition_mask            CondMask = $71
   74. zero_slot_unmasked             $13 = 0
   75. merge_condition_mask           CondMask = $78 & $79
   76. branch_if_no_active_lanes      branch_if_no_active_lanes +24 (label 12 at #100)
   77. store_return_mask              $14 = RetMask
   78. copy_slot_unmasked             x₃ = x
   79. store_loop_mask                $15 = LoopMask
   80. copy_slot_unmasked             $16 = x₃
   81. store_loop_mask                $17 = LoopMask
   82. mask_off_loop_mask             LoopMask &= ~(CondMask & LoopMask & RetMask)
   83. case_op                        if ($16 == 0x00000001) { LoopMask = true; $17 = false; }
   84. branch_if_no_active_lanes      branch_if_no_active_lanes +4 (label 20 at #88)
   85. zero_slot_unmasked             $18 = 0
   86. copy_slot_masked               [return_in_every_case].result = Mask($18)
   87. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   88. label                          label 0x00000014
   89. reenable_loop_mask             LoopMask |= $17
   90. branch_if_no_active_lanes      branch_if_no_active_lanes +4 (label 21 at #94)
   91. copy_constant                  $17 = 0xFFFFFFFF
   92. copy_slot_masked               [return_in_every_case].result = Mask($17)
   93. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   94. label                          label 0x00000015
   95. load_loop_mask                 LoopMask = $15
   96. load_return_mask               RetMask = $14
   97. copy_slot_unmasked             $14 = [return_in_every_case].result
   98. label                          label 0x00000013
   99. copy_slot_masked               $13 = Mask($14)
  100. label                          label 0x0000000C
  101. load_condition_mask            CondMask = $78
  102. zero_slot_unmasked             $65 = 0
  103. merge_condition_mask           CondMask = $12 & $13
  104. branch_if_no_active_lanes      branch_if_no_active_lanes +32 (label 11 at #136)
  105. store_return_mask              $66 = RetMask
  106. copy_slot_unmasked             x₄ = x
  107. zero_slot_unmasked             val₁ = 0
  108. store_loop_mask                $67 = LoopMask
  109. copy_slot_unmasked             $68 = x₄
  110. store_loop_mask                $69 = LoopMask
  111. mask_off_loop_mask             LoopMask &= ~(CondMask & LoopMask & RetMask)
  112. case_op                        if ($68 == 0x00000001) { LoopMask = true; $69 = false; }
  113. branch_if_no_active_lanes      branch_if_no_active_lanes +4 (label 23 at #117)
  114. zero_slot_unmasked             $70 = 0
  115. copy_slot_masked               [return_in_every_case_no_default].result = Mask($70)
  116. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  117. label                          label 0x00000017
  118. case_op                        if ($68 == 0x00000002) { LoopMask = true; $69 = false; }
  119. branch_if_no_active_lanes      branch_if_no_active_lanes +4 (label 24 at #123)
  120. copy_constant                  $70 = 0xFFFFFFFF
  121. copy_slot_masked               [return_in_every_case_no_default].result = Mask($70)
  122. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  123. label                          label 0x00000018
  124. load_loop_mask                 LoopMask = $67
  125. copy_slot_unmasked             $67 = val₁
  126. copy_constant                  $68 = 0x00000001 (1.401298e-45)
  127. add_int                        $67 += $68
  128. copy_slot_masked               val₁ = Mask($67)
  129. copy_constant                  $68 = 0x00000001 (1.401298e-45)
  130. cmpeq_int                      $67 = equal($67, $68)
  131. copy_slot_masked               [return_in_every_case_no_default].result = Mask($67)
  132. load_return_mask               RetMask = $66
  133. copy_slot_unmasked             $66 = [return_in_every_case_no_default].result
  134. label                          label 0x00000016
  135. copy_slot_masked               $65 = Mask($66)
  136. label                          label 0x0000000B
  137. load_condition_mask            CondMask = $12
  138. zero_slot_unmasked             $85 = 0
  139. merge_condition_mask           CondMask = $64 & $65
  140. branch_if_no_active_lanes      branch_if_no_active_lanes +36 (label 10 at #176)
  141. store_return_mask              $86 = RetMask
  142. copy_slot_unmasked             x₅ = x
  143. zero_slot_unmasked             val₂ = 0
  144. store_loop_mask                $87 = LoopMask
  145. copy_slot_unmasked             $88 = x₅
  146. store_loop_mask                $89 = LoopMask
  147. mask_off_loop_mask             LoopMask &= ~(CondMask & LoopMask & RetMask)
  148. case_op                        if ($88 == 0x00000001) { LoopMask = true; $89 = false; }
  149. branch_if_no_active_lanes      branch_if_no_active_lanes +2 (label 26 at #151)
  150. mask_off_loop_mask             LoopMask &= ~(CondMask & LoopMask & RetMask)
  151. label                          label 0x0000001A
  152. case_op                        if ($88 == 0x00000002) { LoopMask = true; $89 = false; }
  153. branch_if_no_active_lanes      branch_if_no_active_lanes +4 (label 27 at #157)
  154. copy_constant                  $90 = 0xFFFFFFFF
  155. copy_slot_masked               [case_has_break_before_return].result = Mask($90)
  156. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  157. label                          label 0x0000001B
  158. reenable_loop_mask             LoopMask |= $89
  159. branch_if_no_active_lanes      branch_if_no_active_lanes +4 (label 28 at #163)
  160. copy_constant                  $89 = 0xFFFFFFFF
  161. copy_slot_masked               [case_has_break_before_return].result = Mask($89)
  162. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  163. label                          label 0x0000001C
  164. load_loop_mask                 LoopMask = $87
  165. copy_slot_unmasked             $87 = val₂
  166. copy_constant                  $88 = 0x00000001 (1.401298e-45)
  167. add_int                        $87 += $88
  168. copy_slot_masked               val₂ = Mask($87)
  169. copy_constant                  $88 = 0x00000001 (1.401298e-45)
  170. cmpeq_int                      $87 = equal($87, $88)
  171. copy_slot_masked               [case_has_break_before_return].result = Mask($87)
  172. load_return_mask               RetMask = $86
  173. copy_slot_unmasked             $86 = [case_has_break_before_return].result
  174. label                          label 0x00000019
  175. copy_slot_masked               $85 = Mask($86)
  176. label                          label 0x0000000A
  177. load_condition_mask            CondMask = $64
  178. zero_slot_unmasked             $51 = 0
  179. merge_condition_mask           CondMask = $84 & $85
  180. branch_if_no_active_lanes      branch_if_no_active_lanes +30 (label 9 at #210)
  181. store_return_mask              $52 = RetMask
  182. copy_slot_unmasked             x₆ = x
  183. store_loop_mask                $53 = LoopMask
  184. copy_slot_unmasked             $54 = x₆
  185. store_loop_mask                $55 = LoopMask
  186. mask_off_loop_mask             LoopMask &= ~(CondMask & LoopMask & RetMask)
  187. case_op                        if ($54 == 0x00000001) { LoopMask = true; $55 = false; }
  188. branch_if_no_active_lanes      branch_if_no_active_lanes +4 (label 30 at #192)
  189. zero_slot_unmasked             $56 = 0
  190. copy_slot_masked               [case_has_break_after_return].result = Mask($56)
  191. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  192. label                          label 0x0000001E
  193. case_op                        if ($54 == 0x00000002) { LoopMask = true; $55 = false; }
  194. branch_if_no_active_lanes      branch_if_no_active_lanes +4 (label 31 at #198)
  195. copy_constant                  $56 = 0xFFFFFFFF
  196. copy_slot_masked               [case_has_break_after_return].result = Mask($56)
  197. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  198. label                          label 0x0000001F
  199. reenable_loop_mask             LoopMask |= $55
  200. branch_if_no_active_lanes      branch_if_no_active_lanes +4 (label 32 at #204)
  201. copy_constant                  $55 = 0xFFFFFFFF
  202. copy_slot_masked               [case_has_break_after_return].result = Mask($55)
  203. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  204. label                          label 0x00000020
  205. load_loop_mask                 LoopMask = $53
  206. load_return_mask               RetMask = $52
  207. copy_slot_unmasked             $52 = [case_has_break_after_return].result
  208. label                          label 0x0000001D
  209. copy_slot_masked               $51 = Mask($52)
  210. label                          label 0x00000009
  211. load_condition_mask            CondMask = $84
  212. zero_slot_unmasked             $20 = 0
  213. merge_condition_mask           CondMask = $50 & $51
  214. branch_if_no_active_lanes      branch_if_no_active_lanes +36 (label 8 at #250)
  215. store_return_mask              $21 = RetMask
  216. copy_slot_unmasked             x₇ = x
  217. zero_slot_unmasked             val₃ = 0
  218. store_loop_mask                $22 = LoopMask
  219. copy_slot_unmasked             $23 = x₇
  220. store_loop_mask                $24 = LoopMask
  221. mask_off_loop_mask             LoopMask &= ~(CondMask & LoopMask & RetMask)
  222. case_op                        if ($23 == 0x00000001) { LoopMask = true; $24 = false; }
  223. branch_if_no_active_lanes      branch_if_no_active_lanes +4 (label 34 at #227)
  224. zero_slot_unmasked             $25 = 0
  225. copy_slot_masked               [no_return_in_default].result = Mask($25)
  226. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  227. label                          label 0x00000022
  228. case_op                        if ($23 == 0x00000002) { LoopMask = true; $24 = false; }
  229. branch_if_no_active_lanes      branch_if_no_active_lanes +4 (label 35 at #233)
  230. copy_constant                  $25 = 0xFFFFFFFF
  231. copy_slot_masked               [no_return_in_default].result = Mask($25)
  232. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  233. label                          label 0x00000023
  234. reenable_loop_mask             LoopMask |= $24
  235. branch_if_no_active_lanes      branch_if_no_active_lanes +2 (label 36 at #237)
  236. mask_off_loop_mask             LoopMask &= ~(CondMask & LoopMask & RetMask)
  237. label                          label 0x00000024
  238. load_loop_mask                 LoopMask = $22
  239. copy_slot_unmasked             $22 = val₃
  240. copy_constant                  $23 = 0x00000001 (1.401298e-45)
  241. add_int                        $22 += $23
  242. copy_slot_masked               val₃ = Mask($22)
  243. copy_constant                  $23 = 0x00000001 (1.401298e-45)
  244. cmpeq_int                      $22 = equal($22, $23)
  245. copy_slot_masked               [no_return_in_default].result = Mask($22)
  246. load_return_mask               RetMask = $21
  247. copy_slot_unmasked             $21 = [no_return_in_default].result
  248. label                          label 0x00000021
  249. copy_slot_masked               $20 = Mask($21)
  250. label                          label 0x00000008
  251. load_condition_mask            CondMask = $50
  252. zero_slot_unmasked             $44 = 0
  253. merge_condition_mask           CondMask = $19 & $20
  254. branch_if_no_active_lanes      branch_if_no_active_lanes +34 (label 7 at #288)
  255. store_return_mask              $45 = RetMask
  256. copy_slot_unmasked             x₈ = x
  257. zero_slot_unmasked             val₄ = 0
  258. store_loop_mask                $46 = LoopMask
  259. copy_slot_unmasked             $47 = x₈
  260. store_loop_mask                $48 = LoopMask
  261. mask_off_loop_mask             LoopMask &= ~(CondMask & LoopMask & RetMask)
  262. case_op                        if ($47 == 0x00000001) { LoopMask = true; $48 = false; }
  263. branch_if_no_active_lanes      branch_if_no_active_lanes +4 (label 38 at #267)
  264. zero_slot_unmasked             $49 = 0
  265. copy_slot_masked               [empty_default].result = Mask($49)
  266. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  267. label                          label 0x00000026
  268. case_op                        if ($47 == 0x00000002) { LoopMask = true; $48 = false; }
  269. branch_if_no_active_lanes      branch_if_no_active_lanes +4 (label 39 at #273)
  270. copy_constant                  $49 = 0xFFFFFFFF
  271. copy_slot_masked               [empty_default].result = Mask($49)
  272. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  273. label                          label 0x00000027
  274. reenable_loop_mask             LoopMask |= $48
  275. label                          label 0x00000028
  276. load_loop_mask                 LoopMask = $46
  277. copy_slot_unmasked             $46 = val₄
  278. copy_constant                  $47 = 0x00000001 (1.401298e-45)
  279. add_int                        $46 += $47
  280. copy_slot_masked               val₄ = Mask($46)
  281. copy_constant                  $47 = 0x00000001 (1.401298e-45)
  282. cmpeq_int                      $46 = equal($46, $47)
  283. copy_slot_masked               [empty_default].result = Mask($46)
  284. load_return_mask               RetMask = $45
  285. copy_slot_unmasked             $45 = [empty_default].result
  286. label                          label 0x00000025
  287. copy_slot_masked               $44 = Mask($45)
  288. label                          label 0x00000007
  289. load_condition_mask            CondMask = $19
  290. zero_slot_unmasked             $58 = 0
  291. merge_condition_mask           CondMask = $43 & $44
  292. branch_if_no_active_lanes      branch_if_no_active_lanes +26 (label 6 at #318)
  293. store_return_mask              $59 = RetMask
  294. copy_slot_unmasked             x₉ = x
  295. store_loop_mask                $60 = LoopMask
  296. copy_slot_unmasked             $61 = x₉
  297. store_loop_mask                $62 = LoopMask
  298. mask_off_loop_mask             LoopMask &= ~(CondMask & LoopMask & RetMask)
  299. case_op                        if ($61 == 0x00000001) { LoopMask = true; $62 = false; }
  300. label                          label 0x0000002A
  301. case_op                        if ($61 == 0x00000002) { LoopMask = true; $62 = false; }
  302. branch_if_no_active_lanes      branch_if_no_active_lanes +4 (label 43 at #306)
  303. copy_constant                  $63 = 0xFFFFFFFF
  304. copy_slot_masked               [return_with_fallthrough].result = Mask($63)
  305. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  306. label                          label 0x0000002B
  307. reenable_loop_mask             LoopMask |= $62
  308. branch_if_no_active_lanes      branch_if_no_active_lanes +4 (label 44 at #312)
  309. zero_slot_unmasked             $62 = 0
  310. copy_slot_masked               [return_with_fallthrough].result = Mask($62)
  311. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  312. label                          label 0x0000002C
  313. load_loop_mask                 LoopMask = $60
  314. load_return_mask               RetMask = $59
  315. copy_slot_unmasked             $59 = [return_with_fallthrough].result
  316. label                          label 0x00000029
  317. copy_slot_masked               $58 = Mask($59)
  318. label                          label 0x00000006
  319. load_condition_mask            CondMask = $43
  320. zero_slot_unmasked             $27 = 0
  321. merge_condition_mask           CondMask = $57 & $58
  322. branch_if_no_active_lanes      branch_if_no_active_lanes +32 (label 5 at #354)
  323. store_return_mask              $28 = RetMask
  324. copy_slot_unmasked             x₁₀ = x
  325. zero_slot_unmasked             val₅ = 0
  326. store_loop_mask                $29 = LoopMask
  327. copy_slot_unmasked             $30 = x₁₀
  328. store_loop_mask                $31 = LoopMask
  329. mask_off_loop_mask             LoopMask &= ~(CondMask & LoopMask & RetMask)
  330. case_op                        if ($30 == 0x00000001) { LoopMask = true; $31 = false; }
  331. label                          label 0x0000002E
  332. case_op                        if ($30 == 0x00000002) { LoopMask = true; $31 = false; }
  333. branch_if_no_active_lanes      branch_if_no_active_lanes +2 (label 47 at #335)
  334. mask_off_loop_mask             LoopMask &= ~(CondMask & LoopMask & RetMask)
  335. label                          label 0x0000002F
  336. reenable_loop_mask             LoopMask |= $31
  337. branch_if_no_active_lanes      branch_if_no_active_lanes +4 (label 48 at #341)
  338. zero_slot_unmasked             $31 = 0
  339. copy_slot_masked               [fallthrough_ends_in_break].result = Mask($31)
  340. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  341. label                          label 0x00000030
  342. load_loop_mask                 LoopMask = $29
  343. copy_slot_unmasked             $29 = val₅
  344. copy_constant                  $30 = 0x00000001 (1.401298e-45)
  345. add_int                        $29 += $30
  346. copy_slot_masked               val₅ = Mask($29)
  347. copy_constant                  $30 = 0x00000001 (1.401298e-45)
  348. cmpeq_int                      $29 = equal($29, $30)
  349. copy_slot_masked               [fallthrough_ends_in_break].result = Mask($29)
  350. load_return_mask               RetMask = $28
  351. copy_slot_unmasked             $28 = [fallthrough_ends_in_break].result
  352. label                          label 0x0000002D
  353. copy_slot_masked               $27 = Mask($28)
  354. label                          label 0x00000005
  355. load_condition_mask            CondMask = $57
  356. zero_slot_unmasked             $39 = 0
  357. merge_condition_mask           CondMask = $26 & $27
  358. branch_if_no_active_lanes      branch_if_no_active_lanes +25 (label 4 at #383)
  359. copy_slot_unmasked             x₁₁ = x
  360. zero_slot_unmasked             val₆ = 0
  361. store_loop_mask                $40 = LoopMask
  362. copy_slot_unmasked             $41 = x₁₁
  363. store_loop_mask                $42 = LoopMask
  364. mask_off_loop_mask             LoopMask &= ~(CondMask & LoopMask & RetMask)
  365. case_op                        if ($41 == 0x00000001) { LoopMask = true; $42 = false; }
  366. label                          label 0x00000032
  367. case_op                        if ($41 == 0x00000002) { LoopMask = true; $42 = false; }
  368. label                          label 0x00000033
  369. reenable_loop_mask             LoopMask |= $42
  370. branch_if_no_active_lanes      branch_if_no_active_lanes +2 (label 52 at #372)
  371. mask_off_loop_mask             LoopMask &= ~(CondMask & LoopMask & RetMask)
  372. label                          label 0x00000034
  373. load_loop_mask                 LoopMask = $40
  374. copy_slot_unmasked             $40 = val₆
  375. copy_constant                  $41 = 0x00000001 (1.401298e-45)
  376. add_int                        $40 += $41
  377. copy_slot_masked               val₆ = Mask($40)
  378. copy_constant                  $41 = 0x00000001 (1.401298e-45)
  379. cmpeq_int                      $40 = equal($40, $41)
  380. copy_slot_masked               [fallthrough_to_default_with_break].result = Mask($40)
  381. label                          label 0x00000031
  382. copy_slot_masked               $39 = Mask($40)
  383. label                          label 0x00000004
  384. load_condition_mask            CondMask = $26
  385. zero_slot_unmasked             $33 = 0
  386. merge_condition_mask           CondMask = $38 & $39
  387. branch_if_no_active_lanes      branch_if_no_active_lanes +22 (label 3 at #409)
  388. store_return_mask              $34 = RetMask
  389. copy_slot_unmasked             x₁₂ = x
  390. store_loop_mask                $35 = LoopMask
  391. copy_slot_unmasked             $36 = x₁₂
  392. store_loop_mask                $37 = LoopMask
  393. mask_off_loop_mask             LoopMask &= ~(CondMask & LoopMask & RetMask)
  394. case_op                        if ($36 == 0x00000001) { LoopMask = true; $37 = false; }
  395. label                          label 0x00000036
  396. case_op                        if ($36 == 0x00000002) { LoopMask = true; $37 = false; }
  397. label                          label 0x00000037
  398. reenable_loop_mask             LoopMask |= $37
  399. branch_if_no_active_lanes      branch_if_no_active_lanes +4 (label 56 at #403)
  400. copy_constant                  $37 = 0xFFFFFFFF
  401. copy_slot_masked               [fallthrough_to_default_with_return].result = Mask($37)
  402. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  403. label                          label 0x00000038
  404. load_loop_mask                 LoopMask = $35
  405. load_return_mask               RetMask = $34
  406. copy_slot_unmasked             $34 = [fallthrough_to_default_with_return].result
  407. label                          label 0x00000035
  408. copy_slot_masked               $33 = Mask($34)
  409. label                          label 0x00000003
  410. load_condition_mask            CondMask = $38
  411. zero_slot_unmasked             $92 = 0
  412. merge_condition_mask           CondMask = $32 & $33
  413. branch_if_no_active_lanes      branch_if_no_active_lanes +45 (label 2 at #458)
  414. store_return_mask              $93 = RetMask
  415. copy_slot_unmasked             x₁₃ = x
  416. zero_slot_unmasked             val₇ = 0
  417. store_loop_mask                $94 = LoopMask
  418. copy_slot_unmasked             $95 = x₁₃
  419. store_loop_mask                $96 = LoopMask
  420. mask_off_loop_mask             LoopMask &= ~(CondMask & LoopMask & RetMask)
  421. case_op                        if ($95 == 0x00000001) { LoopMask = true; $96 = false; }
  422. branch_if_no_active_lanes      branch_if_no_active_lanes +22 (label 58 at #444)
  423. zero_slot_unmasked             i = 0
  424. store_loop_mask                $97 = LoopMask
  425. jump                           jump +11 (label 59 at #436)
  426. label                          label 0x0000003C
  427. copy_slot_unmasked             $98 = val₇
  428. copy_constant                  $99 = 0x00000001 (1.401298e-45)
  429. add_int                        $98 += $99
  430. copy_slot_masked               val₇ = Mask($98)
  431. mask_off_loop_mask             LoopMask &= ~(CondMask & LoopMask & RetMask)
  432. copy_slot_unmasked             $98 = i
  433. copy_constant                  $99 = 0x00000001 (1.401298e-45)
  434. add_int                        $98 += $99
  435. copy_slot_masked               i = Mask($98)
  436. label                          label 0x0000003B
  437. copy_slot_unmasked             $98 = i
  438. copy_constant                  $99 = 0x00000005 (7.006492e-45)
  439. cmplt_int                      $98 = lessThan($98, $99)
  440. merge_loop_mask                LoopMask &= $98
  441. stack_rewind
  442. branch_if_any_active_lanes     branch_if_any_active_lanes -16 (label 60 at #426)
  443. load_loop_mask                 LoopMask = $97
  444. label                          label 0x0000003A
  445. case_op                        if ($95 == 0x00000002) { LoopMask = true; $96 = false; }
  446. label                          label 0x0000003D
  447. reenable_loop_mask             LoopMask |= $96
  448. branch_if_no_active_lanes      branch_if_no_active_lanes +4 (label 62 at #452)
  449. copy_constant                  $96 = 0xFFFFFFFF
  450. copy_slot_masked               [fallthrough_with_loop_break].result = Mask($96)
  451. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  452. label                          label 0x0000003E
  453. load_loop_mask                 LoopMask = $94
  454. load_return_mask               RetMask = $93
  455. copy_slot_unmasked             $93 = [fallthrough_with_loop_break].result
  456. label                          label 0x00000039
  457. copy_slot_masked               $92 = Mask($93)
  458. label                          label 0x00000002
  459. load_condition_mask            CondMask = $32
  460. zero_slot_unmasked             $0 = 0
  461. merge_condition_mask           CondMask = $91 & $92
  462. branch_if_no_active_lanes      branch_if_no_active_lanes +49 (label 1 at #511)
  463. store_return_mask              $1 = RetMask
  464. copy_slot_unmasked             x₁₄ = x
  465. zero_slot_unmasked             val₈ = 0
  466. store_loop_mask                $2 = LoopMask
  467. copy_slot_unmasked             $3 = x₁₄
  468. store_loop_mask                $4 = LoopMask
  469. mask_off_loop_mask             LoopMask &= ~(CondMask & LoopMask & RetMask)
  470. case_op                        if ($3 == 0x00000001) { LoopMask = true; $4 = false; }
  471. branch_if_no_active_lanes      branch_if_no_active_lanes +26 (label 64 at #497)
  472. zero_slot_unmasked             i₁ = 0
  473. store_loop_mask                $5 = LoopMask
  474. jump                           jump +15 (label 65 at #489)
  475. label                          label 0x00000042
  476. zero_slot_unmasked             [temporary 0] = 0
  477. copy_slot_unmasked             $6 = val₈
  478. copy_constant                  $7 = 0x00000001 (1.401298e-45)
  479. add_int                        $6 += $7
  480. copy_slot_masked               val₈ = Mask($6)
  481. copy_constant                  $6 = 0xFFFFFFFF
  482. copy_slot_masked               [temporary 0] = Mask($6)
  483. mask_off_loop_mask             LoopMask &= ~(CondMask & LoopMask & RetMask)
  484. reenable_loop_mask             LoopMask |= [temporary 0]
  485. copy_slot_unmasked             $6 = i₁
  486. copy_constant                  $7 = 0x00000001 (1.401298e-45)
  487. add_int                        $6 += $7
  488. copy_slot_masked               i₁ = Mask($6)
  489. label                          label 0x00000041
  490. copy_slot_unmasked             $6 = i₁
  491. copy_constant                  $7 = 0x00000005 (7.006492e-45)
  492. cmplt_int                      $6 = lessThan($6, $7)
  493. merge_loop_mask                LoopMask &= $6
  494. stack_rewind
  495. branch_if_any_active_lanes     branch_if_any_active_lanes -20 (label 66 at #475)
  496. load_loop_mask                 LoopMask = $5
  497. label                          label 0x00000040
  498. case_op                        if ($3 == 0x00000002) { LoopMask = true; $4 = false; }
  499. label                          label 0x00000043
  500. reenable_loop_mask             LoopMask |= $4
  501. branch_if_no_active_lanes      branch_if_no_active_lanes +4 (label 68 at #505)
  502. copy_constant                  $4 = 0xFFFFFFFF
  503. copy_slot_masked               [fallthrough_with_loop_continue].result = Mask($4)
  504. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  505. label                          label 0x00000044
  506. load_loop_mask                 LoopMask = $2
  507. load_return_mask               RetMask = $1
  508. copy_slot_unmasked             $1 = [fallthrough_with_loop_continue].result
  509. label                          label 0x0000003F
  510. copy_slot_masked               $0 = Mask($1)
  511. label                          label 0x00000001
  512. load_condition_mask            CondMask = $91
  513. swizzle_4                      $0..3 = ($0..3).xxxx
  514. copy_4_constants               $4..7 = colorRed
  515. copy_4_constants               $8..11 = colorGreen
  516. mix_4_ints                     $0..3 = mix($4..7, $8..11, $0..3)
  517. copy_4_slots_unmasked          [main].result = $0..3
  518. load_src                       src.rgba = [main].result
