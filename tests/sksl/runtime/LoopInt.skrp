    1. store_src_rg                   pos = src.rg
    2. init_lane_masks                CondMask = LoopMask = RetMask = true
    3. zero_slot_unmasked             $0 = 0
    4. copy_slot_unmasked             kZero = $0
    5. copy_constant                  $0 = 0x0000000A (1.401298e-44)
    6. copy_slot_unmasked             kTen = $0
    7. copy_slot_unmasked             $0 = pos(0)
    8. copy_constant                  $1 = colorGreen(1)
    9. max_float                      $0 = max($0, $1)
   10. copy_constant                  $1 = colorGreen(3)
   11. min_float                      $0 = min($0, $1)
   12. cast_to_int_from_float         $0 = FloatToInt($0)
   13. copy_constant                  $1 = 0x00000005 (7.006492e-45)
   14. mul_int                        $0 *= $1
   15. copy_slot_unmasked             five = $0
   16. store_condition_mask           $21 = CondMask
   17. store_condition_mask           $43 = CondMask
   18. store_condition_mask           $54 = CondMask
   19. store_condition_mask           $32 = CondMask
   20. store_condition_mask           $83 = CondMask
   21. store_condition_mask           $65 = CondMask
   22. store_condition_mask           $14 = CondMask
   23. store_condition_mask           $76 = CondMask
   24. store_condition_mask           $8 = CondMask
   25. branch_if_no_active_lanes      branch_if_no_active_lanes +35 (#60)
   26. store_return_mask              $9 = RetMask
   27. copy_slot_unmasked             $10 = five
   28. copy_slot_unmasked             five = $10
   29. copy_slot_unmasked             $10 = kZero
   30. copy_slot_unmasked             i = $10
   31. store_loop_mask                $10 = LoopMask
   32. jump                           jump +16 (#48)
   33. zero_slot_unmasked             [for-loop continue mask 0] = 0
   34. store_condition_mask           $11 = CondMask
   35. copy_slot_unmasked             $12 = i
   36. copy_slot_unmasked             $13 = five
   37. cmpeq_int                      $12 = equal($12, $13)
   38. merge_condition_mask           CondMask = $11 & $12
   39. copy_slot_unmasked             $13 = i
   40. copy_slot_masked               [return_loop].result = Mask($13)
   41. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   42. load_condition_mask            CondMask = $11
   43. reenable_loop_mask             LoopMask |= [for-loop continue mask 0]
   44. copy_slot_unmasked             $11 = i
   45. copy_constant                  $12 = 0x00000001 (1.401298e-45)
   46. add_int                        $11 += $12
   47. copy_slot_masked               i = Mask($11)
   48. copy_slot_unmasked             $11 = i
   49. copy_constant                  $12 = 0x0000000A (1.401298e-44)
   50. cmplt_int                      $11 = lessThan($11, $12)
   51. merge_loop_mask                LoopMask &= $11
   52. stack_rewind
   53. branch_if_any_active_lanes     branch_if_any_active_lanes -20 (#33)
   54. load_loop_mask                 LoopMask = $10
   55. zero_slot_unmasked             $10 = 0
   56. copy_slot_masked               [return_loop].result = Mask($10)
   57. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   58. load_return_mask               RetMask = $9
   59. copy_slot_unmasked             $9 = [return_loop].result
   60. copy_constant                  $10 = 0x00000005 (7.006492e-45)
   61. cmpeq_int                      $9 = equal($9, $10)
   62. zero_slot_unmasked             $77 = 0
   63. merge_condition_mask           CondMask = $8 & $9
   64. branch_if_no_active_lanes      branch_if_no_active_lanes +43 (#107)
   65. store_return_mask              $78 = RetMask
   66. copy_slot_unmasked             $79 = five
   67. copy_slot_unmasked             five = $79
   68. zero_slot_unmasked             $79 = 0
   69. copy_slot_unmasked             sum = $79
   70. zero_slot_unmasked             $79 = 0
   71. copy_slot_unmasked             i = $79
   72. store_loop_mask                $79 = LoopMask
   73. jump                           jump +19 (#92)
   74. zero_slot_unmasked             [for-loop continue mask 1] = 0
   75. store_condition_mask           $80 = CondMask
   76. copy_slot_unmasked             $81 = i
   77. copy_slot_unmasked             $82 = five
   78. cmplt_int                      $81 = lessThan($81, $82)
   79. merge_condition_mask           CondMask = $80 & $81
   80. copy_constant                  $82 = 0xFFFFFFFF
   81. copy_slot_masked               [for-loop continue mask 1] = Mask($82)
   82. mask_off_loop_mask             LoopMask &= ~(CondMask & LoopMask & RetMask)
   83. load_condition_mask            CondMask = $80
   84. copy_2_slots_unmasked          $80..81 = sum(0..1)
   85. add_int                        $80 += $81
   86. copy_slot_masked               sum = Mask($80)
   87. reenable_loop_mask             LoopMask |= [for-loop continue mask 1]
   88. copy_slot_unmasked             $80 = i
   89. copy_constant                  $81 = 0x00000001 (1.401298e-45)
   90. add_int                        $80 += $81
   91. copy_slot_masked               i = Mask($80)
   92. copy_slot_unmasked             $80 = i
   93. copy_slot_unmasked             $81 = kTen
   94. cmplt_int                      $80 = lessThan($80, $81)
   95. merge_loop_mask                LoopMask &= $80
   96. stack_rewind
   97. branch_if_any_active_lanes     branch_if_any_active_lanes -23 (#74)
   98. load_loop_mask                 LoopMask = $79
   99. copy_slot_unmasked             $79 = sum
  100. copy_slot_masked               [continue_loop].result = Mask($79)
  101. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  102. load_return_mask               RetMask = $78
  103. copy_slot_unmasked             $78 = [continue_loop].result
  104. copy_constant                  $79 = 0x00000023 (4.904545e-44)
  105. cmpeq_int                      $78 = equal($78, $79)
  106. copy_slot_masked               $77 = Mask($78)
  107. load_condition_mask            CondMask = $8
  108. zero_slot_unmasked             $15 = 0
  109. merge_condition_mask           CondMask = $76 & $77
  110. branch_if_no_active_lanes      branch_if_no_active_lanes +44 (#154)
  111. store_return_mask              $16 = RetMask
  112. copy_constant                  $17 = 0x00000005 (7.006492e-45)
  113. copy_slot_unmasked             five = $17
  114. zero_slot_unmasked             $17 = 0
  115. copy_slot_unmasked             sum = $17
  116. copy_constant                  $17 = 0x00000001 (1.401298e-45)
  117. copy_slot_unmasked             kOne = $17
  118. zero_slot_unmasked             $17 = 0
  119. copy_slot_unmasked             i = $17
  120. store_loop_mask                $17 = LoopMask
  121. jump                           jump +18 (#139)
  122. zero_slot_unmasked             [for-loop continue mask 2] = 0
  123. store_condition_mask           $18 = CondMask
  124. copy_slot_unmasked             $19 = five
  125. copy_slot_unmasked             $20 = i
  126. cmplt_int                      $19 = lessThan($19, $20)
  127. merge_condition_mask           CondMask = $18 & $19
  128. mask_off_loop_mask             LoopMask &= ~(CondMask & LoopMask & RetMask)
  129. load_condition_mask            CondMask = $18
  130. copy_slot_unmasked             $18 = sum
  131. copy_slot_unmasked             $19 = i
  132. add_int                        $18 += $19
  133. copy_slot_masked               sum = Mask($18)
  134. reenable_loop_mask             LoopMask |= [for-loop continue mask 2]
  135. copy_slot_unmasked             $18 = i
  136. copy_slot_unmasked             $19 = kOne
  137. add_int                        $18 += $19
  138. copy_slot_masked               i = Mask($18)
  139. copy_slot_unmasked             $18 = i
  140. copy_constant                  $19 = 0x0000000A (1.401298e-44)
  141. cmplt_int                      $18 = lessThan($18, $19)
  142. merge_loop_mask                LoopMask &= $18
  143. stack_rewind
  144. branch_if_any_active_lanes     branch_if_any_active_lanes -22 (#122)
  145. load_loop_mask                 LoopMask = $17
  146. copy_slot_unmasked             $17 = sum
  147. copy_slot_masked               [break_loop].result = Mask($17)
  148. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  149. load_return_mask               RetMask = $16
  150. copy_slot_unmasked             $16 = [break_loop].result
  151. copy_constant                  $17 = 0x0000000F (2.101948e-44)
  152. cmpeq_int                      $16 = equal($16, $17)
  153. copy_slot_masked               $15 = Mask($16)
  154. load_condition_mask            CondMask = $76
  155. zero_slot_unmasked             $66 = 0
  156. merge_condition_mask           CondMask = $14 & $15
  157. branch_if_no_active_lanes      branch_if_no_active_lanes +37 (#194)
  158. store_return_mask              $67 = RetMask
  159. copy_constant                  $68 = 0x00000009 (1.261169e-44)
  160. swizzle_4                      $68..71 = ($68..71).xxxx
  161. copy_4_slots_unmasked          result = $68..71
  162. copy_constant                  $68 = 0x00000001 (1.401298e-45)
  163. copy_slot_unmasked             i = $68
  164. store_loop_mask                $68 = LoopMask
  165. jump                           jump +9 (#174)
  166. zero_slot_unmasked             [for-loop continue mask 3] = 0
  167. copy_4_slots_unmasked          $69..72 = result
  168. copy_4_slots_masked            result = Mask($69..72)
  169. reenable_loop_mask             LoopMask |= [for-loop continue mask 3]
  170. copy_slot_unmasked             $69 = i
  171. copy_constant                  $70 = 0x00000001 (1.401298e-45)
  172. add_int                        $69 += $70
  173. copy_slot_masked               i = Mask($69)
  174. copy_slot_unmasked             $69 = i
  175. copy_constant                  $70 = 0x00000003 (4.203895e-45)
  176. cmple_int                      $69 = lessThanEqual($69, $70)
  177. merge_loop_mask                LoopMask &= $69
  178. stack_rewind
  179. branch_if_any_active_lanes     branch_if_any_active_lanes -13 (#166)
  180. load_loop_mask                 LoopMask = $68
  181. copy_4_slots_unmasked          $68..71 = result
  182. copy_constant                  $72 = 0x00000009 (1.261169e-44)
  183. copy_constant                  $73 = 0x00000001 (1.401298e-45)
  184. copy_constant                  $74 = 0x00000002 (2.802597e-45)
  185. copy_constant                  $75 = 0x00000003 (4.203895e-45)
  186. cmpeq_4_ints                   $68..71 = equal($68..71, $72..75)
  187. bitwise_and_2_ints             $68..69 &= $70..71
  188. bitwise_and_int                $68 &= $69
  189. copy_slot_masked               [loop_operator_le].result = Mask($68)
  190. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  191. load_return_mask               RetMask = $67
  192. copy_slot_unmasked             $67 = [loop_operator_le].result
  193. copy_slot_masked               $66 = Mask($67)
  194. load_condition_mask            CondMask = $14
  195. zero_slot_unmasked             $84 = 0
  196. merge_condition_mask           CondMask = $65 & $66
  197. branch_if_no_active_lanes      branch_if_no_active_lanes +37 (#234)
  198. store_return_mask              $85 = RetMask
  199. copy_constant                  $86 = 0x00000009 (1.261169e-44)
  200. swizzle_4                      $86..89 = ($86..89).xxxx
  201. copy_4_slots_unmasked          result = $86..89
  202. copy_constant                  $86 = 0x00000001 (1.401298e-45)
  203. copy_slot_unmasked             i = $86
  204. store_loop_mask                $86 = LoopMask
  205. jump                           jump +9 (#214)
  206. zero_slot_unmasked             [for-loop continue mask 4] = 0
  207. copy_4_slots_unmasked          $87..90 = result
  208. copy_4_slots_masked            result = Mask($87..90)
  209. reenable_loop_mask             LoopMask |= [for-loop continue mask 4]
  210. copy_slot_unmasked             $87 = i
  211. copy_constant                  $88 = 0x00000001 (1.401298e-45)
  212. add_int                        $87 += $88
  213. copy_slot_masked               i = Mask($87)
  214. copy_slot_unmasked             $87 = i
  215. copy_constant                  $88 = 0x00000004 (5.605194e-45)
  216. cmplt_int                      $87 = lessThan($87, $88)
  217. merge_loop_mask                LoopMask &= $87
  218. stack_rewind
  219. branch_if_any_active_lanes     branch_if_any_active_lanes -13 (#206)
  220. load_loop_mask                 LoopMask = $86
  221. copy_4_slots_unmasked          $86..89 = result
  222. copy_constant                  $90 = 0x00000009 (1.261169e-44)
  223. copy_constant                  $91 = 0x00000001 (1.401298e-45)
  224. copy_constant                  $92 = 0x00000002 (2.802597e-45)
  225. copy_constant                  $93 = 0x00000003 (4.203895e-45)
  226. cmpeq_4_ints                   $86..89 = equal($86..89, $90..93)
  227. bitwise_and_2_ints             $86..87 &= $88..89
  228. bitwise_and_int                $86 &= $87
  229. copy_slot_masked               [loop_operator_lt].result = Mask($86)
  230. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  231. load_return_mask               RetMask = $85
  232. copy_slot_unmasked             $85 = [loop_operator_lt].result
  233. copy_slot_masked               $84 = Mask($85)
  234. load_condition_mask            CondMask = $65
  235. zero_slot_unmasked             $33 = 0
  236. merge_condition_mask           CondMask = $83 & $84
  237. branch_if_no_active_lanes      branch_if_no_active_lanes +37 (#274)
  238. store_return_mask              $34 = RetMask
  239. copy_constant                  $35 = 0x00000009 (1.261169e-44)
  240. swizzle_4                      $35..38 = ($35..38).xxxx
  241. copy_4_slots_unmasked          result = $35..38
  242. copy_constant                  $35 = 0x00000003 (4.203895e-45)
  243. copy_slot_unmasked             i = $35
  244. store_loop_mask                $35 = LoopMask
  245. jump                           jump +9 (#254)
  246. zero_slot_unmasked             [for-loop continue mask 5] = 0
  247. copy_4_slots_unmasked          $36..39 = result
  248. copy_4_slots_masked            result = Mask($36..39)
  249. reenable_loop_mask             LoopMask |= [for-loop continue mask 5]
  250. copy_slot_unmasked             $36 = i
  251. copy_constant                  $37 = 0x00000001 (1.401298e-45)
  252. sub_int                        $36 -= $37
  253. copy_slot_masked               i = Mask($36)
  254. copy_constant                  $36 = 0x00000001 (1.401298e-45)
  255. copy_slot_unmasked             $37 = i
  256. cmple_int                      $36 = lessThanEqual($36, $37)
  257. merge_loop_mask                LoopMask &= $36
  258. stack_rewind
  259. branch_if_any_active_lanes     branch_if_any_active_lanes -13 (#246)
  260. load_loop_mask                 LoopMask = $35
  261. copy_4_slots_unmasked          $35..38 = result
  262. copy_constant                  $39 = 0x00000009 (1.261169e-44)
  263. copy_constant                  $40 = 0x00000003 (4.203895e-45)
  264. copy_constant                  $41 = 0x00000002 (2.802597e-45)
  265. copy_constant                  $42 = 0x00000001 (1.401298e-45)
  266. cmpeq_4_ints                   $35..38 = equal($35..38, $39..42)
  267. bitwise_and_2_ints             $35..36 &= $37..38
  268. bitwise_and_int                $35 &= $36
  269. copy_slot_masked               [loop_operator_ge].result = Mask($35)
  270. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  271. load_return_mask               RetMask = $34
  272. copy_slot_unmasked             $34 = [loop_operator_ge].result
  273. copy_slot_masked               $33 = Mask($34)
  274. load_condition_mask            CondMask = $83
  275. zero_slot_unmasked             $55 = 0
  276. merge_condition_mask           CondMask = $32 & $33
  277. branch_if_no_active_lanes      branch_if_no_active_lanes +37 (#314)
  278. store_return_mask              $56 = RetMask
  279. copy_constant                  $57 = 0x00000009 (1.261169e-44)
  280. swizzle_4                      $57..60 = ($57..60).xxxx
  281. copy_4_slots_unmasked          result = $57..60
  282. copy_constant                  $57 = 0x00000003 (4.203895e-45)
  283. copy_slot_unmasked             i = $57
  284. store_loop_mask                $57 = LoopMask
  285. jump                           jump +9 (#294)
  286. zero_slot_unmasked             [for-loop continue mask 6] = 0
  287. copy_4_slots_unmasked          $58..61 = result
  288. copy_4_slots_masked            result = Mask($58..61)
  289. reenable_loop_mask             LoopMask |= [for-loop continue mask 6]
  290. copy_slot_unmasked             $58 = i
  291. copy_constant                  $59 = 0x00000001 (1.401298e-45)
  292. sub_int                        $58 -= $59
  293. copy_slot_masked               i = Mask($58)
  294. zero_slot_unmasked             $58 = 0
  295. copy_slot_unmasked             $59 = i
  296. cmplt_int                      $58 = lessThan($58, $59)
  297. merge_loop_mask                LoopMask &= $58
  298. stack_rewind
  299. branch_if_any_active_lanes     branch_if_any_active_lanes -13 (#286)
  300. load_loop_mask                 LoopMask = $57
  301. copy_4_slots_unmasked          $57..60 = result
  302. copy_constant                  $61 = 0x00000009 (1.261169e-44)
  303. copy_constant                  $62 = 0x00000003 (4.203895e-45)
  304. copy_constant                  $63 = 0x00000002 (2.802597e-45)
  305. copy_constant                  $64 = 0x00000001 (1.401298e-45)
  306. cmpeq_4_ints                   $57..60 = equal($57..60, $61..64)
  307. bitwise_and_2_ints             $57..58 &= $59..60
  308. bitwise_and_int                $57 &= $58
  309. copy_slot_masked               [loop_operator_gt].result = Mask($57)
  310. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  311. load_return_mask               RetMask = $56
  312. copy_slot_unmasked             $56 = [loop_operator_gt].result
  313. copy_slot_masked               $55 = Mask($56)
  314. load_condition_mask            CondMask = $32
  315. zero_slot_unmasked             $44 = 0
  316. merge_condition_mask           CondMask = $54 & $55
  317. branch_if_no_active_lanes      branch_if_no_active_lanes +37 (#354)
  318. store_return_mask              $45 = RetMask
  319. copy_constant                  $46 = 0x00000009 (1.261169e-44)
  320. swizzle_4                      $46..49 = ($46..49).xxxx
  321. copy_4_slots_unmasked          result = $46..49
  322. copy_constant                  $46 = 0x00000001 (1.401298e-45)
  323. copy_slot_unmasked             i = $46
  324. store_loop_mask                $46 = LoopMask
  325. jump                           jump +9 (#334)
  326. zero_slot_unmasked             [for-loop continue mask 7] = 0
  327. copy_4_slots_unmasked          $47..50 = result
  328. copy_4_slots_masked            result = Mask($47..50)
  329. reenable_loop_mask             LoopMask |= [for-loop continue mask 7]
  330. copy_slot_unmasked             $47 = i
  331. copy_constant                  $48 = 0x00000001 (1.401298e-45)
  332. add_int                        $47 += $48
  333. copy_slot_masked               i = Mask($47)
  334. copy_slot_unmasked             $47 = i
  335. copy_constant                  $48 = 0x00000001 (1.401298e-45)
  336. cmpeq_int                      $47 = equal($47, $48)
  337. merge_loop_mask                LoopMask &= $47
  338. stack_rewind
  339. branch_if_any_active_lanes     branch_if_any_active_lanes -13 (#326)
  340. load_loop_mask                 LoopMask = $46
  341. copy_4_slots_unmasked          $46..49 = result
  342. copy_constant                  $50 = 0x00000009 (1.261169e-44)
  343. copy_constant                  $51 = 0x00000009 (1.261169e-44)
  344. copy_constant                  $52 = 0x00000009 (1.261169e-44)
  345. copy_constant                  $53 = 0x00000001 (1.401298e-45)
  346. cmpeq_4_ints                   $46..49 = equal($46..49, $50..53)
  347. bitwise_and_2_ints             $46..47 &= $48..49
  348. bitwise_and_int                $46 &= $47
  349. copy_slot_masked               [loop_operator_eq].result = Mask($46)
  350. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  351. load_return_mask               RetMask = $45
  352. copy_slot_unmasked             $45 = [loop_operator_eq].result
  353. copy_slot_masked               $44 = Mask($45)
  354. load_condition_mask            CondMask = $54
  355. zero_slot_unmasked             $22 = 0
  356. merge_condition_mask           CondMask = $43 & $44
  357. branch_if_no_active_lanes      branch_if_no_active_lanes +37 (#394)
  358. store_return_mask              $23 = RetMask
  359. copy_constant                  $24 = 0x00000009 (1.261169e-44)
  360. swizzle_4                      $24..27 = ($24..27).xxxx
  361. copy_4_slots_unmasked          result = $24..27
  362. copy_constant                  $24 = 0x00000001 (1.401298e-45)
  363. copy_slot_unmasked             i = $24
  364. store_loop_mask                $24 = LoopMask
  365. jump                           jump +9 (#374)
  366. zero_slot_unmasked             [for-loop continue mask 8] = 0
  367. copy_4_slots_unmasked          $25..28 = result
  368. copy_4_slots_masked            result = Mask($25..28)
  369. reenable_loop_mask             LoopMask |= [for-loop continue mask 8]
  370. copy_slot_unmasked             $25 = i
  371. copy_constant                  $26 = 0x00000001 (1.401298e-45)
  372. add_int                        $25 += $26
  373. copy_slot_masked               i = Mask($25)
  374. copy_slot_unmasked             $25 = i
  375. copy_constant                  $26 = 0x00000004 (5.605194e-45)
  376. cmpne_int                      $25 = notEqual($25, $26)
  377. merge_loop_mask                LoopMask &= $25
  378. stack_rewind
  379. branch_if_any_active_lanes     branch_if_any_active_lanes -13 (#366)
  380. load_loop_mask                 LoopMask = $24
  381. copy_4_slots_unmasked          $24..27 = result
  382. copy_constant                  $28 = 0x00000009 (1.261169e-44)
  383. copy_constant                  $29 = 0x00000001 (1.401298e-45)
  384. copy_constant                  $30 = 0x00000002 (2.802597e-45)
  385. copy_constant                  $31 = 0x00000003 (4.203895e-45)
  386. cmpeq_4_ints                   $24..27 = equal($24..27, $28..31)
  387. bitwise_and_2_ints             $24..25 &= $26..27
  388. bitwise_and_int                $24 &= $25
  389. copy_slot_masked               [loop_operator_ne].result = Mask($24)
  390. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  391. load_return_mask               RetMask = $23
  392. copy_slot_unmasked             $23 = [loop_operator_ne].result
  393. copy_slot_masked               $22 = Mask($23)
  394. load_condition_mask            CondMask = $43
  395. copy_4_constants               $0..3 = colorRed
  396. merge_condition_mask           CondMask = $21 & $22
  397. copy_4_constants               $4..7 = colorGreen
  398. copy_4_slots_masked            $0..3 = Mask($4..7)
  399. load_condition_mask            CondMask = $21
  400. copy_4_slots_masked            [main].result = Mask($0..3)
  401. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  402. load_src                       src.rgba = [main].result
