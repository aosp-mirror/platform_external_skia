    1. store_src_rg                   coords = src.rg
    2. init_lane_masks                CondMask = LoopMask = RetMask = true
    3. copy_constant                  $0 = colorGreen(0)
    4. copy_constant                  $1 = colorGreen(2)
    5. div_float                      $0 /= $1
    6. copy_slot_unmasked             NAN1 = $0
    7. copy_constant                  $0 = colorGreen(2)
    8. copy_constant                  $1 = colorGreen(0)
    9. div_float                      $0 /= $1
   10. copy_slot_unmasked             NAN2 = $0
   11. copy_constant                  $0 = colorGreen(0)
   12. copy_constant                  $1 = colorGreen(2)
   13. mul_float                      $0 *= $1
   14. copy_slot_unmasked             ZP = $0
   15. zero_slot_unmasked             $0 = 0
   16. copy_constant                  $1 = colorGreen(0)
   17. sub_float                      $0 -= $1
   18. copy_constant                  $1 = colorGreen(2)
   19. mul_float                      $0 *= $1
   20. copy_slot_unmasked             ZM = $0
   21. copy_constant                  $0 = colorGreen(1)
   22. copy_constant                  $1 = 0x42280000 (42.0)
   23. mul_float                      $0 *= $1
   24. copy_slot_unmasked             F42 = $0
   25. copy_constant                  $0 = colorGreen(1)
   26. copy_constant                  $1 = 0x422C0000 (43.0)
   27. mul_float                      $0 *= $1
   28. copy_slot_unmasked             F43 = $0
   29. copy_constant                  $0 = colorGreen(1)
   30. copy_constant                  $1 = 0x42300000 (44.0)
   31. mul_float                      $0 *= $1
   32. copy_slot_unmasked             F44 = $0
   33. copy_constant                  $0 = 0xFFFFFFFF
   34. copy_slot_unmasked             EQ = $0
   35. zero_slot_unmasked             $0 = 0
   36. copy_slot_unmasked             NE = $0
   37. copy_constant                  $0 = colorGreen(0)
   38. copy_constant                  $1 = 0x3F800000 (1.0)
   39. add_float                      $0 += $1
   40. copy_slot_unmasked             _0_one = $0
   41. zero_3_slots_unmasked          _1_a[0](0..2) = 0
   42. copy_slot_unmasked             $0 = F42
   43. copy_slot_masked               _1_a[0] = Mask($0)
   44. copy_slot_unmasked             $0 = ZM
   45. copy_slot_masked               _1_a[1] = Mask($0)
   46. copy_slot_unmasked             $0 = ZP
   47. copy_slot_masked               _1_a[2] = Mask($0)
   48. zero_3_slots_unmasked          _2_b[0](0..2) = 0
   49. copy_slot_unmasked             $0 = F42
   50. copy_slot_unmasked             $1 = _0_one
   51. mul_float                      $0 *= $1
   52. copy_slot_masked               _2_b[0] = Mask($0)
   53. copy_slot_unmasked             $0 = ZM
   54. copy_slot_unmasked             $1 = _0_one
   55. mul_float                      $0 *= $1
   56. copy_slot_masked               _2_b[1] = Mask($0)
   57. copy_slot_unmasked             $0 = ZP
   58. copy_slot_unmasked             $1 = _0_one
   59. mul_float                      $0 *= $1
   60. copy_slot_masked               _2_b[2] = Mask($0)
   61. store_condition_mask           $20 = CondMask
   62. store_condition_mask           $40 = CondMask
   63. store_condition_mask           $50 = CondMask
   64. store_condition_mask           $30 = CondMask
   65. store_condition_mask           $78 = CondMask
   66. store_condition_mask           $60 = CondMask
   67. store_condition_mask           $10 = CondMask
   68. store_condition_mask           $70 = CondMask
   69. store_condition_mask           $8 = CondMask
   70. copy_slot_unmasked             $9 = EQ
   71. copy_4_slots_unmasked          $71..74 = _1_a[0](0..3)
   72. copy_2_slots_unmasked          $75..76 = _2_b[1](0..1)
   73. cmpne_3_floats                 $71..73 = notEqual($71..73, $74..76)
   74. bitwise_or_int                 $72 |= $73
   75. bitwise_or_int                 $71 |= $72
   76. merge_condition_mask           CondMask = $8 & $9
   77. branch_if_no_active_lanes      branch_if_no_active_lanes +7 (#84)
   78. copy_4_slots_unmasked          $72..75 = _1_a[0](0..3)
   79. copy_2_slots_unmasked          $76..77 = _2_b[1](0..1)
   80. cmpeq_3_floats                 $72..74 = equal($72..74, $75..77)
   81. bitwise_and_int                $73 &= $74
   82. bitwise_and_int                $72 &= $73
   83. copy_slot_masked               $71 = Mask($72)
   84. load_condition_mask            CondMask = $8
   85. zero_slot_unmasked             $11 = 0
   86. merge_condition_mask           CondMask = $70 & $71
   87. branch_if_no_active_lanes      branch_if_no_active_lanes +56 (#143)
   88. store_return_mask              $12 = RetMask
   89. copy_slot_unmasked             $13 = NE
   90. copy_slot_unmasked             eq = $13
   91. copy_slot_unmasked             $13 = F42
   92. copy_slot_unmasked             f1 = $13
   93. copy_slot_unmasked             $13 = ZM
   94. copy_slot_unmasked             f2 = $13
   95. copy_slot_unmasked             $13 = ZP
   96. copy_slot_unmasked             f3 = $13
   97. copy_constant                  $13 = colorGreen(0)
   98. copy_constant                  $14 = 0x3F800000 (1.0)
   99. add_float                      $13 += $14
  100. copy_slot_unmasked             one = $13
  101. zero_3_slots_unmasked          a[0](0..2) = 0
  102. copy_slot_unmasked             $13 = f1
  103. copy_slot_masked               a[0] = Mask($13)
  104. copy_slot_unmasked             $13 = f2
  105. copy_slot_masked               a[1] = Mask($13)
  106. copy_slot_unmasked             $13 = f3
  107. copy_slot_masked               a[2] = Mask($13)
  108. zero_3_slots_unmasked          b[0](0..2) = 0
  109. copy_slot_unmasked             $13 = f1
  110. copy_slot_unmasked             $14 = one
  111. mul_float                      $13 *= $14
  112. copy_slot_masked               b[0] = Mask($13)
  113. copy_slot_unmasked             $13 = f2
  114. copy_slot_unmasked             $14 = one
  115. mul_float                      $13 *= $14
  116. copy_slot_masked               b[1] = Mask($13)
  117. copy_slot_unmasked             $13 = f3
  118. copy_slot_unmasked             $14 = one
  119. mul_float                      $13 *= $14
  120. copy_slot_masked               b[2] = Mask($13)
  121. store_condition_mask           $72 = CondMask
  122. copy_slot_unmasked             $73 = eq
  123. copy_4_slots_unmasked          $13..16 = a[0](0..3)
  124. copy_2_slots_unmasked          $17..18 = b[1](0..1)
  125. cmpne_3_floats                 $13..15 = notEqual($13..15, $16..18)
  126. bitwise_or_int                 $14 |= $15
  127. bitwise_or_int                 $13 |= $14
  128. merge_condition_mask           CondMask = $72 & $73
  129. branch_if_no_active_lanes      branch_if_no_active_lanes +7 (#136)
  130. copy_4_slots_unmasked          $14..17 = a[0](0..3)
  131. copy_2_slots_unmasked          $18..19 = b[1](0..1)
  132. cmpeq_3_floats                 $14..16 = equal($14..16, $17..19)
  133. bitwise_and_int                $15 &= $16
  134. bitwise_and_int                $14 &= $15
  135. copy_slot_masked               $13 = Mask($14)
  136. load_condition_mask            CondMask = $72
  137. copy_slot_masked               [test_same_arrays].result = Mask($13)
  138. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  139. load_return_mask               RetMask = $12
  140. copy_slot_unmasked             $12 = [test_same_arrays].result
  141. bitwise_not_int                $12 = ~$12
  142. copy_slot_masked               $11 = Mask($12)
  143. load_condition_mask            CondMask = $70
  144. zero_slot_unmasked             $61 = 0
  145. merge_condition_mask           CondMask = $10 & $11
  146. branch_if_no_active_lanes      branch_if_no_active_lanes +55 (#201)
  147. store_return_mask              $62 = RetMask
  148. copy_slot_unmasked             $63 = NE
  149. copy_slot_unmasked             eq = $63
  150. copy_slot_unmasked             $63 = F42
  151. copy_slot_unmasked             f1 = $63
  152. copy_slot_unmasked             $63 = NAN1
  153. copy_slot_unmasked             f2 = $63
  154. copy_slot_unmasked             $63 = NAN2
  155. copy_slot_unmasked             f3 = $63
  156. copy_constant                  $63 = colorGreen(0)
  157. copy_constant                  $64 = 0x3F800000 (1.0)
  158. add_float                      $63 += $64
  159. copy_slot_unmasked             one = $63
  160. zero_3_slots_unmasked          a[0](0..2) = 0
  161. copy_slot_unmasked             $63 = f1
  162. copy_slot_masked               a[0] = Mask($63)
  163. copy_slot_unmasked             $63 = f2
  164. copy_slot_masked               a[1] = Mask($63)
  165. copy_slot_unmasked             $63 = f3
  166. copy_slot_masked               a[2] = Mask($63)
  167. zero_3_slots_unmasked          b[0](0..2) = 0
  168. copy_slot_unmasked             $63 = f1
  169. copy_slot_unmasked             $64 = one
  170. mul_float                      $63 *= $64
  171. copy_slot_masked               b[0] = Mask($63)
  172. copy_slot_unmasked             $63 = f2
  173. copy_slot_unmasked             $64 = one
  174. mul_float                      $63 *= $64
  175. copy_slot_masked               b[1] = Mask($63)
  176. copy_slot_unmasked             $63 = f3
  177. copy_slot_unmasked             $64 = one
  178. mul_float                      $63 *= $64
  179. copy_slot_masked               b[2] = Mask($63)
  180. store_condition_mask           $12 = CondMask
  181. copy_slot_unmasked             $13 = eq
  182. copy_4_slots_unmasked          $63..66 = a[0](0..3)
  183. copy_2_slots_unmasked          $67..68 = b[1](0..1)
  184. cmpne_3_floats                 $63..65 = notEqual($63..65, $66..68)
  185. bitwise_or_int                 $64 |= $65
  186. bitwise_or_int                 $63 |= $64
  187. merge_condition_mask           CondMask = $12 & $13
  188. branch_if_no_active_lanes      branch_if_no_active_lanes +7 (#195)
  189. copy_4_slots_unmasked          $64..67 = a[0](0..3)
  190. copy_2_slots_unmasked          $68..69 = b[1](0..1)
  191. cmpeq_3_floats                 $64..66 = equal($64..66, $67..69)
  192. bitwise_and_int                $65 &= $66
  193. bitwise_and_int                $64 &= $65
  194. copy_slot_masked               $63 = Mask($64)
  195. load_condition_mask            CondMask = $12
  196. copy_slot_masked               [test_same_arrays].result = Mask($63)
  197. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  198. load_return_mask               RetMask = $62
  199. copy_slot_unmasked             $62 = [test_same_arrays].result
  200. copy_slot_masked               $61 = Mask($62)
  201. load_condition_mask            CondMask = $10
  202. zero_slot_unmasked             $79 = 0
  203. merge_condition_mask           CondMask = $60 & $61
  204. branch_if_no_active_lanes      branch_if_no_active_lanes +56 (#260)
  205. store_return_mask              $80 = RetMask
  206. copy_slot_unmasked             $81 = EQ
  207. copy_slot_unmasked             eq = $81
  208. copy_slot_unmasked             $81 = F42
  209. copy_slot_unmasked             f1 = $81
  210. copy_slot_unmasked             $81 = NAN1
  211. copy_slot_unmasked             f2 = $81
  212. copy_slot_unmasked             $81 = NAN2
  213. copy_slot_unmasked             f3 = $81
  214. copy_constant                  $81 = colorGreen(0)
  215. copy_constant                  $82 = 0x3F800000 (1.0)
  216. add_float                      $81 += $82
  217. copy_slot_unmasked             one = $81
  218. zero_3_slots_unmasked          a[0](0..2) = 0
  219. copy_slot_unmasked             $81 = f1
  220. copy_slot_masked               a[0] = Mask($81)
  221. copy_slot_unmasked             $81 = f2
  222. copy_slot_masked               a[1] = Mask($81)
  223. copy_slot_unmasked             $81 = f3
  224. copy_slot_masked               a[2] = Mask($81)
  225. zero_3_slots_unmasked          b[0](0..2) = 0
  226. copy_slot_unmasked             $81 = f1
  227. copy_slot_unmasked             $82 = one
  228. mul_float                      $81 *= $82
  229. copy_slot_masked               b[0] = Mask($81)
  230. copy_slot_unmasked             $81 = f2
  231. copy_slot_unmasked             $82 = one
  232. mul_float                      $81 *= $82
  233. copy_slot_masked               b[1] = Mask($81)
  234. copy_slot_unmasked             $81 = f3
  235. copy_slot_unmasked             $82 = one
  236. mul_float                      $81 *= $82
  237. copy_slot_masked               b[2] = Mask($81)
  238. store_condition_mask           $62 = CondMask
  239. copy_slot_unmasked             $63 = eq
  240. copy_4_slots_unmasked          $81..84 = a[0](0..3)
  241. copy_2_slots_unmasked          $85..86 = b[1](0..1)
  242. cmpne_3_floats                 $81..83 = notEqual($81..83, $84..86)
  243. bitwise_or_int                 $82 |= $83
  244. bitwise_or_int                 $81 |= $82
  245. merge_condition_mask           CondMask = $62 & $63
  246. branch_if_no_active_lanes      branch_if_no_active_lanes +7 (#253)
  247. copy_4_slots_unmasked          $82..85 = a[0](0..3)
  248. copy_2_slots_unmasked          $86..87 = b[1](0..1)
  249. cmpeq_3_floats                 $82..84 = equal($82..84, $85..87)
  250. bitwise_and_int                $83 &= $84
  251. bitwise_and_int                $82 &= $83
  252. copy_slot_masked               $81 = Mask($82)
  253. load_condition_mask            CondMask = $62
  254. copy_slot_masked               [test_same_arrays].result = Mask($81)
  255. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  256. load_return_mask               RetMask = $80
  257. copy_slot_unmasked             $80 = [test_same_arrays].result
  258. bitwise_not_int                $80 = ~$80
  259. copy_slot_masked               $79 = Mask($80)
  260. load_condition_mask            CondMask = $60
  261. zero_slot_unmasked             $31 = 0
  262. merge_condition_mask           CondMask = $78 & $79
  263. branch_if_no_active_lanes      branch_if_no_active_lanes +53 (#316)
  264. store_return_mask              $32 = RetMask
  265. copy_slot_unmasked             $33 = NE
  266. copy_slot_unmasked             eq = $33
  267. copy_slot_unmasked             $33 = F42
  268. copy_slot_unmasked             f1 = $33
  269. copy_slot_unmasked             $33 = F43
  270. copy_slot_unmasked             f2 = $33
  271. copy_slot_unmasked             $33 = F44
  272. copy_slot_unmasked             f3 = $33
  273. copy_constant                  $33 = colorGreen(0)
  274. copy_constant                  $34 = 0x40000000 (2.0)
  275. add_float                      $33 += $34
  276. copy_slot_unmasked             two = $33
  277. zero_3_slots_unmasked          a[0](0..2) = 0
  278. copy_slot_unmasked             $33 = f1
  279. copy_slot_masked               a[0] = Mask($33)
  280. copy_slot_unmasked             $33 = f2
  281. copy_slot_masked               a[1] = Mask($33)
  282. copy_slot_unmasked             $33 = f3
  283. copy_slot_masked               a[2] = Mask($33)
  284. zero_3_slots_unmasked          b[0](0..2) = 0
  285. copy_slot_unmasked             $33 = f1
  286. copy_slot_unmasked             $34 = two
  287. mul_float                      $33 *= $34
  288. copy_slot_masked               b[0] = Mask($33)
  289. copy_slot_unmasked             $33 = f2
  290. copy_slot_unmasked             $34 = two
  291. mul_float                      $33 *= $34
  292. copy_slot_masked               b[1] = Mask($33)
  293. copy_slot_unmasked             $33 = f3
  294. copy_slot_masked               b[2] = Mask($33)
  295. store_condition_mask           $80 = CondMask
  296. copy_slot_unmasked             $81 = eq
  297. copy_4_slots_unmasked          $33..36 = a[0](0..3)
  298. copy_2_slots_unmasked          $37..38 = b[1](0..1)
  299. cmpne_3_floats                 $33..35 = notEqual($33..35, $36..38)
  300. bitwise_or_int                 $34 |= $35
  301. bitwise_or_int                 $33 |= $34
  302. merge_condition_mask           CondMask = $80 & $81
  303. branch_if_no_active_lanes      branch_if_no_active_lanes +7 (#310)
  304. copy_4_slots_unmasked          $34..37 = a[0](0..3)
  305. copy_2_slots_unmasked          $38..39 = b[1](0..1)
  306. cmpeq_3_floats                 $34..36 = equal($34..36, $37..39)
  307. bitwise_and_int                $35 &= $36
  308. bitwise_and_int                $34 &= $35
  309. copy_slot_masked               $33 = Mask($34)
  310. load_condition_mask            CondMask = $80
  311. copy_slot_masked               [test_diff_arrays].result = Mask($33)
  312. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  313. load_return_mask               RetMask = $32
  314. copy_slot_unmasked             $32 = [test_diff_arrays].result
  315. copy_slot_masked               $31 = Mask($32)
  316. load_condition_mask            CondMask = $78
  317. zero_slot_unmasked             $51 = 0
  318. merge_condition_mask           CondMask = $30 & $31
  319. branch_if_no_active_lanes      branch_if_no_active_lanes +54 (#373)
  320. store_return_mask              $52 = RetMask
  321. copy_slot_unmasked             $53 = EQ
  322. copy_slot_unmasked             eq = $53
  323. copy_slot_unmasked             $53 = F42
  324. copy_slot_unmasked             f1 = $53
  325. copy_slot_unmasked             $53 = F43
  326. copy_slot_unmasked             f2 = $53
  327. copy_slot_unmasked             $53 = F44
  328. copy_slot_unmasked             f3 = $53
  329. copy_constant                  $53 = colorGreen(0)
  330. copy_constant                  $54 = 0x40000000 (2.0)
  331. add_float                      $53 += $54
  332. copy_slot_unmasked             two = $53
  333. zero_3_slots_unmasked          a[0](0..2) = 0
  334. copy_slot_unmasked             $53 = f1
  335. copy_slot_masked               a[0] = Mask($53)
  336. copy_slot_unmasked             $53 = f2
  337. copy_slot_masked               a[1] = Mask($53)
  338. copy_slot_unmasked             $53 = f3
  339. copy_slot_masked               a[2] = Mask($53)
  340. zero_3_slots_unmasked          b[0](0..2) = 0
  341. copy_slot_unmasked             $53 = f1
  342. copy_slot_unmasked             $54 = two
  343. mul_float                      $53 *= $54
  344. copy_slot_masked               b[0] = Mask($53)
  345. copy_slot_unmasked             $53 = f2
  346. copy_slot_unmasked             $54 = two
  347. mul_float                      $53 *= $54
  348. copy_slot_masked               b[1] = Mask($53)
  349. copy_slot_unmasked             $53 = f3
  350. copy_slot_masked               b[2] = Mask($53)
  351. store_condition_mask           $32 = CondMask
  352. copy_slot_unmasked             $33 = eq
  353. copy_4_slots_unmasked          $53..56 = a[0](0..3)
  354. copy_2_slots_unmasked          $57..58 = b[1](0..1)
  355. cmpne_3_floats                 $53..55 = notEqual($53..55, $56..58)
  356. bitwise_or_int                 $54 |= $55
  357. bitwise_or_int                 $53 |= $54
  358. merge_condition_mask           CondMask = $32 & $33
  359. branch_if_no_active_lanes      branch_if_no_active_lanes +7 (#366)
  360. copy_4_slots_unmasked          $54..57 = a[0](0..3)
  361. copy_2_slots_unmasked          $58..59 = b[1](0..1)
  362. cmpeq_3_floats                 $54..56 = equal($54..56, $57..59)
  363. bitwise_and_int                $55 &= $56
  364. bitwise_and_int                $54 &= $55
  365. copy_slot_masked               $53 = Mask($54)
  366. load_condition_mask            CondMask = $32
  367. copy_slot_masked               [test_diff_arrays].result = Mask($53)
  368. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  369. load_return_mask               RetMask = $52
  370. copy_slot_unmasked             $52 = [test_diff_arrays].result
  371. bitwise_not_int                $52 = ~$52
  372. copy_slot_masked               $51 = Mask($52)
  373. load_condition_mask            CondMask = $30
  374. zero_slot_unmasked             $41 = 0
  375. merge_condition_mask           CondMask = $50 & $51
  376. branch_if_no_active_lanes      branch_if_no_active_lanes +53 (#429)
  377. store_return_mask              $42 = RetMask
  378. copy_slot_unmasked             $43 = NE
  379. copy_slot_unmasked             eq = $43
  380. copy_slot_unmasked             $43 = NAN1
  381. copy_slot_unmasked             f1 = $43
  382. copy_slot_unmasked             $43 = ZM
  383. copy_slot_unmasked             f2 = $43
  384. copy_slot_unmasked             $43 = ZP
  385. copy_slot_unmasked             f3 = $43
  386. copy_constant                  $43 = colorGreen(0)
  387. copy_constant                  $44 = 0x40000000 (2.0)
  388. add_float                      $43 += $44
  389. copy_slot_unmasked             two = $43
  390. zero_3_slots_unmasked          a[0](0..2) = 0
  391. copy_slot_unmasked             $43 = f1
  392. copy_slot_masked               a[0] = Mask($43)
  393. copy_slot_unmasked             $43 = f2
  394. copy_slot_masked               a[1] = Mask($43)
  395. copy_slot_unmasked             $43 = f3
  396. copy_slot_masked               a[2] = Mask($43)
  397. zero_3_slots_unmasked          b[0](0..2) = 0
  398. copy_slot_unmasked             $43 = f1
  399. copy_slot_unmasked             $44 = two
  400. mul_float                      $43 *= $44
  401. copy_slot_masked               b[0] = Mask($43)
  402. copy_slot_unmasked             $43 = f2
  403. copy_slot_unmasked             $44 = two
  404. mul_float                      $43 *= $44
  405. copy_slot_masked               b[1] = Mask($43)
  406. copy_slot_unmasked             $43 = f3
  407. copy_slot_masked               b[2] = Mask($43)
  408. store_condition_mask           $52 = CondMask
  409. copy_slot_unmasked             $53 = eq
  410. copy_4_slots_unmasked          $43..46 = a[0](0..3)
  411. copy_2_slots_unmasked          $47..48 = b[1](0..1)
  412. cmpne_3_floats                 $43..45 = notEqual($43..45, $46..48)
  413. bitwise_or_int                 $44 |= $45
  414. bitwise_or_int                 $43 |= $44
  415. merge_condition_mask           CondMask = $52 & $53
  416. branch_if_no_active_lanes      branch_if_no_active_lanes +7 (#423)
  417. copy_4_slots_unmasked          $44..47 = a[0](0..3)
  418. copy_2_slots_unmasked          $48..49 = b[1](0..1)
  419. cmpeq_3_floats                 $44..46 = equal($44..46, $47..49)
  420. bitwise_and_int                $45 &= $46
  421. bitwise_and_int                $44 &= $45
  422. copy_slot_masked               $43 = Mask($44)
  423. load_condition_mask            CondMask = $52
  424. copy_slot_masked               [test_diff_arrays].result = Mask($43)
  425. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  426. load_return_mask               RetMask = $42
  427. copy_slot_unmasked             $42 = [test_diff_arrays].result
  428. copy_slot_masked               $41 = Mask($42)
  429. load_condition_mask            CondMask = $50
  430. zero_slot_unmasked             $21 = 0
  431. merge_condition_mask           CondMask = $40 & $41
  432. branch_if_no_active_lanes      branch_if_no_active_lanes +54 (#486)
  433. store_return_mask              $22 = RetMask
  434. copy_slot_unmasked             $23 = EQ
  435. copy_slot_unmasked             eq = $23
  436. copy_slot_unmasked             $23 = NAN1
  437. copy_slot_unmasked             f1 = $23
  438. copy_slot_unmasked             $23 = ZM
  439. copy_slot_unmasked             f2 = $23
  440. copy_slot_unmasked             $23 = ZP
  441. copy_slot_unmasked             f3 = $23
  442. copy_constant                  $23 = colorGreen(0)
  443. copy_constant                  $24 = 0x40000000 (2.0)
  444. add_float                      $23 += $24
  445. copy_slot_unmasked             two = $23
  446. zero_3_slots_unmasked          a[0](0..2) = 0
  447. copy_slot_unmasked             $23 = f1
  448. copy_slot_masked               a[0] = Mask($23)
  449. copy_slot_unmasked             $23 = f2
  450. copy_slot_masked               a[1] = Mask($23)
  451. copy_slot_unmasked             $23 = f3
  452. copy_slot_masked               a[2] = Mask($23)
  453. zero_3_slots_unmasked          b[0](0..2) = 0
  454. copy_slot_unmasked             $23 = f1
  455. copy_slot_unmasked             $24 = two
  456. mul_float                      $23 *= $24
  457. copy_slot_masked               b[0] = Mask($23)
  458. copy_slot_unmasked             $23 = f2
  459. copy_slot_unmasked             $24 = two
  460. mul_float                      $23 *= $24
  461. copy_slot_masked               b[1] = Mask($23)
  462. copy_slot_unmasked             $23 = f3
  463. copy_slot_masked               b[2] = Mask($23)
  464. store_condition_mask           $42 = CondMask
  465. copy_slot_unmasked             $43 = eq
  466. copy_4_slots_unmasked          $23..26 = a[0](0..3)
  467. copy_2_slots_unmasked          $27..28 = b[1](0..1)
  468. cmpne_3_floats                 $23..25 = notEqual($23..25, $26..28)
  469. bitwise_or_int                 $24 |= $25
  470. bitwise_or_int                 $23 |= $24
  471. merge_condition_mask           CondMask = $42 & $43
  472. branch_if_no_active_lanes      branch_if_no_active_lanes +7 (#479)
  473. copy_4_slots_unmasked          $24..27 = a[0](0..3)
  474. copy_2_slots_unmasked          $28..29 = b[1](0..1)
  475. cmpeq_3_floats                 $24..26 = equal($24..26, $27..29)
  476. bitwise_and_int                $25 &= $26
  477. bitwise_and_int                $24 &= $25
  478. copy_slot_masked               $23 = Mask($24)
  479. load_condition_mask            CondMask = $42
  480. copy_slot_masked               [test_diff_arrays].result = Mask($23)
  481. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  482. load_return_mask               RetMask = $22
  483. copy_slot_unmasked             $22 = [test_diff_arrays].result
  484. bitwise_not_int                $22 = ~$22
  485. copy_slot_masked               $21 = Mask($22)
  486. load_condition_mask            CondMask = $40
  487. copy_4_constants               $0..3 = colorRed
  488. merge_condition_mask           CondMask = $20 & $21
  489. copy_4_constants               $4..7 = colorGreen
  490. copy_4_slots_masked            $0..3 = Mask($4..7)
  491. load_condition_mask            CondMask = $20
  492. copy_4_slots_masked            [main].result = Mask($0..3)
  493. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  494. load_src                       src.rgba = [main].result
