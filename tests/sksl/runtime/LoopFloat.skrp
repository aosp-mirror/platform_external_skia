    1. store_src_rg                   pos = src.rg
    2. init_lane_masks                CondMask = LoopMask = RetMask = true
    3. zero_slot_unmasked             $6 = 0
    4. copy_slot_unmasked             kZero = $6
    5. copy_constant                  $6 = 0x41200000 (10.0)
    6. copy_slot_unmasked             kTen = $6
    7. copy_slot_unmasked             $6 = pos(0)
    8. copy_constant                  $7 = colorGreen(1)
    9. max_float                      $6 = max($6, $7)
   10. copy_constant                  $7 = colorGreen(3)
   11. min_float                      $6 = min($6, $7)
   12. copy_constant                  $7 = 0x40A00000 (5.0)
   13. mul_float                      $6 *= $7
   14. copy_slot_unmasked             five = $6
   15. store_condition_mask           $27 = CondMask
   16. store_condition_mask           $49 = CondMask
   17. store_condition_mask           $60 = CondMask
   18. store_condition_mask           $38 = CondMask
   19. store_condition_mask           $89 = CondMask
   20. store_condition_mask           $71 = CondMask
   21. store_condition_mask           $21 = CondMask
   22. store_condition_mask           $82 = CondMask
   23. store_condition_mask           $14 = CondMask
   24. store_condition_mask           $0 = CondMask
   25. branch_if_no_active_lanes      branch_if_no_active_lanes +35 (#60)
   26. store_return_mask              $1 = RetMask
   27. copy_slot_unmasked             $2 = five
   28. copy_slot_unmasked             five = $2
   29. copy_slot_unmasked             $2 = kZero
   30. copy_slot_unmasked             i = $2
   31. store_loop_mask                $2 = LoopMask
   32. jump                           jump +16 (#48)
   33. zero_slot_unmasked             [for-loop continue mask 0] = 0
   34. store_condition_mask           $3 = CondMask
   35. copy_slot_unmasked             $4 = i
   36. copy_slot_unmasked             $5 = five
   37. cmpeq_float                    $4 = equal($4, $5)
   38. merge_condition_mask           CondMask = $3 & $4
   39. copy_slot_unmasked             $5 = i
   40. copy_slot_masked               [return_loop].result = Mask($5)
   41. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   42. load_condition_mask            CondMask = $3
   43. reenable_loop_mask             LoopMask |= [for-loop continue mask 0]
   44. copy_slot_unmasked             $3 = i
   45. copy_constant                  $4 = 0x3F800000 (1.0)
   46. add_float                      $3 += $4
   47. copy_slot_masked               i = Mask($3)
   48. copy_slot_unmasked             $3 = i
   49. copy_constant                  $4 = 0x41200000 (10.0)
   50. cmplt_float                    $3 = lessThan($3, $4)
   51. merge_loop_mask                LoopMask &= $3
   52. stack_rewind
   53. branch_if_any_active_lanes     branch_if_any_active_lanes -20 (#33)
   54. load_loop_mask                 LoopMask = $2
   55. zero_slot_unmasked             $2 = 0
   56. copy_slot_masked               [return_loop].result = Mask($2)
   57. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   58. load_return_mask               RetMask = $1
   59. copy_slot_unmasked             $1 = [return_loop].result
   60. copy_constant                  $2 = 0x40A00000 (5.0)
   61. cmpeq_float                    $1 = equal($1, $2)
   62. zero_slot_unmasked             $15 = 0
   63. merge_condition_mask           CondMask = $0 & $1
   64. branch_if_no_active_lanes      branch_if_no_active_lanes +43 (#107)
   65. store_return_mask              $16 = RetMask
   66. copy_slot_unmasked             $17 = five
   67. copy_slot_unmasked             five = $17
   68. zero_slot_unmasked             $17 = 0
   69. copy_slot_unmasked             sum = $17
   70. zero_slot_unmasked             $17 = 0
   71. copy_slot_unmasked             i = $17
   72. store_loop_mask                $17 = LoopMask
   73. jump                           jump +19 (#92)
   74. zero_slot_unmasked             [for-loop continue mask 1] = 0
   75. store_condition_mask           $18 = CondMask
   76. copy_slot_unmasked             $19 = i
   77. copy_slot_unmasked             $20 = five
   78. cmplt_float                    $19 = lessThan($19, $20)
   79. merge_condition_mask           CondMask = $18 & $19
   80. copy_constant                  $20 = 0xFFFFFFFF
   81. copy_slot_masked               [for-loop continue mask 1] = Mask($20)
   82. mask_off_loop_mask             LoopMask &= ~(CondMask & LoopMask & RetMask)
   83. load_condition_mask            CondMask = $18
   84. copy_2_slots_unmasked          $18..19 = sum(0..1)
   85. add_float                      $18 += $19
   86. copy_slot_masked               sum = Mask($18)
   87. reenable_loop_mask             LoopMask |= [for-loop continue mask 1]
   88. copy_slot_unmasked             $18 = i
   89. copy_constant                  $19 = 0x3F800000 (1.0)
   90. add_float                      $18 += $19
   91. copy_slot_masked               i = Mask($18)
   92. copy_slot_unmasked             $18 = i
   93. copy_slot_unmasked             $19 = kTen
   94. cmplt_float                    $18 = lessThan($18, $19)
   95. merge_loop_mask                LoopMask &= $18
   96. stack_rewind
   97. branch_if_any_active_lanes     branch_if_any_active_lanes -23 (#74)
   98. load_loop_mask                 LoopMask = $17
   99. copy_slot_unmasked             $17 = sum
  100. copy_slot_masked               [continue_loop].result = Mask($17)
  101. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  102. load_return_mask               RetMask = $16
  103. copy_slot_unmasked             $16 = [continue_loop].result
  104. copy_constant                  $17 = 0x420C0000 (35.0)
  105. cmpeq_float                    $16 = equal($16, $17)
  106. copy_slot_masked               $15 = Mask($16)
  107. load_condition_mask            CondMask = $0
  108. zero_slot_unmasked             $83 = 0
  109. merge_condition_mask           CondMask = $14 & $15
  110. branch_if_no_active_lanes      branch_if_no_active_lanes +44 (#154)
  111. store_return_mask              $84 = RetMask
  112. copy_slot_unmasked             $85 = five
  113. copy_slot_unmasked             five = $85
  114. zero_slot_unmasked             $85 = 0
  115. copy_slot_unmasked             sum = $85
  116. copy_constant                  $85 = 0x3F800000 (1.0)
  117. copy_slot_unmasked             kOne = $85
  118. zero_slot_unmasked             $85 = 0
  119. copy_slot_unmasked             i = $85
  120. store_loop_mask                $85 = LoopMask
  121. jump                           jump +18 (#139)
  122. zero_slot_unmasked             [for-loop continue mask 2] = 0
  123. store_condition_mask           $86 = CondMask
  124. copy_slot_unmasked             $87 = five
  125. copy_slot_unmasked             $88 = i
  126. cmplt_float                    $87 = lessThan($87, $88)
  127. merge_condition_mask           CondMask = $86 & $87
  128. mask_off_loop_mask             LoopMask &= ~(CondMask & LoopMask & RetMask)
  129. load_condition_mask            CondMask = $86
  130. copy_slot_unmasked             $86 = sum
  131. copy_slot_unmasked             $87 = i
  132. add_float                      $86 += $87
  133. copy_slot_masked               sum = Mask($86)
  134. reenable_loop_mask             LoopMask |= [for-loop continue mask 2]
  135. copy_slot_unmasked             $86 = i
  136. copy_slot_unmasked             $87 = kOne
  137. add_float                      $86 += $87
  138. copy_slot_masked               i = Mask($86)
  139. copy_slot_unmasked             $86 = i
  140. copy_constant                  $87 = 0x41200000 (10.0)
  141. cmplt_float                    $86 = lessThan($86, $87)
  142. merge_loop_mask                LoopMask &= $86
  143. stack_rewind
  144. branch_if_any_active_lanes     branch_if_any_active_lanes -22 (#122)
  145. load_loop_mask                 LoopMask = $85
  146. copy_slot_unmasked             $85 = sum
  147. copy_slot_masked               [break_loop].result = Mask($85)
  148. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  149. load_return_mask               RetMask = $84
  150. copy_slot_unmasked             $84 = [break_loop].result
  151. copy_constant                  $85 = 0x41700000 (15.0)
  152. cmpeq_float                    $84 = equal($84, $85)
  153. copy_slot_masked               $83 = Mask($84)
  154. load_condition_mask            CondMask = $14
  155. zero_slot_unmasked             $22 = 0
  156. merge_condition_mask           CondMask = $82 & $83
  157. branch_if_no_active_lanes      branch_if_no_active_lanes +35 (#192)
  158. store_return_mask              $23 = RetMask
  159. zero_slot_unmasked             $24 = 0
  160. copy_slot_unmasked             sum = $24
  161. copy_constant                  $24 = 0x3DFBE76D (0.123)
  162. copy_slot_unmasked             i = $24
  163. store_loop_mask                $24 = LoopMask
  164. jump                           jump +10 (#174)
  165. zero_slot_unmasked             [for-loop continue mask 3] = 0
  166. copy_2_slots_unmasked          $25..26 = sum(0..1)
  167. add_float                      $25 += $26
  168. copy_slot_masked               sum = Mask($25)
  169. reenable_loop_mask             LoopMask |= [for-loop continue mask 3]
  170. copy_slot_unmasked             $25 = i
  171. copy_constant                  $26 = 0x3DE353F8 (0.111)
  172. add_float                      $25 += $26
  173. copy_slot_masked               i = Mask($25)
  174. copy_slot_unmasked             $25 = i
  175. copy_constant                  $26 = 0x3F19999A (0.6)
  176. cmplt_float                    $25 = lessThan($25, $26)
  177. merge_loop_mask                LoopMask &= $25
  178. stack_rewind
  179. branch_if_any_active_lanes     branch_if_any_active_lanes -14 (#165)
  180. load_loop_mask                 LoopMask = $24
  181. copy_slot_unmasked             $24 = sum
  182. copy_constant                  $25 = 0x3FDCCCCD (1.725)
  183. sub_float                      $24 -= $25
  184. copy_slot_masked               [float_loop].result = Mask($24)
  185. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  186. load_return_mask               RetMask = $23
  187. copy_slot_unmasked             $23 = [float_loop].result
  188. abs_float                      $23 = abs($23)
  189. copy_constant                  $24 = 0x3CCCCCCD (0.025)
  190. cmplt_float                    $23 = lessThan($23, $24)
  191. copy_slot_masked               $22 = Mask($23)
  192. load_condition_mask            CondMask = $82
  193. zero_slot_unmasked             $72 = 0
  194. merge_condition_mask           CondMask = $21 & $22
  195. branch_if_no_active_lanes      branch_if_no_active_lanes +37 (#232)
  196. store_return_mask              $73 = RetMask
  197. copy_constant                  $74 = 0x41100000 (9.0)
  198. swizzle_4                      $74..77 = ($74..77).xxxx
  199. copy_4_slots_unmasked          result = $74..77
  200. copy_constant                  $74 = 0x3F800000 (1.0)
  201. copy_slot_unmasked             i = $74
  202. store_loop_mask                $74 = LoopMask
  203. jump                           jump +9 (#212)
  204. zero_slot_unmasked             [for-loop continue mask 4] = 0
  205. copy_4_slots_unmasked          $75..78 = result
  206. copy_4_slots_masked            result = Mask($75..78)
  207. reenable_loop_mask             LoopMask |= [for-loop continue mask 4]
  208. copy_slot_unmasked             $75 = i
  209. copy_constant                  $76 = 0x3F800000 (1.0)
  210. add_float                      $75 += $76
  211. copy_slot_masked               i = Mask($75)
  212. copy_slot_unmasked             $75 = i
  213. copy_constant                  $76 = 0x40400000 (3.0)
  214. cmple_float                    $75 = lessThanEqual($75, $76)
  215. merge_loop_mask                LoopMask &= $75
  216. stack_rewind
  217. branch_if_any_active_lanes     branch_if_any_active_lanes -13 (#204)
  218. load_loop_mask                 LoopMask = $74
  219. copy_4_slots_unmasked          $74..77 = result
  220. copy_constant                  $78 = 0x41100000 (9.0)
  221. copy_constant                  $79 = 0x3F800000 (1.0)
  222. copy_constant                  $80 = 0x40000000 (2.0)
  223. copy_constant                  $81 = 0x40400000 (3.0)
  224. cmpeq_4_floats                 $74..77 = equal($74..77, $78..81)
  225. bitwise_and_2_ints             $74..75 &= $76..77
  226. bitwise_and_int                $74 &= $75
  227. copy_slot_masked               [loop_operator_le].result = Mask($74)
  228. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  229. load_return_mask               RetMask = $73
  230. copy_slot_unmasked             $73 = [loop_operator_le].result
  231. copy_slot_masked               $72 = Mask($73)
  232. load_condition_mask            CondMask = $21
  233. zero_slot_unmasked             $90 = 0
  234. merge_condition_mask           CondMask = $71 & $72
  235. branch_if_no_active_lanes      branch_if_no_active_lanes +37 (#272)
  236. store_return_mask              $91 = RetMask
  237. copy_constant                  $92 = 0x41100000 (9.0)
  238. swizzle_4                      $92..95 = ($92..95).xxxx
  239. copy_4_slots_unmasked          result = $92..95
  240. copy_constant                  $92 = 0x3F800000 (1.0)
  241. copy_slot_unmasked             i = $92
  242. store_loop_mask                $92 = LoopMask
  243. jump                           jump +9 (#252)
  244. zero_slot_unmasked             [for-loop continue mask 5] = 0
  245. copy_4_slots_unmasked          $93..96 = result
  246. copy_4_slots_masked            result = Mask($93..96)
  247. reenable_loop_mask             LoopMask |= [for-loop continue mask 5]
  248. copy_slot_unmasked             $93 = i
  249. copy_constant                  $94 = 0x3F800000 (1.0)
  250. add_float                      $93 += $94
  251. copy_slot_masked               i = Mask($93)
  252. copy_slot_unmasked             $93 = i
  253. copy_constant                  $94 = 0x40800000 (4.0)
  254. cmplt_float                    $93 = lessThan($93, $94)
  255. merge_loop_mask                LoopMask &= $93
  256. stack_rewind
  257. branch_if_any_active_lanes     branch_if_any_active_lanes -13 (#244)
  258. load_loop_mask                 LoopMask = $92
  259. copy_4_slots_unmasked          $92..95 = result
  260. copy_constant                  $96 = 0x41100000 (9.0)
  261. copy_constant                  $97 = 0x3F800000 (1.0)
  262. copy_constant                  $98 = 0x40000000 (2.0)
  263. copy_constant                  $99 = 0x40400000 (3.0)
  264. cmpeq_4_floats                 $92..95 = equal($92..95, $96..99)
  265. bitwise_and_2_ints             $92..93 &= $94..95
  266. bitwise_and_int                $92 &= $93
  267. copy_slot_masked               [loop_operator_lt].result = Mask($92)
  268. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  269. load_return_mask               RetMask = $91
  270. copy_slot_unmasked             $91 = [loop_operator_lt].result
  271. copy_slot_masked               $90 = Mask($91)
  272. load_condition_mask            CondMask = $71
  273. zero_slot_unmasked             $39 = 0
  274. merge_condition_mask           CondMask = $89 & $90
  275. branch_if_no_active_lanes      branch_if_no_active_lanes +37 (#312)
  276. store_return_mask              $40 = RetMask
  277. copy_constant                  $41 = 0x41100000 (9.0)
  278. swizzle_4                      $41..44 = ($41..44).xxxx
  279. copy_4_slots_unmasked          result = $41..44
  280. copy_constant                  $41 = 0x40400000 (3.0)
  281. copy_slot_unmasked             i = $41
  282. store_loop_mask                $41 = LoopMask
  283. jump                           jump +9 (#292)
  284. zero_slot_unmasked             [for-loop continue mask 6] = 0
  285. copy_4_slots_unmasked          $42..45 = result
  286. copy_4_slots_masked            result = Mask($42..45)
  287. reenable_loop_mask             LoopMask |= [for-loop continue mask 6]
  288. copy_slot_unmasked             $42 = i
  289. copy_constant                  $43 = 0x3F800000 (1.0)
  290. sub_float                      $42 -= $43
  291. copy_slot_masked               i = Mask($42)
  292. copy_constant                  $42 = 0x3F800000 (1.0)
  293. copy_slot_unmasked             $43 = i
  294. cmple_float                    $42 = lessThanEqual($42, $43)
  295. merge_loop_mask                LoopMask &= $42
  296. stack_rewind
  297. branch_if_any_active_lanes     branch_if_any_active_lanes -13 (#284)
  298. load_loop_mask                 LoopMask = $41
  299. copy_4_slots_unmasked          $41..44 = result
  300. copy_constant                  $45 = 0x41100000 (9.0)
  301. copy_constant                  $46 = 0x40400000 (3.0)
  302. copy_constant                  $47 = 0x40000000 (2.0)
  303. copy_constant                  $48 = 0x3F800000 (1.0)
  304. cmpeq_4_floats                 $41..44 = equal($41..44, $45..48)
  305. bitwise_and_2_ints             $41..42 &= $43..44
  306. bitwise_and_int                $41 &= $42
  307. copy_slot_masked               [loop_operator_ge].result = Mask($41)
  308. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  309. load_return_mask               RetMask = $40
  310. copy_slot_unmasked             $40 = [loop_operator_ge].result
  311. copy_slot_masked               $39 = Mask($40)
  312. load_condition_mask            CondMask = $89
  313. zero_slot_unmasked             $61 = 0
  314. merge_condition_mask           CondMask = $38 & $39
  315. branch_if_no_active_lanes      branch_if_no_active_lanes +37 (#352)
  316. store_return_mask              $62 = RetMask
  317. copy_constant                  $63 = 0x41100000 (9.0)
  318. swizzle_4                      $63..66 = ($63..66).xxxx
  319. copy_4_slots_unmasked          result = $63..66
  320. copy_constant                  $63 = 0x40400000 (3.0)
  321. copy_slot_unmasked             i = $63
  322. store_loop_mask                $63 = LoopMask
  323. jump                           jump +9 (#332)
  324. zero_slot_unmasked             [for-loop continue mask 7] = 0
  325. copy_4_slots_unmasked          $64..67 = result
  326. copy_4_slots_masked            result = Mask($64..67)
  327. reenable_loop_mask             LoopMask |= [for-loop continue mask 7]
  328. copy_slot_unmasked             $64 = i
  329. copy_constant                  $65 = 0x3F800000 (1.0)
  330. sub_float                      $64 -= $65
  331. copy_slot_masked               i = Mask($64)
  332. zero_slot_unmasked             $64 = 0
  333. copy_slot_unmasked             $65 = i
  334. cmplt_float                    $64 = lessThan($64, $65)
  335. merge_loop_mask                LoopMask &= $64
  336. stack_rewind
  337. branch_if_any_active_lanes     branch_if_any_active_lanes -13 (#324)
  338. load_loop_mask                 LoopMask = $63
  339. copy_4_slots_unmasked          $63..66 = result
  340. copy_constant                  $67 = 0x41100000 (9.0)
  341. copy_constant                  $68 = 0x40400000 (3.0)
  342. copy_constant                  $69 = 0x40000000 (2.0)
  343. copy_constant                  $70 = 0x3F800000 (1.0)
  344. cmpeq_4_floats                 $63..66 = equal($63..66, $67..70)
  345. bitwise_and_2_ints             $63..64 &= $65..66
  346. bitwise_and_int                $63 &= $64
  347. copy_slot_masked               [loop_operator_gt].result = Mask($63)
  348. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  349. load_return_mask               RetMask = $62
  350. copy_slot_unmasked             $62 = [loop_operator_gt].result
  351. copy_slot_masked               $61 = Mask($62)
  352. load_condition_mask            CondMask = $38
  353. zero_slot_unmasked             $50 = 0
  354. merge_condition_mask           CondMask = $60 & $61
  355. branch_if_no_active_lanes      branch_if_no_active_lanes +37 (#392)
  356. store_return_mask              $51 = RetMask
  357. copy_constant                  $52 = 0x41100000 (9.0)
  358. swizzle_4                      $52..55 = ($52..55).xxxx
  359. copy_4_slots_unmasked          result = $52..55
  360. copy_constant                  $52 = 0x3F800000 (1.0)
  361. copy_slot_unmasked             i = $52
  362. store_loop_mask                $52 = LoopMask
  363. jump                           jump +9 (#372)
  364. zero_slot_unmasked             [for-loop continue mask 8] = 0
  365. copy_4_slots_unmasked          $53..56 = result
  366. copy_4_slots_masked            result = Mask($53..56)
  367. reenable_loop_mask             LoopMask |= [for-loop continue mask 8]
  368. copy_slot_unmasked             $53 = i
  369. copy_constant                  $54 = 0x3F800000 (1.0)
  370. add_float                      $53 += $54
  371. copy_slot_masked               i = Mask($53)
  372. copy_slot_unmasked             $53 = i
  373. copy_constant                  $54 = 0x3F800000 (1.0)
  374. cmpeq_float                    $53 = equal($53, $54)
  375. merge_loop_mask                LoopMask &= $53
  376. stack_rewind
  377. branch_if_any_active_lanes     branch_if_any_active_lanes -13 (#364)
  378. load_loop_mask                 LoopMask = $52
  379. copy_4_slots_unmasked          $52..55 = result
  380. copy_constant                  $56 = 0x41100000 (9.0)
  381. copy_constant                  $57 = 0x41100000 (9.0)
  382. copy_constant                  $58 = 0x41100000 (9.0)
  383. copy_constant                  $59 = 0x3F800000 (1.0)
  384. cmpeq_4_floats                 $52..55 = equal($52..55, $56..59)
  385. bitwise_and_2_ints             $52..53 &= $54..55
  386. bitwise_and_int                $52 &= $53
  387. copy_slot_masked               [loop_operator_eq].result = Mask($52)
  388. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  389. load_return_mask               RetMask = $51
  390. copy_slot_unmasked             $51 = [loop_operator_eq].result
  391. copy_slot_masked               $50 = Mask($51)
  392. load_condition_mask            CondMask = $60
  393. zero_slot_unmasked             $28 = 0
  394. merge_condition_mask           CondMask = $49 & $50
  395. branch_if_no_active_lanes      branch_if_no_active_lanes +37 (#432)
  396. store_return_mask              $29 = RetMask
  397. copy_constant                  $30 = 0x41100000 (9.0)
  398. swizzle_4                      $30..33 = ($30..33).xxxx
  399. copy_4_slots_unmasked          result = $30..33
  400. copy_constant                  $30 = 0x3F800000 (1.0)
  401. copy_slot_unmasked             i = $30
  402. store_loop_mask                $30 = LoopMask
  403. jump                           jump +9 (#412)
  404. zero_slot_unmasked             [for-loop continue mask 9] = 0
  405. copy_4_slots_unmasked          $31..34 = result
  406. copy_4_slots_masked            result = Mask($31..34)
  407. reenable_loop_mask             LoopMask |= [for-loop continue mask 9]
  408. copy_slot_unmasked             $31 = i
  409. copy_constant                  $32 = 0x3F800000 (1.0)
  410. add_float                      $31 += $32
  411. copy_slot_masked               i = Mask($31)
  412. copy_slot_unmasked             $31 = i
  413. copy_constant                  $32 = 0x40800000 (4.0)
  414. cmpne_float                    $31 = notEqual($31, $32)
  415. merge_loop_mask                LoopMask &= $31
  416. stack_rewind
  417. branch_if_any_active_lanes     branch_if_any_active_lanes -13 (#404)
  418. load_loop_mask                 LoopMask = $30
  419. copy_4_slots_unmasked          $30..33 = result
  420. copy_constant                  $34 = 0x41100000 (9.0)
  421. copy_constant                  $35 = 0x3F800000 (1.0)
  422. copy_constant                  $36 = 0x40000000 (2.0)
  423. copy_constant                  $37 = 0x40400000 (3.0)
  424. cmpeq_4_floats                 $30..33 = equal($30..33, $34..37)
  425. bitwise_and_2_ints             $30..31 &= $32..33
  426. bitwise_and_int                $30 &= $31
  427. copy_slot_masked               [loop_operator_ne].result = Mask($30)
  428. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  429. load_return_mask               RetMask = $29
  430. copy_slot_unmasked             $29 = [loop_operator_ne].result
  431. copy_slot_masked               $28 = Mask($29)
  432. load_condition_mask            CondMask = $49
  433. copy_4_constants               $6..9 = colorRed
  434. merge_condition_mask           CondMask = $27 & $28
  435. copy_4_constants               $10..13 = colorGreen
  436. copy_4_slots_masked            $6..9 = Mask($10..13)
  437. load_condition_mask            CondMask = $27
  438. copy_4_slots_masked            [main].result = Mask($6..9)
  439. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  440. load_src                       src.rgba = [main].result
