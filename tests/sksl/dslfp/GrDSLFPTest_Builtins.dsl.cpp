

/**************************************************************************************************
 *** This file was autogenerated from GrDSLFPTest_Builtins.fp; do not modify.
 **************************************************************************************************/
/* TODO(skia:11854): DSLCPPCodeGenerator is currently a work in progress. */
#include "GrDSLFPTest_Builtins.h"

#include "src/core/SkUtils.h"
#include "src/gpu/GrTexture.h"
#include "src/gpu/glsl/GrGLSLFragmentProcessor.h"
#include "src/gpu/glsl/GrGLSLFragmentShaderBuilder.h"
#include "src/gpu/glsl/GrGLSLProgramBuilder.h"
#include "src/sksl/SkSLCPP.h"
#include "src/sksl/SkSLUtil.h"
#include "src/sksl/dsl/priv/DSLFPs.h"
#include "src/sksl/dsl/priv/DSLWriter.h"

#if defined(__clang__)
#pragma clang diagnostic ignored "-Wcomma"
#endif

class GrGLSLDSLFPTest_Builtins : public GrGLSLFragmentProcessor {
public:
    GrGLSLDSLFPTest_Builtins() {}
    void emitCode(EmitArgs& args) override {
        const GrDSLFPTest_Builtins& _outer = args.fFp.cast<GrDSLFPTest_Builtins>();
        (void) _outer;

        using namespace SkSL::dsl;
        StartFragmentProcessor(this, &args);
Var m(kNo_Modifier, DSLType(kHalf4x4_Type), "m", Half4x4(1.0f));
Var n(kNo_Modifier, DSLType(kHalf4_Type), "n", Half4(1.0f));
Var b(kNo_Modifier, DSLType(kBool4_Type), "b", Bool4(true));
Declare(m);
Declare(n);
Declare(b);
n.x() = Abs(n.x());
b.z() = All(Swizzle(b, X, Y));
b.w() = Any(Swizzle(b, X, Y, Z));
n = Ceil(n);
n.x() = Clamp(n.y(), n.z(), n.w());
n.y() = Cos(n.y());
n.w() = n.x() * n.w() - n.y() * n.z();
Swizzle(n, X, Y, Z) = Degrees(Swizzle(n, X, Y, Z));
n.w() = Distance(Swizzle(n, X, Z), Swizzle(n, Y, W));
n.x() = Dot(Swizzle(n, Y, Z, W), Swizzle(n, Y, Z, W));
Swizzle(b, X, Y, Z) = Equal(Swizzle(b, X, X, X), Swizzle(b, W, W, W));
Swizzle(n, Y, Z) = Exp(Swizzle(n, W, X));
Swizzle(n, Z, W) = Exp2(Swizzle(n, X, Y));
n.x() = Faceforward(n.y(), n.z(), n.w());
n = Floor(n);
Swizzle(n, Y, Z, W) = Fract(Swizzle(n, Y, Z, W));
Swizzle(b, X, Y) = GreaterThan(Swizzle(n, X, Y), Swizzle(n, Z, W));
Swizzle(b, X, Y) = GreaterThanEqual(Swizzle(n, X, Y), Swizzle(n, Z, W));
n = Inversesqrt(n);
m = Inverse(m);
n.w() = Length(Swizzle(n, Z, Y, Y, X));
Swizzle(b, X, Y) = LessThan(Swizzle(n, X, Y), Swizzle(n, Z, W));
Swizzle(b, X, Y) = LessThanEqual(Swizzle(n, X, Y), Swizzle(n, Z, W));
n.x() = Log(n.x());
n.y() = Max(n.z(), n.w());
n.z() = Min(n.x(), n.y());
n.w() = Mod(n.y(), n.z());
n = Normalize(n);
b = Not(b);
n.x() = Pow(n.y(), n.z());
Swizzle(n, X, Y, Z) = Radians(Swizzle(n, Y, Z, W));
Swizzle(n, X, Y) = Reflect(Swizzle(n, X, Y), Swizzle(n, Z, W));
Swizzle(n, W, Z) = Refract(Swizzle(n, X, Y), Swizzle(n, Z, W), 2.0f);
n = Saturate(n);
n.x() = Sign(n.x());
n.y() = Sin(n.y());
Swizzle(n, Z, W) = Smoothstep(Swizzle(n, X, X), Swizzle(n, Y, Y), Swizzle(n, Z, Z));
n = Sqrt(n);
Swizzle(n, X, Y) = Step(Swizzle(n, X, Y), Swizzle(n, Z, W));
n.x() = Tan(n.x());
n = Half4(Swizzle(n, W, W, W) / Max(n.w(), 9.9999997473787516e-05f), n.w());
Return(Half4(0.0f, 1.0f, 0.0f, 1.0f));
        EndFragmentProcessor();
    }
private:
    void onSetData(const GrGLSLProgramDataManager& pdman, const GrFragmentProcessor& _proc) override {
    }
};
std::unique_ptr<GrGLSLFragmentProcessor> GrDSLFPTest_Builtins::onMakeProgramImpl() const {
    return std::make_unique<GrGLSLDSLFPTest_Builtins>();
}
void GrDSLFPTest_Builtins::onGetGLSLProcessorKey(const GrShaderCaps& caps, GrProcessorKeyBuilder* b) const {
}
bool GrDSLFPTest_Builtins::onIsEqual(const GrFragmentProcessor& other) const {
    const GrDSLFPTest_Builtins& that = other.cast<GrDSLFPTest_Builtins>();
    (void) that;
    return true;
}
GrDSLFPTest_Builtins::GrDSLFPTest_Builtins(const GrDSLFPTest_Builtins& src)
: INHERITED(kGrDSLFPTest_Builtins_ClassID, src.optimizationFlags()) {
        this->cloneAndRegisterAllChildProcessors(src);
}
std::unique_ptr<GrFragmentProcessor> GrDSLFPTest_Builtins::clone() const {
    return std::make_unique<GrDSLFPTest_Builtins>(*this);
}
#if GR_TEST_UTILS
SkString GrDSLFPTest_Builtins::onDumpInfo() const {
    return SkString();
}
#endif
