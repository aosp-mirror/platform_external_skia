    1. store_src_rg                   coords = src.rg
    2. init_lane_masks                CondMask = LoopMask = RetMask = true
    3. store_condition_mask           $70 = CondMask
    4. store_condition_mask           $56 = CondMask
    5. store_condition_mask           $40 = CondMask
    6. store_condition_mask           $27 = CondMask
    7. store_condition_mask           $18 = CondMask
    8. branch_if_no_active_lanes      branch_if_no_active_lanes +57 (label 6 at #65)
    9. store_return_mask              $19 = RetMask
   10. zero_4_slots_unmasked          v, vv = 0
   11. copy_2_constants               $20..21 = testInputs(0..1)
   12. copy_2_slots_masked            v = Mask($20..21)
   13. copy_2_constants               $20..21 = testInputs(0..1)
   14. copy_2_slots_masked            v = Mask($20..21)
   15. store_condition_mask           $20 = CondMask
   16. copy_2_slots_unmasked          $21..22 = v
   17. copy_2_constants               $23..24 = testInputs(0..1)
   18. cmpne_2_floats                 $21..22 = notEqual($21..22, $23..24)
   19. bitwise_or_int                 $21 |= $22
   20. merge_condition_mask           CondMask = $20 & $21
   21. zero_slot_unmasked             $22 = 0
   22. copy_slot_masked               [test_no_op_mat2_X_vec2].result = Mask($22)
   23. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   24. load_condition_mask            CondMask = $20
   25. store_condition_mask           $20 = CondMask
   26. copy_2_slots_unmasked          $21..22 = v
   27. copy_2_constants               $23..24 = testInputs(0..1)
   28. cmpne_2_floats                 $21..22 = notEqual($21..22, $23..24)
   29. bitwise_or_int                 $21 |= $22
   30. merge_condition_mask           CondMask = $20 & $21
   31. zero_slot_unmasked             $22 = 0
   32. copy_slot_masked               [test_no_op_mat2_X_vec2].result = Mask($22)
   33. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   34. load_condition_mask            CondMask = $20
   35. zero_2_slots_unmasked          $20..21 = 0
   36. copy_2_constants               $22..23 = testInputs(0..1)
   37. sub_2_floats                   $20..21 -= $22..23
   38. copy_2_slots_masked            v = Mask($20..21)
   39. zero_2_slots_unmasked          $20..21 = 0
   40. copy_2_constants               $22..23 = testInputs(0..1)
   41. sub_2_floats                   $20..21 -= $22..23
   42. copy_2_slots_masked            v = Mask($20..21)
   43. store_condition_mask           $20 = CondMask
   44. copy_2_slots_unmasked          $21..22 = v
   45. zero_2_slots_unmasked          $23..24 = 0
   46. copy_2_constants               $25..26 = testInputs(0..1)
   47. sub_2_floats                   $23..24 -= $25..26
   48. cmpne_2_floats                 $21..22 = notEqual($21..22, $23..24)
   49. bitwise_or_int                 $21 |= $22
   50. merge_condition_mask           CondMask = $20 & $21
   51. zero_slot_unmasked             $22 = 0
   52. copy_slot_masked               [test_no_op_mat2_X_vec2].result = Mask($22)
   53. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   54. load_condition_mask            CondMask = $20
   55. zero_2_slots_unmasked          $20..21 = 0
   56. copy_2_slots_masked            vv = Mask($20..21)
   57. zero_2_slots_unmasked          $20..21 = 0
   58. copy_2_slots_masked            vv = Mask($20..21)
   59. zero_2_slots_unmasked          $22..23 = 0
   60. cmpeq_2_floats                 $20..21 = equal($20..21, $22..23)
   61. bitwise_and_int                $20 &= $21
   62. copy_slot_masked               [test_no_op_mat2_X_vec2].result = Mask($20)
   63. load_return_mask               RetMask = $19
   64. copy_slot_unmasked             $19 = [test_no_op_mat2_X_vec2].result
   65. label                          label 0x00000006
   66. zero_slot_unmasked             $28 = 0
   67. merge_condition_mask           CondMask = $18 & $19
   68. branch_if_no_active_lanes      branch_if_no_active_lanes +64 (label 5 at #132)
   69. store_return_mask              $29 = RetMask
   70. zero_4_slots_unmasked          v₁, vv₁(0) = 0
   71. zero_2_slots_unmasked          vv₁(1..2) = 0
   72. copy_3_constants               $30..32 = testInputs(0..2)
   73. copy_3_slots_masked            v₁ = Mask($30..32)
   74. copy_3_constants               $30..32 = testInputs(0..2)
   75. copy_3_slots_masked            v₁ = Mask($30..32)
   76. store_condition_mask           $30 = CondMask
   77. copy_3_slots_unmasked          $31..33 = v₁
   78. copy_3_constants               $34..36 = testInputs(0..2)
   79. cmpne_3_floats                 $31..33 = notEqual($31..33, $34..36)
   80. bitwise_or_int                 $32 |= $33
   81. bitwise_or_int                 $31 |= $32
   82. merge_condition_mask           CondMask = $30 & $31
   83. zero_slot_unmasked             $32 = 0
   84. copy_slot_masked               [test_no_op_mat3_X_vec3].result = Mask($32)
   85. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   86. load_condition_mask            CondMask = $30
   87. store_condition_mask           $30 = CondMask
   88. copy_3_slots_unmasked          $31..33 = v₁
   89. copy_3_constants               $34..36 = testInputs(0..2)
   90. cmpne_3_floats                 $31..33 = notEqual($31..33, $34..36)
   91. bitwise_or_int                 $32 |= $33
   92. bitwise_or_int                 $31 |= $32
   93. merge_condition_mask           CondMask = $30 & $31
   94. zero_slot_unmasked             $32 = 0
   95. copy_slot_masked               [test_no_op_mat3_X_vec3].result = Mask($32)
   96. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   97. load_condition_mask            CondMask = $30
   98. zero_3_slots_unmasked          $30..32 = 0
   99. copy_3_constants               $33..35 = testInputs(0..2)
  100. sub_3_floats                   $30..32 -= $33..35
  101. copy_3_slots_masked            v₁ = Mask($30..32)
  102. zero_3_slots_unmasked          $30..32 = 0
  103. copy_3_constants               $33..35 = testInputs(0..2)
  104. sub_3_floats                   $30..32 -= $33..35
  105. copy_3_slots_masked            v₁ = Mask($30..32)
  106. store_condition_mask           $30 = CondMask
  107. copy_3_slots_unmasked          $31..33 = v₁
  108. zero_3_slots_unmasked          $34..36 = 0
  109. copy_3_constants               $37..39 = testInputs(0..2)
  110. sub_3_floats                   $34..36 -= $37..39
  111. cmpne_3_floats                 $31..33 = notEqual($31..33, $34..36)
  112. bitwise_or_int                 $32 |= $33
  113. bitwise_or_int                 $31 |= $32
  114. merge_condition_mask           CondMask = $30 & $31
  115. zero_slot_unmasked             $32 = 0
  116. copy_slot_masked               [test_no_op_mat3_X_vec3].result = Mask($32)
  117. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  118. load_condition_mask            CondMask = $30
  119. zero_3_slots_unmasked          $30..32 = 0
  120. copy_3_slots_masked            vv₁ = Mask($30..32)
  121. zero_3_slots_unmasked          $30..32 = 0
  122. copy_3_slots_masked            vv₁ = Mask($30..32)
  123. zero_3_slots_unmasked          $33..35 = 0
  124. cmpeq_3_floats                 $30..32 = equal($30..32, $33..35)
  125. bitwise_and_int                $31 &= $32
  126. bitwise_and_int                $30 &= $31
  127. copy_slot_masked               [test_no_op_mat3_X_vec3].result = Mask($30)
  128. load_return_mask               RetMask = $29
  129. copy_slot_unmasked             $29 = [test_no_op_mat3_X_vec3].result
  130. label                          label 0x00000007
  131. copy_slot_masked               $28 = Mask($29)
  132. label                          label 0x00000005
  133. load_condition_mask            CondMask = $18
  134. zero_slot_unmasked             $41 = 0
  135. merge_condition_mask           CondMask = $27 & $28
  136. branch_if_no_active_lanes      branch_if_no_active_lanes +64 (label 4 at #200)
  137. store_return_mask              $42 = RetMask
  138. zero_4_slots_unmasked          v₂ = 0
  139. zero_4_slots_unmasked          vv₂ = 0
  140. copy_4_constants               $43..46 = testInputs
  141. copy_4_slots_masked            v₂ = Mask($43..46)
  142. copy_4_constants               $43..46 = testInputs
  143. copy_4_slots_masked            v₂ = Mask($43..46)
  144. store_condition_mask           $43 = CondMask
  145. copy_4_slots_unmasked          $44..47 = v₂
  146. copy_4_constants               $48..51 = testInputs
  147. cmpne_4_floats                 $44..47 = notEqual($44..47, $48..51)
  148. bitwise_or_2_ints              $44..45 |= $46..47
  149. bitwise_or_int                 $44 |= $45
  150. merge_condition_mask           CondMask = $43 & $44
  151. zero_slot_unmasked             $45 = 0
  152. copy_slot_masked               [test_no_op_mat4_X_vec4].result = Mask($45)
  153. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  154. load_condition_mask            CondMask = $43
  155. store_condition_mask           $43 = CondMask
  156. copy_4_slots_unmasked          $44..47 = v₂
  157. copy_4_constants               $48..51 = testInputs
  158. cmpne_4_floats                 $44..47 = notEqual($44..47, $48..51)
  159. bitwise_or_2_ints              $44..45 |= $46..47
  160. bitwise_or_int                 $44 |= $45
  161. merge_condition_mask           CondMask = $43 & $44
  162. zero_slot_unmasked             $45 = 0
  163. copy_slot_masked               [test_no_op_mat4_X_vec4].result = Mask($45)
  164. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  165. load_condition_mask            CondMask = $43
  166. zero_4_slots_unmasked          $43..46 = 0
  167. copy_4_constants               $47..50 = testInputs
  168. sub_4_floats                   $43..46 -= $47..50
  169. copy_4_slots_masked            v₂ = Mask($43..46)
  170. zero_4_slots_unmasked          $43..46 = 0
  171. copy_4_constants               $47..50 = testInputs
  172. sub_4_floats                   $43..46 -= $47..50
  173. copy_4_slots_masked            v₂ = Mask($43..46)
  174. store_condition_mask           $43 = CondMask
  175. copy_4_slots_unmasked          $44..47 = v₂
  176. zero_4_slots_unmasked          $48..51 = 0
  177. copy_4_constants               $52..55 = testInputs
  178. sub_4_floats                   $48..51 -= $52..55
  179. cmpne_4_floats                 $44..47 = notEqual($44..47, $48..51)
  180. bitwise_or_2_ints              $44..45 |= $46..47
  181. bitwise_or_int                 $44 |= $45
  182. merge_condition_mask           CondMask = $43 & $44
  183. zero_slot_unmasked             $45 = 0
  184. copy_slot_masked               [test_no_op_mat4_X_vec4].result = Mask($45)
  185. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  186. load_condition_mask            CondMask = $43
  187. zero_4_slots_unmasked          $43..46 = 0
  188. copy_4_slots_masked            vv₂ = Mask($43..46)
  189. zero_4_slots_unmasked          $43..46 = 0
  190. copy_4_slots_masked            vv₂ = Mask($43..46)
  191. zero_4_slots_unmasked          $47..50 = 0
  192. cmpeq_4_floats                 $43..46 = equal($43..46, $47..50)
  193. bitwise_and_2_ints             $43..44 &= $45..46
  194. bitwise_and_int                $43 &= $44
  195. copy_slot_masked               [test_no_op_mat4_X_vec4].result = Mask($43)
  196. load_return_mask               RetMask = $42
  197. copy_slot_unmasked             $42 = [test_no_op_mat4_X_vec4].result
  198. label                          label 0x00000008
  199. copy_slot_masked               $41 = Mask($42)
  200. label                          label 0x00000004
  201. load_condition_mask            CondMask = $27
  202. zero_slot_unmasked             $57 = 0
  203. merge_condition_mask           CondMask = $40 & $41
  204. branch_if_no_active_lanes      branch_if_no_active_lanes +104 (label 3 at #308)
  205. store_return_mask              $58 = RetMask
  206. copy_constant                  $59 = 0xBF800000 (-1.0)
  207. copy_slot_unmasked             $60 = $59
  208. copy_2_slots_unmasked          n = $59..60
  209. copy_constant                  $59 = 0x3F800000 (1.0)
  210. copy_slot_unmasked             $60 = $59
  211. copy_2_slots_unmasked          i = $59..60
  212. zero_4_slots_unmasked          z, v₃ = 0
  213. zero_2_slots_unmasked          vv₃ = 0
  214. zero_2_slots_unmasked          $59..60 = 0
  215. copy_2_slots_masked            vv₃ = Mask($59..60)
  216. zero_2_slots_unmasked          $59..60 = 0
  217. copy_2_slots_masked            vv₃ = Mask($59..60)
  218. store_condition_mask           $59 = CondMask
  219. copy_2_slots_unmasked          $60..61 = vv₃
  220. copy_2_slots_unmasked          $62..63 = z
  221. cmpne_2_floats                 $60..61 = notEqual($60..61, $62..63)
  222. bitwise_or_int                 $60 |= $61
  223. merge_condition_mask           CondMask = $59 & $60
  224. zero_slot_unmasked             $61 = 0
  225. copy_slot_masked               [test_no_op_vec2_X_mat2].result = Mask($61)
  226. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  227. load_condition_mask            CondMask = $59
  228. copy_2_slots_unmasked          $42..43 = i
  229. copy_4_constants               $44..47 = testMatrix2x2
  230. copy_2_slots_unmasked          $59..60 = $42..43
  231. copy_2_slots_unmasked          $61..62 = $44..45
  232. dot_2_floats                   $59 = dot($59..60, $61..62)
  233. copy_2_slots_unmasked          $60..61 = $42..43
  234. copy_2_slots_unmasked          $62..63 = $46..47
  235. dot_2_floats                   $60 = dot($60..61, $62..63)
  236. copy_2_slots_masked            v₃ = Mask($59..60)
  237. store_condition_mask           $59 = CondMask
  238. copy_2_slots_unmasked          $60..61 = v₃
  239. copy_constant                  $62 = 0x40400000 (3.0)
  240. copy_constant                  $63 = 0x40E00000 (7.0)
  241. cmpne_2_floats                 $60..61 = notEqual($60..61, $62..63)
  242. bitwise_or_int                 $60 |= $61
  243. merge_condition_mask           CondMask = $59 & $60
  244. zero_slot_unmasked             $61 = 0
  245. copy_slot_masked               [test_no_op_vec2_X_mat2].result = Mask($61)
  246. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  247. load_condition_mask            CondMask = $59
  248. copy_4_constants               $42..45 = testMatrix2x2
  249. swizzle_3                      $43..45 = ($43..45).yxz
  250. copy_2_slots_unmasked          $46..47 = i
  251. copy_2_slots_unmasked          $59..60 = $42..43
  252. copy_2_slots_unmasked          $61..62 = $46..47
  253. dot_2_floats                   $59 = dot($59..60, $61..62)
  254. copy_2_slots_unmasked          $60..61 = $44..45
  255. copy_2_slots_unmasked          $62..63 = $46..47
  256. dot_2_floats                   $60 = dot($60..61, $62..63)
  257. copy_2_slots_masked            v₃ = Mask($59..60)
  258. store_condition_mask           $59 = CondMask
  259. copy_2_slots_unmasked          $60..61 = v₃
  260. copy_constant                  $62 = 0x40800000 (4.0)
  261. copy_constant                  $63 = 0x40C00000 (6.0)
  262. cmpne_2_floats                 $60..61 = notEqual($60..61, $62..63)
  263. bitwise_or_int                 $60 |= $61
  264. merge_condition_mask           CondMask = $59 & $60
  265. zero_slot_unmasked             $61 = 0
  266. copy_slot_masked               [test_no_op_vec2_X_mat2].result = Mask($61)
  267. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  268. load_condition_mask            CondMask = $59
  269. copy_2_slots_unmasked          $42..43 = n
  270. copy_4_constants               $44..47 = testMatrix2x2
  271. copy_2_slots_unmasked          $59..60 = $42..43
  272. copy_2_slots_unmasked          $61..62 = $44..45
  273. dot_2_floats                   $59 = dot($59..60, $61..62)
  274. copy_2_slots_unmasked          $60..61 = $42..43
  275. copy_2_slots_unmasked          $62..63 = $46..47
  276. dot_2_floats                   $60 = dot($60..61, $62..63)
  277. copy_2_slots_masked            v₃ = Mask($59..60)
  278. store_condition_mask           $59 = CondMask
  279. copy_2_slots_unmasked          $60..61 = v₃
  280. copy_constant                  $62 = 0xC0400000 (-3.0)
  281. copy_constant                  $63 = 0xC0E00000 (-7.0)
  282. cmpne_2_floats                 $60..61 = notEqual($60..61, $62..63)
  283. bitwise_or_int                 $60 |= $61
  284. merge_condition_mask           CondMask = $59 & $60
  285. zero_slot_unmasked             $61 = 0
  286. copy_slot_masked               [test_no_op_vec2_X_mat2].result = Mask($61)
  287. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  288. load_condition_mask            CondMask = $59
  289. copy_4_constants               $42..45 = testMatrix2x2
  290. swizzle_3                      $43..45 = ($43..45).yxz
  291. copy_2_slots_unmasked          $46..47 = n
  292. copy_2_slots_unmasked          $59..60 = $42..43
  293. copy_2_slots_unmasked          $61..62 = $46..47
  294. dot_2_floats                   $59 = dot($59..60, $61..62)
  295. copy_2_slots_unmasked          $60..61 = $44..45
  296. copy_2_slots_unmasked          $62..63 = $46..47
  297. dot_2_floats                   $60 = dot($60..61, $62..63)
  298. copy_2_slots_masked            v₃ = Mask($59..60)
  299. copy_constant                  $61 = 0xC0800000 (-4.0)
  300. copy_constant                  $62 = 0xC0C00000 (-6.0)
  301. cmpeq_2_floats                 $59..60 = equal($59..60, $61..62)
  302. bitwise_and_int                $59 &= $60
  303. copy_slot_masked               [test_no_op_vec2_X_mat2].result = Mask($59)
  304. load_return_mask               RetMask = $58
  305. copy_slot_unmasked             $58 = [test_no_op_vec2_X_mat2].result
  306. label                          label 0x00000009
  307. copy_slot_masked               $57 = Mask($58)
  308. label                          label 0x00000003
  309. load_condition_mask            CondMask = $40
  310. zero_slot_unmasked             $71 = 0
  311. merge_condition_mask           CondMask = $56 & $57
  312. branch_if_no_active_lanes      branch_if_no_active_lanes +134 (label 2 at #446)
  313. store_return_mask              $72 = RetMask
  314. copy_constant                  $73 = 0xBF800000 (-1.0)
  315. swizzle_3                      $73..75 = ($73..75).xxx
  316. copy_3_slots_unmasked          n₁ = $73..75
  317. copy_constant                  $73 = 0x3F800000 (1.0)
  318. swizzle_3                      $73..75 = ($73..75).xxx
  319. copy_3_slots_unmasked          i₁ = $73..75
  320. zero_4_slots_unmasked          z₁, v₄(0) = 0
  321. zero_4_slots_unmasked          v₄(1..2), vv₄(0..1) = 0
  322. zero_slot_unmasked             vv₄(2) = 0
  323. zero_3_slots_unmasked          $73..75 = 0
  324. copy_3_slots_masked            vv₄ = Mask($73..75)
  325. zero_3_slots_unmasked          $73..75 = 0
  326. copy_3_slots_masked            vv₄ = Mask($73..75)
  327. store_condition_mask           $73 = CondMask
  328. copy_3_slots_unmasked          $74..76 = vv₄
  329. copy_3_slots_unmasked          $77..79 = z₁
  330. cmpne_3_floats                 $74..76 = notEqual($74..76, $77..79)
  331. bitwise_or_int                 $75 |= $76
  332. bitwise_or_int                 $74 |= $75
  333. merge_condition_mask           CondMask = $73 & $74
  334. zero_slot_unmasked             $75 = 0
  335. copy_slot_masked               [test_no_op_vec3_X_mat3].result = Mask($75)
  336. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  337. load_condition_mask            CondMask = $73
  338. copy_3_slots_unmasked          $58..60 = i₁
  339. copy_4_constants               $61..64 = testMatrix3x3(0..3)
  340. copy_4_constants               $65..68 = testMatrix3x3(4..7)
  341. copy_constant                  $69 = testMatrix3x3(8)
  342. copy_3_slots_unmasked          $73..75 = $58..60
  343. copy_3_slots_unmasked          $76..78 = $61..63
  344. dot_3_floats                   $73 = dot($73..75, $76..78)
  345. copy_3_slots_unmasked          $74..76 = $58..60
  346. copy_3_slots_unmasked          $77..79 = $64..66
  347. dot_3_floats                   $74 = dot($74..76, $77..79)
  348. copy_3_slots_unmasked          $75..77 = $58..60
  349. copy_3_slots_unmasked          $78..80 = $67..69
  350. dot_3_floats                   $75 = dot($75..77, $78..80)
  351. copy_3_slots_masked            v₄ = Mask($73..75)
  352. store_condition_mask           $73 = CondMask
  353. copy_3_slots_unmasked          $74..76 = v₄
  354. copy_constant                  $77 = 0x40C00000 (6.0)
  355. copy_constant                  $78 = 0x41700000 (15.0)
  356. copy_constant                  $79 = 0x41C00000 (24.0)
  357. cmpne_3_floats                 $74..76 = notEqual($74..76, $77..79)
  358. bitwise_or_int                 $75 |= $76
  359. bitwise_or_int                 $74 |= $75
  360. merge_condition_mask           CondMask = $73 & $74
  361. zero_slot_unmasked             $75 = 0
  362. copy_slot_masked               [test_no_op_vec3_X_mat3].result = Mask($75)
  363. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  364. load_condition_mask            CondMask = $73
  365. copy_4_constants               $58..61 = testMatrix3x3(0..3)
  366. copy_4_constants               $62..65 = testMatrix3x3(4..7)
  367. copy_constant                  $66 = testMatrix3x3(8)
  368. shuffle                        $59..66 = ($59..66)[2 5 0 3 6 1 4 7]
  369. copy_3_slots_unmasked          $67..69 = i₁
  370. copy_3_slots_unmasked          $73..75 = $58..60
  371. copy_3_slots_unmasked          $76..78 = $67..69
  372. dot_3_floats                   $73 = dot($73..75, $76..78)
  373. copy_3_slots_unmasked          $74..76 = $61..63
  374. copy_3_slots_unmasked          $77..79 = $67..69
  375. dot_3_floats                   $74 = dot($74..76, $77..79)
  376. copy_3_slots_unmasked          $75..77 = $64..66
  377. copy_3_slots_unmasked          $78..80 = $67..69
  378. dot_3_floats                   $75 = dot($75..77, $78..80)
  379. copy_3_slots_masked            v₄ = Mask($73..75)
  380. store_condition_mask           $73 = CondMask
  381. copy_3_slots_unmasked          $74..76 = v₄
  382. copy_constant                  $77 = 0x41400000 (12.0)
  383. copy_constant                  $78 = 0x41700000 (15.0)
  384. copy_constant                  $79 = 0x41900000 (18.0)
  385. cmpne_3_floats                 $74..76 = notEqual($74..76, $77..79)
  386. bitwise_or_int                 $75 |= $76
  387. bitwise_or_int                 $74 |= $75
  388. merge_condition_mask           CondMask = $73 & $74
  389. zero_slot_unmasked             $75 = 0
  390. copy_slot_masked               [test_no_op_vec3_X_mat3].result = Mask($75)
  391. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  392. load_condition_mask            CondMask = $73
  393. copy_3_slots_unmasked          $58..60 = n₁
  394. copy_4_constants               $61..64 = testMatrix3x3(0..3)
  395. copy_4_constants               $65..68 = testMatrix3x3(4..7)
  396. copy_constant                  $69 = testMatrix3x3(8)
  397. copy_3_slots_unmasked          $73..75 = $58..60
  398. copy_3_slots_unmasked          $76..78 = $61..63
  399. dot_3_floats                   $73 = dot($73..75, $76..78)
  400. copy_3_slots_unmasked          $74..76 = $58..60
  401. copy_3_slots_unmasked          $77..79 = $64..66
  402. dot_3_floats                   $74 = dot($74..76, $77..79)
  403. copy_3_slots_unmasked          $75..77 = $58..60
  404. copy_3_slots_unmasked          $78..80 = $67..69
  405. dot_3_floats                   $75 = dot($75..77, $78..80)
  406. copy_3_slots_masked            v₄ = Mask($73..75)
  407. store_condition_mask           $73 = CondMask
  408. copy_3_slots_unmasked          $74..76 = v₄
  409. copy_constant                  $77 = 0xC0C00000 (-6.0)
  410. copy_constant                  $78 = 0xC1700000 (-15.0)
  411. copy_constant                  $79 = 0xC1C00000 (-24.0)
  412. cmpne_3_floats                 $74..76 = notEqual($74..76, $77..79)
  413. bitwise_or_int                 $75 |= $76
  414. bitwise_or_int                 $74 |= $75
  415. merge_condition_mask           CondMask = $73 & $74
  416. zero_slot_unmasked             $75 = 0
  417. copy_slot_masked               [test_no_op_vec3_X_mat3].result = Mask($75)
  418. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  419. load_condition_mask            CondMask = $73
  420. copy_4_constants               $58..61 = testMatrix3x3(0..3)
  421. copy_4_constants               $62..65 = testMatrix3x3(4..7)
  422. copy_constant                  $66 = testMatrix3x3(8)
  423. shuffle                        $59..66 = ($59..66)[2 5 0 3 6 1 4 7]
  424. copy_3_slots_unmasked          $67..69 = n₁
  425. copy_3_slots_unmasked          $73..75 = $58..60
  426. copy_3_slots_unmasked          $76..78 = $67..69
  427. dot_3_floats                   $73 = dot($73..75, $76..78)
  428. copy_3_slots_unmasked          $74..76 = $61..63
  429. copy_3_slots_unmasked          $77..79 = $67..69
  430. dot_3_floats                   $74 = dot($74..76, $77..79)
  431. copy_3_slots_unmasked          $75..77 = $64..66
  432. copy_3_slots_unmasked          $78..80 = $67..69
  433. dot_3_floats                   $75 = dot($75..77, $78..80)
  434. copy_3_slots_masked            v₄ = Mask($73..75)
  435. copy_constant                  $76 = 0xC1400000 (-12.0)
  436. copy_constant                  $77 = 0xC1700000 (-15.0)
  437. copy_constant                  $78 = 0xC1900000 (-18.0)
  438. cmpeq_3_floats                 $73..75 = equal($73..75, $76..78)
  439. bitwise_and_int                $74 &= $75
  440. bitwise_and_int                $73 &= $74
  441. copy_slot_masked               [test_no_op_vec3_X_mat3].result = Mask($73)
  442. load_return_mask               RetMask = $72
  443. copy_slot_unmasked             $72 = [test_no_op_vec3_X_mat3].result
  444. label                          label 0x0000000A
  445. copy_slot_masked               $71 = Mask($72)
  446. label                          label 0x00000002
  447. load_condition_mask            CondMask = $56
  448. zero_slot_unmasked             $0 = 0
  449. merge_condition_mask           CondMask = $70 & $71
  450. branch_if_no_active_lanes      branch_if_no_active_lanes +159 (label 1 at #609)
  451. store_return_mask              $1 = RetMask
  452. copy_constant                  $2 = 0xBF800000 (-1.0)
  453. swizzle_4                      $2..5 = ($2..5).xxxx
  454. copy_4_slots_unmasked          n₂ = $2..5
  455. copy_constant                  $2 = 0x3F800000 (1.0)
  456. swizzle_4                      $2..5 = ($2..5).xxxx
  457. copy_4_slots_unmasked          i₂ = $2..5
  458. zero_4_slots_unmasked          z₂ = 0
  459. copy_4_constants               $2..5 = testMatrix2x2
  460. copy_4_constants               $6..9 = testMatrix2x2
  461. copy_4_constants               $10..13 = testMatrix2x2
  462. copy_4_constants               $14..17 = testMatrix2x2
  463. copy_4_slots_unmasked          testMatrix4x4(0..3) = $2..5
  464. copy_4_slots_unmasked          testMatrix4x4(4..7) = $6..9
  465. copy_4_slots_unmasked          testMatrix4x4(8..11) = $10..13
  466. copy_4_slots_unmasked          testMatrix4x4(12..15) = $14..17
  467. zero_4_slots_unmasked          v₅ = 0
  468. zero_4_slots_unmasked          vv₅ = 0
  469. zero_4_slots_unmasked          $2..5 = 0
  470. copy_4_slots_masked            vv₅ = Mask($2..5)
  471. zero_4_slots_unmasked          $2..5 = 0
  472. copy_4_slots_masked            vv₅ = Mask($2..5)
  473. store_condition_mask           $2 = CondMask
  474. copy_4_slots_unmasked          $3..6 = vv₅
  475. copy_4_slots_unmasked          $7..10 = z₂
  476. cmpne_4_floats                 $3..6 = notEqual($3..6, $7..10)
  477. bitwise_or_2_ints              $3..4 |= $5..6
  478. bitwise_or_int                 $3 |= $4
  479. merge_condition_mask           CondMask = $2 & $3
  480. zero_slot_unmasked             $4 = 0
  481. copy_slot_masked               [test_no_op_vec4_X_mat4].result = Mask($4)
  482. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  483. load_condition_mask            CondMask = $2
  484. copy_4_slots_unmasked          $72..75 = i₂
  485. copy_4_slots_unmasked          $76..79 = testMatrix4x4(0..3)
  486. copy_4_slots_unmasked          $80..83 = testMatrix4x4(4..7)
  487. copy_4_slots_unmasked          $84..87 = testMatrix4x4(8..11)
  488. copy_4_slots_unmasked          $88..91 = testMatrix4x4(12..15)
  489. copy_4_slots_unmasked          $2..5 = $72..75
  490. copy_4_slots_unmasked          $6..9 = $76..79
  491. dot_4_floats                   $2 = dot($2..5, $6..9)
  492. copy_4_slots_unmasked          $3..6 = $72..75
  493. copy_4_slots_unmasked          $7..10 = $80..83
  494. dot_4_floats                   $3 = dot($3..6, $7..10)
  495. copy_4_slots_unmasked          $4..7 = $72..75
  496. copy_4_slots_unmasked          $8..11 = $84..87
  497. dot_4_floats                   $4 = dot($4..7, $8..11)
  498. copy_4_slots_unmasked          $5..8 = $72..75
  499. copy_4_slots_unmasked          $9..12 = $88..91
  500. dot_4_floats                   $5 = dot($5..8, $9..12)
  501. copy_4_slots_masked            v₅ = Mask($2..5)
  502. stack_rewind
  503. store_condition_mask           $2 = CondMask
  504. copy_4_slots_unmasked          $3..6 = v₅
  505. copy_constant                  $7 = 0x41200000 (10.0)
  506. swizzle_4                      $7..10 = ($7..10).xxxx
  507. cmpne_4_floats                 $3..6 = notEqual($3..6, $7..10)
  508. bitwise_or_2_ints              $3..4 |= $5..6
  509. bitwise_or_int                 $3 |= $4
  510. merge_condition_mask           CondMask = $2 & $3
  511. zero_slot_unmasked             $4 = 0
  512. copy_slot_masked               [test_no_op_vec4_X_mat4].result = Mask($4)
  513. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  514. load_condition_mask            CondMask = $2
  515. copy_4_slots_unmasked          $72..75 = testMatrix4x4(0..3)
  516. copy_4_slots_unmasked          $76..79 = testMatrix4x4(4..7)
  517. copy_4_slots_unmasked          $80..83 = testMatrix4x4(8..11)
  518. copy_4_slots_unmasked          $84..87 = testMatrix4x4(12..15)
  519. shuffle                        $73..87 = ($73..87)[3 7 11 0 4 8 12 1 5 9 13 2 6 10 14]
  520. copy_4_slots_unmasked          $88..91 = i₂
  521. copy_4_slots_unmasked          $2..5 = $72..75
  522. copy_4_slots_unmasked          $6..9 = $88..91
  523. dot_4_floats                   $2 = dot($2..5, $6..9)
  524. copy_4_slots_unmasked          $3..6 = $76..79
  525. copy_4_slots_unmasked          $7..10 = $88..91
  526. dot_4_floats                   $3 = dot($3..6, $7..10)
  527. copy_4_slots_unmasked          $4..7 = $80..83
  528. copy_4_slots_unmasked          $8..11 = $88..91
  529. dot_4_floats                   $4 = dot($4..7, $8..11)
  530. copy_4_slots_unmasked          $5..8 = $84..87
  531. copy_4_slots_unmasked          $9..12 = $88..91
  532. dot_4_floats                   $5 = dot($5..8, $9..12)
  533. copy_4_slots_masked            v₅ = Mask($2..5)
  534. store_condition_mask           $2 = CondMask
  535. copy_4_slots_unmasked          $3..6 = v₅
  536. copy_constant                  $7 = 0x40800000 (4.0)
  537. copy_constant                  $8 = 0x41000000 (8.0)
  538. copy_constant                  $9 = 0x41400000 (12.0)
  539. copy_constant                  $10 = 0x41800000 (16.0)
  540. cmpne_4_floats                 $3..6 = notEqual($3..6, $7..10)
  541. bitwise_or_2_ints              $3..4 |= $5..6
  542. bitwise_or_int                 $3 |= $4
  543. merge_condition_mask           CondMask = $2 & $3
  544. zero_slot_unmasked             $4 = 0
  545. copy_slot_masked               [test_no_op_vec4_X_mat4].result = Mask($4)
  546. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  547. load_condition_mask            CondMask = $2
  548. copy_4_slots_unmasked          $72..75 = n₂
  549. copy_4_slots_unmasked          $76..79 = testMatrix4x4(0..3)
  550. copy_4_slots_unmasked          $80..83 = testMatrix4x4(4..7)
  551. copy_4_slots_unmasked          $84..87 = testMatrix4x4(8..11)
  552. copy_4_slots_unmasked          $88..91 = testMatrix4x4(12..15)
  553. copy_4_slots_unmasked          $2..5 = $72..75
  554. copy_4_slots_unmasked          $6..9 = $76..79
  555. dot_4_floats                   $2 = dot($2..5, $6..9)
  556. copy_4_slots_unmasked          $3..6 = $72..75
  557. copy_4_slots_unmasked          $7..10 = $80..83
  558. dot_4_floats                   $3 = dot($3..6, $7..10)
  559. copy_4_slots_unmasked          $4..7 = $72..75
  560. copy_4_slots_unmasked          $8..11 = $84..87
  561. dot_4_floats                   $4 = dot($4..7, $8..11)
  562. copy_4_slots_unmasked          $5..8 = $72..75
  563. copy_4_slots_unmasked          $9..12 = $88..91
  564. dot_4_floats                   $5 = dot($5..8, $9..12)
  565. copy_4_slots_masked            v₅ = Mask($2..5)
  566. store_condition_mask           $2 = CondMask
  567. copy_4_slots_unmasked          $3..6 = v₅
  568. copy_constant                  $7 = 0xC1200000 (-10.0)
  569. swizzle_4                      $7..10 = ($7..10).xxxx
  570. cmpne_4_floats                 $3..6 = notEqual($3..6, $7..10)
  571. bitwise_or_2_ints              $3..4 |= $5..6
  572. bitwise_or_int                 $3 |= $4
  573. merge_condition_mask           CondMask = $2 & $3
  574. zero_slot_unmasked             $4 = 0
  575. copy_slot_masked               [test_no_op_vec4_X_mat4].result = Mask($4)
  576. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  577. load_condition_mask            CondMask = $2
  578. copy_4_slots_unmasked          $72..75 = testMatrix4x4(0..3)
  579. copy_4_slots_unmasked          $76..79 = testMatrix4x4(4..7)
  580. copy_4_slots_unmasked          $80..83 = testMatrix4x4(8..11)
  581. copy_4_slots_unmasked          $84..87 = testMatrix4x4(12..15)
  582. shuffle                        $73..87 = ($73..87)[3 7 11 0 4 8 12 1 5 9 13 2 6 10 14]
  583. copy_4_slots_unmasked          $88..91 = n₂
  584. copy_4_slots_unmasked          $2..5 = $72..75
  585. copy_4_slots_unmasked          $6..9 = $88..91
  586. dot_4_floats                   $2 = dot($2..5, $6..9)
  587. copy_4_slots_unmasked          $3..6 = $76..79
  588. copy_4_slots_unmasked          $7..10 = $88..91
  589. dot_4_floats                   $3 = dot($3..6, $7..10)
  590. copy_4_slots_unmasked          $4..7 = $80..83
  591. copy_4_slots_unmasked          $8..11 = $88..91
  592. dot_4_floats                   $4 = dot($4..7, $8..11)
  593. copy_4_slots_unmasked          $5..8 = $84..87
  594. copy_4_slots_unmasked          $9..12 = $88..91
  595. dot_4_floats                   $5 = dot($5..8, $9..12)
  596. copy_4_slots_masked            v₅ = Mask($2..5)
  597. copy_constant                  $6 = 0xC0800000 (-4.0)
  598. copy_constant                  $7 = 0xC1000000 (-8.0)
  599. copy_constant                  $8 = 0xC1400000 (-12.0)
  600. copy_constant                  $9 = 0xC1800000 (-16.0)
  601. cmpeq_4_floats                 $2..5 = equal($2..5, $6..9)
  602. bitwise_and_2_ints             $2..3 &= $4..5
  603. bitwise_and_int                $2 &= $3
  604. copy_slot_masked               [test_no_op_vec4_X_mat4].result = Mask($2)
  605. load_return_mask               RetMask = $1
  606. copy_slot_unmasked             $1 = [test_no_op_vec4_X_mat4].result
  607. label                          label 0x0000000B
  608. copy_slot_masked               $0 = Mask($1)
  609. label                          label 0x00000001
  610. load_condition_mask            CondMask = $70
  611. swizzle_4                      $0..3 = ($0..3).xxxx
  612. copy_4_constants               $4..7 = colorRed
  613. copy_4_constants               $8..11 = colorGreen
  614. mix_4_ints                     $0..3 = mix($4..7, $8..11, $0..3)
  615. copy_4_slots_unmasked          [main].result = $0..3
  616. load_src                       src.rgba = [main].result
