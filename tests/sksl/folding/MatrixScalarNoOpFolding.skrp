    1. store_src_rg                   coords = src.rg
    2. init_lane_masks                CondMask = LoopMask = RetMask = true
    3. store_condition_mask           $8 = CondMask
    4. store_condition_mask           $112 = CondMask
    5. store_condition_mask           $143 = CondMask
    6. store_condition_mask           $60 = CondMask
    7. store_condition_mask           $174 = CondMask
    8. store_condition_mask           $159 = CondMask
    9. branch_if_no_active_lanes      branch_if_no_active_lanes +74 (#83)
   10. store_return_mask              $160 = RetMask
   11. zero_4_slots_unmasked          m = 0
   12. zero_4_slots_unmasked          mm = 0
   13. zero_2_slots_unmasked          $161..162 = 0
   14. swizzle_4                      $161..164 = ($161..164).yxxy
   15. copy_4_slots_unmasked          z = $161..164
   16. copy_4_constants               $161..164 = testMatrix2x2
   17. copy_4_slots_masked            m = Mask($161..164)
   18. copy_4_constants               $161..164 = testMatrix2x2
   19. copy_4_slots_masked            m = Mask($161..164)
   20. store_condition_mask           $161 = CondMask
   21. copy_4_slots_unmasked          $162..165 = m
   22. copy_4_constants               $166..169 = testMatrix2x2
   23. cmpne_4_floats                 $162..165 = notEqual($162..165, $166..169)
   24. bitwise_or_2_ints              $162..163 |= $164..165
   25. bitwise_or_int                 $162 |= $163
   26. merge_condition_mask           CondMask = $161 & $162
   27. zero_slot_unmasked             $163 = 0
   28. copy_slot_masked               [test_no_op_scalar_X_mat2].result = Mask($163)
   29. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   30. load_condition_mask            CondMask = $161
   31. store_condition_mask           $161 = CondMask
   32. copy_4_slots_unmasked          $162..165 = m
   33. copy_4_constants               $166..169 = testMatrix2x2
   34. cmpne_4_floats                 $162..165 = notEqual($162..165, $166..169)
   35. bitwise_or_2_ints              $162..163 |= $164..165
   36. bitwise_or_int                 $162 |= $163
   37. merge_condition_mask           CondMask = $161 & $162
   38. zero_slot_unmasked             $163 = 0
   39. copy_slot_masked               [test_no_op_scalar_X_mat2].result = Mask($163)
   40. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   41. load_condition_mask            CondMask = $161
   42. store_condition_mask           $161 = CondMask
   43. copy_4_slots_unmasked          $162..165 = m
   44. copy_4_constants               $166..169 = testMatrix2x2
   45. cmpne_4_floats                 $162..165 = notEqual($162..165, $166..169)
   46. bitwise_or_2_ints              $162..163 |= $164..165
   47. bitwise_or_int                 $162 |= $163
   48. merge_condition_mask           CondMask = $161 & $162
   49. zero_slot_unmasked             $163 = 0
   50. copy_slot_masked               [test_no_op_scalar_X_mat2].result = Mask($163)
   51. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   52. load_condition_mask            CondMask = $161
   53. zero_4_slots_unmasked          $161..164 = 0
   54. copy_4_slots_unmasked          $165..168 = m
   55. sub_4_floats                   $161..164 -= $165..168
   56. copy_4_slots_masked            m = Mask($161..164)
   57. store_condition_mask           $161 = CondMask
   58. copy_4_slots_unmasked          $162..165 = m
   59. zero_4_slots_unmasked          $166..169 = 0
   60. copy_4_constants               $170..173 = testMatrix2x2
   61. sub_4_floats                   $166..169 -= $170..173
   62. cmpne_4_floats                 $162..165 = notEqual($162..165, $166..169)
   63. bitwise_or_2_ints              $162..163 |= $164..165
   64. bitwise_or_int                 $162 |= $163
   65. merge_condition_mask           CondMask = $161 & $162
   66. zero_slot_unmasked             $163 = 0
   67. copy_slot_masked               [test_no_op_scalar_X_mat2].result = Mask($163)
   68. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   69. load_condition_mask            CondMask = $161
   70. zero_2_slots_unmasked          $161..162 = 0
   71. swizzle_4                      $161..164 = ($161..164).yxxy
   72. copy_4_slots_masked            mm = Mask($161..164)
   73. zero_2_slots_unmasked          $161..162 = 0
   74. swizzle_4                      $161..164 = ($161..164).yxxy
   75. copy_4_slots_masked            mm = Mask($161..164)
   76. copy_4_slots_unmasked          $165..168 = z
   77. cmpeq_4_floats                 $161..164 = equal($161..164, $165..168)
   78. bitwise_and_2_ints             $161..162 &= $163..164
   79. bitwise_and_int                $161 &= $162
   80. copy_slot_masked               [test_no_op_scalar_X_mat2].result = Mask($161)
   81. load_return_mask               RetMask = $160
   82. copy_slot_unmasked             $160 = [test_no_op_scalar_X_mat2].result
   83. zero_slot_unmasked             $175 = 0
   84. merge_condition_mask           CondMask = $159 & $160
   85. branch_if_no_active_lanes      branch_if_no_active_lanes +128 (#213)
   86. store_return_mask              $176 = RetMask
   87. zero_4_slots_unmasked          m(0..3) = 0
   88. zero_4_slots_unmasked          m(4..7) = 0
   89. zero_4_slots_unmasked          m(8..11) = 0
   90. zero_4_slots_unmasked          mm(3..6) = 0
   91. zero_2_slots_unmasked          mm(7..8) = 0
   92. zero_2_slots_unmasked          $177..178 = 0
   93. shuffle                        $177..185 = ($177..185)[1 0 0 0 1 0 0 0 1]
   94. copy_4_slots_unmasked          z(0..3) = $177..180
   95. copy_4_slots_unmasked          z(4..7) = $181..184
   96. copy_slot_unmasked             z(8) = $185
   97. copy_4_constants               $177..180 = testMatrix3x3(0..3)
   98. copy_4_constants               $181..184 = testMatrix3x3(4..7)
   99. copy_constant                  $185 = testMatrix3x3(8)
  100. copy_4_slots_masked            m(0..3) = Mask($177..180)
  101. copy_4_slots_masked            m(4..7) = Mask($181..184)
  102. copy_slot_masked               m(8) = Mask($185)
  103. copy_4_constants               $177..180 = testMatrix3x3(0..3)
  104. copy_4_constants               $181..184 = testMatrix3x3(4..7)
  105. copy_constant                  $185 = testMatrix3x3(8)
  106. copy_4_slots_masked            m(0..3) = Mask($177..180)
  107. copy_4_slots_masked            m(4..7) = Mask($181..184)
  108. copy_slot_masked               m(8) = Mask($185)
  109. store_condition_mask           $177 = CondMask
  110. copy_4_slots_unmasked          $178..181 = m(0..3)
  111. copy_4_slots_unmasked          $182..185 = m(4..7)
  112. copy_slot_unmasked             $186 = m(8)
  113. copy_4_constants               $187..190 = testMatrix3x3(0..3)
  114. copy_4_constants               $191..194 = testMatrix3x3(4..7)
  115. copy_constant                  $195 = testMatrix3x3(8)
  116. cmpne_n_floats                 $178..186 = notEqual($178..186, $187..195)
  117. bitwise_or_4_ints              $179..182 |= $183..186
  118. bitwise_or_2_ints              $179..180 |= $181..182
  119. bitwise_or_int                 $179 |= $180
  120. bitwise_or_int                 $178 |= $179
  121. merge_condition_mask           CondMask = $177 & $178
  122. zero_slot_unmasked             $179 = 0
  123. copy_slot_masked               [test_no_op_scalar_X_mat3].result = Mask($179)
  124. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  125. load_condition_mask            CondMask = $177
  126. store_condition_mask           $177 = CondMask
  127. copy_4_slots_unmasked          $178..181 = m(0..3)
  128. copy_4_slots_unmasked          $182..185 = m(4..7)
  129. copy_slot_unmasked             $186 = m(8)
  130. copy_4_constants               $187..190 = testMatrix3x3(0..3)
  131. copy_4_constants               $191..194 = testMatrix3x3(4..7)
  132. copy_constant                  $195 = testMatrix3x3(8)
  133. cmpne_n_floats                 $178..186 = notEqual($178..186, $187..195)
  134. bitwise_or_4_ints              $179..182 |= $183..186
  135. bitwise_or_2_ints              $179..180 |= $181..182
  136. bitwise_or_int                 $179 |= $180
  137. bitwise_or_int                 $178 |= $179
  138. merge_condition_mask           CondMask = $177 & $178
  139. zero_slot_unmasked             $179 = 0
  140. copy_slot_masked               [test_no_op_scalar_X_mat3].result = Mask($179)
  141. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  142. load_condition_mask            CondMask = $177
  143. store_condition_mask           $177 = CondMask
  144. copy_4_slots_unmasked          $178..181 = m(0..3)
  145. copy_4_slots_unmasked          $182..185 = m(4..7)
  146. copy_slot_unmasked             $186 = m(8)
  147. copy_4_constants               $187..190 = testMatrix3x3(0..3)
  148. copy_4_constants               $191..194 = testMatrix3x3(4..7)
  149. copy_constant                  $195 = testMatrix3x3(8)
  150. cmpne_n_floats                 $178..186 = notEqual($178..186, $187..195)
  151. bitwise_or_4_ints              $179..182 |= $183..186
  152. bitwise_or_2_ints              $179..180 |= $181..182
  153. bitwise_or_int                 $179 |= $180
  154. bitwise_or_int                 $178 |= $179
  155. merge_condition_mask           CondMask = $177 & $178
  156. zero_slot_unmasked             $179 = 0
  157. copy_slot_masked               [test_no_op_scalar_X_mat3].result = Mask($179)
  158. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  159. load_condition_mask            CondMask = $177
  160. zero_4_slots_unmasked          $177..180 = 0
  161. zero_4_slots_unmasked          $181..184 = 0
  162. zero_slot_unmasked             $185 = 0
  163. copy_4_slots_unmasked          $186..189 = m(0..3)
  164. copy_4_slots_unmasked          $190..193 = m(4..7)
  165. copy_slot_unmasked             $194 = m(8)
  166. sub_n_floats                   $177..185 -= $186..194
  167. copy_4_slots_masked            m(0..3) = Mask($177..180)
  168. copy_4_slots_masked            m(4..7) = Mask($181..184)
  169. copy_slot_masked               m(8) = Mask($185)
  170. store_condition_mask           $177 = CondMask
  171. copy_4_slots_unmasked          $178..181 = m(0..3)
  172. copy_4_slots_unmasked          $182..185 = m(4..7)
  173. copy_slot_unmasked             $186 = m(8)
  174. zero_4_slots_unmasked          $187..190 = 0
  175. zero_4_slots_unmasked          $191..194 = 0
  176. zero_slot_unmasked             $195 = 0
  177. copy_4_constants               $196..199 = testMatrix3x3(0..3)
  178. copy_4_constants               $200..203 = testMatrix3x3(4..7)
  179. copy_constant                  $204 = testMatrix3x3(8)
  180. sub_n_floats                   $187..195 -= $196..204
  181. cmpne_n_floats                 $178..186 = notEqual($178..186, $187..195)
  182. bitwise_or_4_ints              $179..182 |= $183..186
  183. bitwise_or_2_ints              $179..180 |= $181..182
  184. bitwise_or_int                 $179 |= $180
  185. bitwise_or_int                 $178 |= $179
  186. merge_condition_mask           CondMask = $177 & $178
  187. zero_slot_unmasked             $179 = 0
  188. copy_slot_masked               [test_no_op_scalar_X_mat3].result = Mask($179)
  189. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  190. load_condition_mask            CondMask = $177
  191. zero_2_slots_unmasked          $177..178 = 0
  192. shuffle                        $177..185 = ($177..185)[1 0 0 0 1 0 0 0 1]
  193. copy_4_slots_masked            mm(0..3) = Mask($177..180)
  194. copy_4_slots_masked            mm(4..7) = Mask($181..184)
  195. copy_slot_masked               mm(8) = Mask($185)
  196. zero_2_slots_unmasked          $177..178 = 0
  197. shuffle                        $177..185 = ($177..185)[1 0 0 0 1 0 0 0 1]
  198. copy_4_slots_masked            mm(0..3) = Mask($177..180)
  199. copy_4_slots_masked            mm(4..7) = Mask($181..184)
  200. copy_slot_masked               mm(8) = Mask($185)
  201. copy_4_slots_unmasked          $186..189 = z(0..3)
  202. copy_4_slots_unmasked          $190..193 = z(4..7)
  203. copy_slot_unmasked             $194 = z(8)
  204. cmpeq_n_floats                 $177..185 = equal($177..185, $186..194)
  205. bitwise_and_4_ints             $178..181 &= $182..185
  206. bitwise_and_2_ints             $178..179 &= $180..181
  207. bitwise_and_int                $178 &= $179
  208. bitwise_and_int                $177 &= $178
  209. copy_slot_masked               [test_no_op_scalar_X_mat3].result = Mask($177)
  210. load_return_mask               RetMask = $176
  211. copy_slot_unmasked             $176 = [test_no_op_scalar_X_mat3].result
  212. copy_slot_masked               $175 = Mask($176)
  213. load_condition_mask            CondMask = $159
  214. zero_slot_unmasked             $61 = 0
  215. merge_condition_mask           CondMask = $174 & $175
  216. branch_if_no_active_lanes      branch_if_no_active_lanes +164 (#380)
  217. store_return_mask              $62 = RetMask
  218. copy_4_constants               $63..66 = testInputs
  219. copy_4_constants               $67..70 = testInputs
  220. copy_4_constants               $71..74 = testInputs
  221. copy_4_constants               $75..78 = testInputs
  222. copy_4_slots_unmasked          testMatrix4x4(0..3) = $63..66
  223. copy_4_slots_unmasked          testMatrix4x4(4..7) = $67..70
  224. copy_4_slots_unmasked          testMatrix4x4(8..11) = $71..74
  225. copy_4_slots_unmasked          testMatrix4x4(12..15) = $75..78
  226. zero_4_slots_unmasked          m(0..3) = 0
  227. zero_4_slots_unmasked          m(4..7) = 0
  228. zero_4_slots_unmasked          m(8..11) = 0
  229. zero_4_slots_unmasked          m(12..15) = 0
  230. zero_4_slots_unmasked          mm(0..3) = 0
  231. zero_4_slots_unmasked          mm(4..7) = 0
  232. zero_4_slots_unmasked          mm(8..11) = 0
  233. zero_4_slots_unmasked          mm(12..15) = 0
  234. zero_2_slots_unmasked          $63..64 = 0
  235. shuffle                        $63..78 = ($63..78)[1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1]
  236. copy_4_slots_unmasked          z(0..3) = $63..66
  237. copy_4_slots_unmasked          z(4..7) = $67..70
  238. copy_4_slots_unmasked          z(8..11) = $71..74
  239. copy_4_slots_unmasked          z(12..15) = $75..78
  240. copy_4_slots_unmasked          $63..66 = testMatrix4x4(0..3)
  241. copy_4_slots_unmasked          $67..70 = testMatrix4x4(4..7)
  242. copy_4_slots_unmasked          $71..74 = testMatrix4x4(8..11)
  243. copy_4_slots_unmasked          $75..78 = testMatrix4x4(12..15)
  244. copy_4_slots_masked            m(0..3) = Mask($63..66)
  245. copy_4_slots_masked            m(4..7) = Mask($67..70)
  246. copy_4_slots_masked            m(8..11) = Mask($71..74)
  247. copy_4_slots_masked            m(12..15) = Mask($75..78)
  248. copy_4_slots_unmasked          $63..66 = testMatrix4x4(0..3)
  249. copy_4_slots_unmasked          $67..70 = testMatrix4x4(4..7)
  250. copy_4_slots_unmasked          $71..74 = testMatrix4x4(8..11)
  251. copy_4_slots_unmasked          $75..78 = testMatrix4x4(12..15)
  252. copy_4_slots_masked            m(0..3) = Mask($63..66)
  253. copy_4_slots_masked            m(4..7) = Mask($67..70)
  254. copy_4_slots_masked            m(8..11) = Mask($71..74)
  255. copy_4_slots_masked            m(12..15) = Mask($75..78)
  256. store_condition_mask           $63 = CondMask
  257. copy_4_slots_unmasked          $64..67 = m(0..3)
  258. copy_4_slots_unmasked          $68..71 = m(4..7)
  259. copy_4_slots_unmasked          $72..75 = m(8..11)
  260. copy_4_slots_unmasked          $76..79 = m(12..15)
  261. copy_4_slots_unmasked          $80..83 = testMatrix4x4(0..3)
  262. copy_4_slots_unmasked          $84..87 = testMatrix4x4(4..7)
  263. copy_4_slots_unmasked          $88..91 = testMatrix4x4(8..11)
  264. copy_4_slots_unmasked          $92..95 = testMatrix4x4(12..15)
  265. cmpne_n_floats                 $64..79 = notEqual($64..79, $80..95)
  266. bitwise_or_4_ints              $72..75 |= $76..79
  267. bitwise_or_4_ints              $68..71 |= $72..75
  268. bitwise_or_4_ints              $64..67 |= $68..71
  269. bitwise_or_2_ints              $64..65 |= $66..67
  270. bitwise_or_int                 $64 |= $65
  271. merge_condition_mask           CondMask = $63 & $64
  272. zero_slot_unmasked             $65 = 0
  273. copy_slot_masked               [test_no_op_scalar_X_mat4].result = Mask($65)
  274. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  275. load_condition_mask            CondMask = $63
  276. store_condition_mask           $63 = CondMask
  277. copy_4_slots_unmasked          $64..67 = m(0..3)
  278. copy_4_slots_unmasked          $68..71 = m(4..7)
  279. copy_4_slots_unmasked          $72..75 = m(8..11)
  280. copy_4_slots_unmasked          $76..79 = m(12..15)
  281. copy_4_slots_unmasked          $80..83 = testMatrix4x4(0..3)
  282. copy_4_slots_unmasked          $84..87 = testMatrix4x4(4..7)
  283. copy_4_slots_unmasked          $88..91 = testMatrix4x4(8..11)
  284. copy_4_slots_unmasked          $92..95 = testMatrix4x4(12..15)
  285. cmpne_n_floats                 $64..79 = notEqual($64..79, $80..95)
  286. bitwise_or_4_ints              $72..75 |= $76..79
  287. bitwise_or_4_ints              $68..71 |= $72..75
  288. bitwise_or_4_ints              $64..67 |= $68..71
  289. bitwise_or_2_ints              $64..65 |= $66..67
  290. bitwise_or_int                 $64 |= $65
  291. merge_condition_mask           CondMask = $63 & $64
  292. zero_slot_unmasked             $65 = 0
  293. copy_slot_masked               [test_no_op_scalar_X_mat4].result = Mask($65)
  294. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  295. load_condition_mask            CondMask = $63
  296. store_condition_mask           $63 = CondMask
  297. copy_4_slots_unmasked          $64..67 = m(0..3)
  298. copy_4_slots_unmasked          $68..71 = m(4..7)
  299. copy_4_slots_unmasked          $72..75 = m(8..11)
  300. copy_4_slots_unmasked          $76..79 = m(12..15)
  301. copy_4_slots_unmasked          $80..83 = testMatrix4x4(0..3)
  302. copy_4_slots_unmasked          $84..87 = testMatrix4x4(4..7)
  303. copy_4_slots_unmasked          $88..91 = testMatrix4x4(8..11)
  304. copy_4_slots_unmasked          $92..95 = testMatrix4x4(12..15)
  305. cmpne_n_floats                 $64..79 = notEqual($64..79, $80..95)
  306. bitwise_or_4_ints              $72..75 |= $76..79
  307. bitwise_or_4_ints              $68..71 |= $72..75
  308. bitwise_or_4_ints              $64..67 |= $68..71
  309. bitwise_or_2_ints              $64..65 |= $66..67
  310. bitwise_or_int                 $64 |= $65
  311. merge_condition_mask           CondMask = $63 & $64
  312. zero_slot_unmasked             $65 = 0
  313. copy_slot_masked               [test_no_op_scalar_X_mat4].result = Mask($65)
  314. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  315. load_condition_mask            CondMask = $63
  316. zero_4_slots_unmasked          $63..66 = 0
  317. zero_4_slots_unmasked          $67..70 = 0
  318. zero_4_slots_unmasked          $71..74 = 0
  319. zero_4_slots_unmasked          $75..78 = 0
  320. copy_4_slots_unmasked          $79..82 = m(0..3)
  321. copy_4_slots_unmasked          $83..86 = m(4..7)
  322. copy_4_slots_unmasked          $87..90 = m(8..11)
  323. copy_4_slots_unmasked          $91..94 = m(12..15)
  324. sub_n_floats                   $63..78 -= $79..94
  325. copy_4_slots_masked            m(0..3) = Mask($63..66)
  326. copy_4_slots_masked            m(4..7) = Mask($67..70)
  327. copy_4_slots_masked            m(8..11) = Mask($71..74)
  328. copy_4_slots_masked            m(12..15) = Mask($75..78)
  329. store_condition_mask           $63 = CondMask
  330. copy_4_slots_unmasked          $64..67 = m(0..3)
  331. copy_4_slots_unmasked          $68..71 = m(4..7)
  332. copy_4_slots_unmasked          $72..75 = m(8..11)
  333. copy_4_slots_unmasked          $76..79 = m(12..15)
  334. zero_4_slots_unmasked          $80..83 = 0
  335. zero_4_slots_unmasked          $84..87 = 0
  336. zero_4_slots_unmasked          $88..91 = 0
  337. zero_4_slots_unmasked          $92..95 = 0
  338. copy_4_slots_unmasked          $96..99 = testMatrix4x4(0..3)
  339. copy_4_slots_unmasked          $100..103 = testMatrix4x4(4..7)
  340. copy_4_slots_unmasked          $104..107 = testMatrix4x4(8..11)
  341. copy_4_slots_unmasked          $108..111 = testMatrix4x4(12..15)
  342. sub_n_floats                   $80..95 -= $96..111
  343. cmpne_n_floats                 $64..79 = notEqual($64..79, $80..95)
  344. bitwise_or_4_ints              $72..75 |= $76..79
  345. bitwise_or_4_ints              $68..71 |= $72..75
  346. bitwise_or_4_ints              $64..67 |= $68..71
  347. bitwise_or_2_ints              $64..65 |= $66..67
  348. bitwise_or_int                 $64 |= $65
  349. merge_condition_mask           CondMask = $63 & $64
  350. zero_slot_unmasked             $65 = 0
  351. copy_slot_masked               [test_no_op_scalar_X_mat4].result = Mask($65)
  352. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  353. load_condition_mask            CondMask = $63
  354. zero_2_slots_unmasked          $63..64 = 0
  355. shuffle                        $63..78 = ($63..78)[1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1]
  356. copy_4_slots_masked            mm(0..3) = Mask($63..66)
  357. copy_4_slots_masked            mm(4..7) = Mask($67..70)
  358. copy_4_slots_masked            mm(8..11) = Mask($71..74)
  359. copy_4_slots_masked            mm(12..15) = Mask($75..78)
  360. zero_2_slots_unmasked          $63..64 = 0
  361. shuffle                        $63..78 = ($63..78)[1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1]
  362. copy_4_slots_masked            mm(0..3) = Mask($63..66)
  363. copy_4_slots_masked            mm(4..7) = Mask($67..70)
  364. copy_4_slots_masked            mm(8..11) = Mask($71..74)
  365. copy_4_slots_masked            mm(12..15) = Mask($75..78)
  366. copy_4_slots_unmasked          $79..82 = z(0..3)
  367. copy_4_slots_unmasked          $83..86 = z(4..7)
  368. copy_4_slots_unmasked          $87..90 = z(8..11)
  369. copy_4_slots_unmasked          $91..94 = z(12..15)
  370. cmpeq_n_floats                 $63..78 = equal($63..78, $79..94)
  371. bitwise_and_4_ints             $71..74 &= $75..78
  372. bitwise_and_4_ints             $67..70 &= $71..74
  373. bitwise_and_4_ints             $63..66 &= $67..70
  374. bitwise_and_2_ints             $63..64 &= $65..66
  375. bitwise_and_int                $63 &= $64
  376. copy_slot_masked               [test_no_op_scalar_X_mat4].result = Mask($63)
  377. load_return_mask               RetMask = $62
  378. copy_slot_unmasked             $62 = [test_no_op_scalar_X_mat4].result
  379. copy_slot_masked               $61 = Mask($62)
  380. load_condition_mask            CondMask = $174
  381. zero_slot_unmasked             $144 = 0
  382. merge_condition_mask           CondMask = $60 & $61
  383. branch_if_no_active_lanes      branch_if_no_active_lanes +116 (#499)
  384. store_return_mask              $145 = RetMask
  385. zero_4_slots_unmasked          m = 0
  386. zero_4_slots_unmasked          mm = 0
  387. zero_2_slots_unmasked          $146..147 = 0
  388. swizzle_4                      $146..149 = ($146..149).yxxy
  389. copy_4_slots_unmasked          z = $146..149
  390. copy_constant                  $146 = 0x3F800000 (1.0)
  391. swizzle_4                      $146..149 = ($146..149).xxxx
  392. copy_4_slots_unmasked          s = $146..149
  393. copy_constant                  $146 = testInputs(0)
  394. copy_slot_unmasked             scalar = $146
  395. zero_slot_unmasked             $146 = 0
  396. copy_slot_unmasked             $147 = scalar
  397. swizzle_4                      $146..149 = ($146..149).yxxy
  398. copy_4_slots_masked            m = Mask($146..149)
  399. zero_slot_unmasked             $146 = 0
  400. copy_slot_unmasked             $147 = scalar
  401. swizzle_4                      $146..149 = ($146..149).yxxy
  402. copy_4_slots_masked            m = Mask($146..149)
  403. store_condition_mask           $146 = CondMask
  404. copy_4_slots_unmasked          $147..150 = m
  405. zero_slot_unmasked             $151 = 0
  406. copy_slot_unmasked             $152 = scalar
  407. swizzle_4                      $151..154 = ($151..154).yxxy
  408. cmpne_4_floats                 $147..150 = notEqual($147..150, $151..154)
  409. bitwise_or_2_ints              $147..148 |= $149..150
  410. bitwise_or_int                 $147 |= $148
  411. merge_condition_mask           CondMask = $146 & $147
  412. zero_slot_unmasked             $148 = 0
  413. copy_slot_masked               [test_no_op_mat2_X_scalar].result = Mask($148)
  414. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  415. load_condition_mask            CondMask = $146
  416. copy_slot_unmasked             $146 = scalar
  417. swizzle_4                      $146..149 = ($146..149).xxxx
  418. copy_4_slots_unmasked          $150..153 = s
  419. div_4_floats                   $146..149 /= $150..153
  420. copy_4_slots_masked            m = Mask($146..149)
  421. store_condition_mask           $146 = CondMask
  422. copy_4_slots_unmasked          $147..150 = m
  423. copy_slot_unmasked             $151 = scalar
  424. copy_slot_unmasked             $152 = scalar
  425. copy_slot_unmasked             $153 = scalar
  426. copy_slot_unmasked             $154 = scalar
  427. cmpne_4_floats                 $147..150 = notEqual($147..150, $151..154)
  428. bitwise_or_2_ints              $147..148 |= $149..150
  429. bitwise_or_int                 $147 |= $148
  430. merge_condition_mask           CondMask = $146 & $147
  431. zero_slot_unmasked             $148 = 0
  432. copy_slot_masked               [test_no_op_mat2_X_scalar].result = Mask($148)
  433. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  434. load_condition_mask            CondMask = $146
  435. copy_slot_unmasked             $146 = scalar
  436. swizzle_4                      $146..149 = ($146..149).xxxx
  437. copy_4_slots_unmasked          $150..153 = z
  438. add_4_floats                   $146..149 += $150..153
  439. copy_4_slots_masked            m = Mask($146..149)
  440. copy_4_slots_unmasked          $146..149 = z
  441. copy_slot_unmasked             $150 = scalar
  442. swizzle_4                      $150..153 = ($150..153).xxxx
  443. add_4_floats                   $146..149 += $150..153
  444. copy_4_slots_masked            m = Mask($146..149)
  445. store_condition_mask           $146 = CondMask
  446. copy_4_slots_unmasked          $147..150 = m
  447. copy_slot_unmasked             $151 = scalar
  448. copy_slot_unmasked             $152 = scalar
  449. copy_slot_unmasked             $153 = scalar
  450. copy_slot_unmasked             $154 = scalar
  451. cmpne_4_floats                 $147..150 = notEqual($147..150, $151..154)
  452. bitwise_or_2_ints              $147..148 |= $149..150
  453. bitwise_or_int                 $147 |= $148
  454. merge_condition_mask           CondMask = $146 & $147
  455. zero_slot_unmasked             $148 = 0
  456. copy_slot_masked               [test_no_op_mat2_X_scalar].result = Mask($148)
  457. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  458. load_condition_mask            CondMask = $146
  459. copy_slot_unmasked             $146 = scalar
  460. swizzle_4                      $146..149 = ($146..149).xxxx
  461. copy_4_slots_unmasked          $150..153 = z
  462. sub_4_floats                   $146..149 -= $150..153
  463. copy_4_slots_masked            m = Mask($146..149)
  464. copy_4_slots_unmasked          $146..149 = z
  465. copy_slot_unmasked             $150 = scalar
  466. swizzle_4                      $150..153 = ($150..153).xxxx
  467. sub_4_floats                   $146..149 -= $150..153
  468. copy_4_slots_masked            m = Mask($146..149)
  469. store_condition_mask           $146 = CondMask
  470. copy_4_slots_unmasked          $147..150 = m
  471. zero_4_slots_unmasked          $151..154 = 0
  472. copy_slot_unmasked             $155 = scalar
  473. copy_slot_unmasked             $156 = scalar
  474. copy_slot_unmasked             $157 = scalar
  475. copy_slot_unmasked             $158 = scalar
  476. sub_4_floats                   $151..154 -= $155..158
  477. cmpne_4_floats                 $147..150 = notEqual($147..150, $151..154)
  478. bitwise_or_2_ints              $147..148 |= $149..150
  479. bitwise_or_int                 $147 |= $148
  480. merge_condition_mask           CondMask = $146 & $147
  481. zero_slot_unmasked             $148 = 0
  482. copy_slot_masked               [test_no_op_mat2_X_scalar].result = Mask($148)
  483. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  484. load_condition_mask            CondMask = $146
  485. zero_2_slots_unmasked          $146..147 = 0
  486. swizzle_4                      $146..149 = ($146..149).yxxy
  487. copy_4_slots_masked            mm = Mask($146..149)
  488. zero_2_slots_unmasked          $146..147 = 0
  489. swizzle_4                      $146..149 = ($146..149).yxxy
  490. copy_4_slots_masked            mm = Mask($146..149)
  491. copy_4_slots_unmasked          $150..153 = z
  492. cmpeq_4_floats                 $146..149 = equal($146..149, $150..153)
  493. bitwise_and_2_ints             $146..147 &= $148..149
  494. bitwise_and_int                $146 &= $147
  495. copy_slot_masked               [test_no_op_mat2_X_scalar].result = Mask($146)
  496. load_return_mask               RetMask = $145
  497. copy_slot_unmasked             $145 = [test_no_op_mat2_X_scalar].result
  498. copy_slot_masked               $144 = Mask($145)
  499. load_condition_mask            CondMask = $60
  500. zero_slot_unmasked             $113 = 0
  501. merge_condition_mask           CondMask = $143 & $144
  502. stack_rewind
  503. branch_if_no_active_lanes      branch_if_no_active_lanes +186 (#689)
  504. store_return_mask              $114 = RetMask
  505. zero_4_slots_unmasked          m(0..3) = 0
  506. zero_4_slots_unmasked          m(4..7) = 0
  507. zero_4_slots_unmasked          m(8..11) = 0
  508. zero_4_slots_unmasked          mm(3..6) = 0
  509. zero_2_slots_unmasked          mm(7..8) = 0
  510. zero_2_slots_unmasked          $115..116 = 0
  511. shuffle                        $115..123 = ($115..123)[1 0 0 0 1 0 0 0 1]
  512. copy_4_slots_unmasked          z(0..3) = $115..118
  513. copy_4_slots_unmasked          z(4..7) = $119..122
  514. copy_slot_unmasked             z(8) = $123
  515. copy_constant                  $115 = 0x3F800000 (1.0)
  516. swizzle_3                      $115..117 = ($115..117).xxx
  517. copy_constant                  $118 = 0x3F800000 (1.0)
  518. swizzle_3                      $118..120 = ($118..120).xxx
  519. copy_constant                  $121 = 0x3F800000 (1.0)
  520. swizzle_3                      $121..123 = ($121..123).xxx
  521. copy_4_slots_unmasked          s(0..3) = $115..118
  522. copy_4_slots_unmasked          s(4..7) = $119..122
  523. copy_slot_unmasked             s(8) = $123
  524. copy_constant                  $115 = testInputs(0)
  525. copy_slot_unmasked             scalar = $115
  526. swizzle_3                      $115..117 = ($115..117).xxx
  527. copy_3_slots_unmasked          scalar3 = $115..117
  528. zero_slot_unmasked             $115 = 0
  529. copy_slot_unmasked             $116 = scalar
  530. shuffle                        $115..123 = ($115..123)[1 0 0 0 1 0 0 0 1]
  531. copy_4_slots_masked            m(0..3) = Mask($115..118)
  532. copy_4_slots_masked            m(4..7) = Mask($119..122)
  533. copy_slot_masked               m(8) = Mask($123)
  534. zero_slot_unmasked             $115 = 0
  535. copy_slot_unmasked             $116 = scalar
  536. shuffle                        $115..123 = ($115..123)[1 0 0 0 1 0 0 0 1]
  537. copy_4_slots_masked            m(0..3) = Mask($115..118)
  538. copy_4_slots_masked            m(4..7) = Mask($119..122)
  539. copy_slot_masked               m(8) = Mask($123)
  540. store_condition_mask           $115 = CondMask
  541. copy_4_slots_unmasked          $116..119 = m(0..3)
  542. copy_4_slots_unmasked          $120..123 = m(4..7)
  543. copy_slot_unmasked             $124 = m(8)
  544. zero_slot_unmasked             $125 = 0
  545. copy_slot_unmasked             $126 = scalar
  546. shuffle                        $125..133 = ($125..133)[1 0 0 0 1 0 0 0 1]
  547. cmpne_n_floats                 $116..124 = notEqual($116..124, $125..133)
  548. bitwise_or_4_ints              $117..120 |= $121..124
  549. bitwise_or_2_ints              $117..118 |= $119..120
  550. bitwise_or_int                 $117 |= $118
  551. bitwise_or_int                 $116 |= $117
  552. merge_condition_mask           CondMask = $115 & $116
  553. zero_slot_unmasked             $117 = 0
  554. copy_slot_masked               [test_no_op_mat3_X_scalar].result = Mask($117)
  555. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  556. load_condition_mask            CondMask = $115
  557. copy_slot_unmasked             $115 = scalar
  558. swizzle_4                      $115..118 = ($115..118).xxxx
  559. copy_4_slots_unmasked          $119..122 = $115..118
  560. copy_slot_unmasked             $123 = $122
  561. copy_4_slots_unmasked          $124..127 = s(0..3)
  562. copy_4_slots_unmasked          $128..131 = s(4..7)
  563. copy_slot_unmasked             $132 = s(8)
  564. div_n_floats                   $115..123 /= $124..132
  565. copy_4_slots_masked            m(0..3) = Mask($115..118)
  566. copy_4_slots_masked            m(4..7) = Mask($119..122)
  567. copy_slot_masked               m(8) = Mask($123)
  568. store_condition_mask           $115 = CondMask
  569. copy_4_slots_unmasked          $116..119 = m(0..3)
  570. copy_4_slots_unmasked          $120..123 = m(4..7)
  571. copy_slot_unmasked             $124 = m(8)
  572. copy_3_slots_unmasked          $125..127 = scalar3
  573. copy_3_slots_unmasked          $128..130 = scalar3
  574. copy_3_slots_unmasked          $131..133 = scalar3
  575. cmpne_n_floats                 $116..124 = notEqual($116..124, $125..133)
  576. bitwise_or_4_ints              $117..120 |= $121..124
  577. bitwise_or_2_ints              $117..118 |= $119..120
  578. bitwise_or_int                 $117 |= $118
  579. bitwise_or_int                 $116 |= $117
  580. merge_condition_mask           CondMask = $115 & $116
  581. zero_slot_unmasked             $117 = 0
  582. copy_slot_masked               [test_no_op_mat3_X_scalar].result = Mask($117)
  583. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  584. load_condition_mask            CondMask = $115
  585. copy_slot_unmasked             $115 = scalar
  586. swizzle_4                      $115..118 = ($115..118).xxxx
  587. copy_4_slots_unmasked          $119..122 = $115..118
  588. copy_slot_unmasked             $123 = $122
  589. copy_4_slots_unmasked          $124..127 = z(0..3)
  590. copy_4_slots_unmasked          $128..131 = z(4..7)
  591. copy_slot_unmasked             $132 = z(8)
  592. add_n_floats                   $115..123 += $124..132
  593. copy_4_slots_masked            m(0..3) = Mask($115..118)
  594. copy_4_slots_masked            m(4..7) = Mask($119..122)
  595. copy_slot_masked               m(8) = Mask($123)
  596. copy_4_slots_unmasked          $115..118 = z(0..3)
  597. copy_4_slots_unmasked          $119..122 = z(4..7)
  598. copy_slot_unmasked             $123 = z(8)
  599. copy_slot_unmasked             $124 = scalar
  600. swizzle_4                      $124..127 = ($124..127).xxxx
  601. copy_4_slots_unmasked          $128..131 = $124..127
  602. copy_slot_unmasked             $132 = $131
  603. add_n_floats                   $115..123 += $124..132
  604. copy_4_slots_masked            m(0..3) = Mask($115..118)
  605. copy_4_slots_masked            m(4..7) = Mask($119..122)
  606. copy_slot_masked               m(8) = Mask($123)
  607. store_condition_mask           $115 = CondMask
  608. copy_4_slots_unmasked          $116..119 = m(0..3)
  609. copy_4_slots_unmasked          $120..123 = m(4..7)
  610. copy_slot_unmasked             $124 = m(8)
  611. copy_3_slots_unmasked          $125..127 = scalar3
  612. copy_3_slots_unmasked          $128..130 = scalar3
  613. copy_3_slots_unmasked          $131..133 = scalar3
  614. cmpne_n_floats                 $116..124 = notEqual($116..124, $125..133)
  615. bitwise_or_4_ints              $117..120 |= $121..124
  616. bitwise_or_2_ints              $117..118 |= $119..120
  617. bitwise_or_int                 $117 |= $118
  618. bitwise_or_int                 $116 |= $117
  619. merge_condition_mask           CondMask = $115 & $116
  620. zero_slot_unmasked             $117 = 0
  621. copy_slot_masked               [test_no_op_mat3_X_scalar].result = Mask($117)
  622. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  623. load_condition_mask            CondMask = $115
  624. copy_slot_unmasked             $115 = scalar
  625. swizzle_4                      $115..118 = ($115..118).xxxx
  626. copy_4_slots_unmasked          $119..122 = $115..118
  627. copy_slot_unmasked             $123 = $122
  628. copy_4_slots_unmasked          $124..127 = z(0..3)
  629. copy_4_slots_unmasked          $128..131 = z(4..7)
  630. copy_slot_unmasked             $132 = z(8)
  631. sub_n_floats                   $115..123 -= $124..132
  632. copy_4_slots_masked            m(0..3) = Mask($115..118)
  633. copy_4_slots_masked            m(4..7) = Mask($119..122)
  634. copy_slot_masked               m(8) = Mask($123)
  635. copy_4_slots_unmasked          $115..118 = z(0..3)
  636. copy_4_slots_unmasked          $119..122 = z(4..7)
  637. copy_slot_unmasked             $123 = z(8)
  638. copy_slot_unmasked             $124 = scalar
  639. swizzle_4                      $124..127 = ($124..127).xxxx
  640. copy_4_slots_unmasked          $128..131 = $124..127
  641. copy_slot_unmasked             $132 = $131
  642. sub_n_floats                   $115..123 -= $124..132
  643. copy_4_slots_masked            m(0..3) = Mask($115..118)
  644. copy_4_slots_masked            m(4..7) = Mask($119..122)
  645. copy_slot_masked               m(8) = Mask($123)
  646. store_condition_mask           $115 = CondMask
  647. copy_4_slots_unmasked          $116..119 = m(0..3)
  648. copy_4_slots_unmasked          $120..123 = m(4..7)
  649. copy_slot_unmasked             $124 = m(8)
  650. zero_4_slots_unmasked          $125..128 = 0
  651. zero_4_slots_unmasked          $129..132 = 0
  652. zero_slot_unmasked             $133 = 0
  653. copy_3_slots_unmasked          $134..136 = scalar3
  654. copy_3_slots_unmasked          $137..139 = scalar3
  655. copy_3_slots_unmasked          $140..142 = scalar3
  656. sub_n_floats                   $125..133 -= $134..142
  657. cmpne_n_floats                 $116..124 = notEqual($116..124, $125..133)
  658. bitwise_or_4_ints              $117..120 |= $121..124
  659. bitwise_or_2_ints              $117..118 |= $119..120
  660. bitwise_or_int                 $117 |= $118
  661. bitwise_or_int                 $116 |= $117
  662. merge_condition_mask           CondMask = $115 & $116
  663. zero_slot_unmasked             $117 = 0
  664. copy_slot_masked               [test_no_op_mat3_X_scalar].result = Mask($117)
  665. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  666. load_condition_mask            CondMask = $115
  667. zero_2_slots_unmasked          $115..116 = 0
  668. shuffle                        $115..123 = ($115..123)[1 0 0 0 1 0 0 0 1]
  669. copy_4_slots_masked            mm(0..3) = Mask($115..118)
  670. copy_4_slots_masked            mm(4..7) = Mask($119..122)
  671. copy_slot_masked               mm(8) = Mask($123)
  672. zero_2_slots_unmasked          $115..116 = 0
  673. shuffle                        $115..123 = ($115..123)[1 0 0 0 1 0 0 0 1]
  674. copy_4_slots_masked            mm(0..3) = Mask($115..118)
  675. copy_4_slots_masked            mm(4..7) = Mask($119..122)
  676. copy_slot_masked               mm(8) = Mask($123)
  677. copy_4_slots_unmasked          $124..127 = z(0..3)
  678. copy_4_slots_unmasked          $128..131 = z(4..7)
  679. copy_slot_unmasked             $132 = z(8)
  680. cmpeq_n_floats                 $115..123 = equal($115..123, $124..132)
  681. bitwise_and_4_ints             $116..119 &= $120..123
  682. bitwise_and_2_ints             $116..117 &= $118..119
  683. bitwise_and_int                $116 &= $117
  684. bitwise_and_int                $115 &= $116
  685. copy_slot_masked               [test_no_op_mat3_X_scalar].result = Mask($115)
  686. load_return_mask               RetMask = $114
  687. copy_slot_unmasked             $114 = [test_no_op_mat3_X_scalar].result
  688. copy_slot_masked               $113 = Mask($114)
  689. load_condition_mask            CondMask = $143
  690. zero_slot_unmasked             $9 = 0
  691. merge_condition_mask           CondMask = $112 & $113
  692. branch_if_no_active_lanes      branch_if_no_active_lanes +226 (#918)
  693. store_return_mask              $10 = RetMask
  694. zero_4_slots_unmasked          m(0..3) = 0
  695. zero_4_slots_unmasked          m(4..7) = 0
  696. zero_4_slots_unmasked          m(8..11) = 0
  697. zero_4_slots_unmasked          m(12..15) = 0
  698. zero_4_slots_unmasked          mm(0..3) = 0
  699. zero_4_slots_unmasked          mm(4..7) = 0
  700. zero_4_slots_unmasked          mm(8..11) = 0
  701. zero_4_slots_unmasked          mm(12..15) = 0
  702. zero_2_slots_unmasked          $11..12 = 0
  703. shuffle                        $11..26 = ($11..26)[1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1]
  704. copy_4_slots_unmasked          z(0..3) = $11..14
  705. copy_4_slots_unmasked          z(4..7) = $15..18
  706. copy_4_slots_unmasked          z(8..11) = $19..22
  707. copy_4_slots_unmasked          z(12..15) = $23..26
  708. copy_constant                  $11 = 0x3F800000 (1.0)
  709. swizzle_4                      $11..14 = ($11..14).xxxx
  710. copy_constant                  $15 = 0x3F800000 (1.0)
  711. swizzle_4                      $15..18 = ($15..18).xxxx
  712. copy_constant                  $19 = 0x3F800000 (1.0)
  713. swizzle_4                      $19..22 = ($19..22).xxxx
  714. copy_constant                  $23 = 0x3F800000 (1.0)
  715. swizzle_4                      $23..26 = ($23..26).xxxx
  716. copy_4_slots_unmasked          s(0..3) = $11..14
  717. copy_4_slots_unmasked          s(4..7) = $15..18
  718. copy_4_slots_unmasked          s(8..11) = $19..22
  719. copy_4_slots_unmasked          s(12..15) = $23..26
  720. copy_constant                  $11 = testInputs(0)
  721. copy_slot_unmasked             scalar = $11
  722. swizzle_4                      $11..14 = ($11..14).xxxx
  723. copy_4_slots_unmasked          scalar4 = $11..14
  724. zero_slot_unmasked             $11 = 0
  725. copy_slot_unmasked             $12 = scalar
  726. shuffle                        $11..26 = ($11..26)[1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1]
  727. copy_4_slots_masked            m(0..3) = Mask($11..14)
  728. copy_4_slots_masked            m(4..7) = Mask($15..18)
  729. copy_4_slots_masked            m(8..11) = Mask($19..22)
  730. copy_4_slots_masked            m(12..15) = Mask($23..26)
  731. zero_slot_unmasked             $11 = 0
  732. copy_slot_unmasked             $12 = scalar
  733. shuffle                        $11..26 = ($11..26)[1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1]
  734. copy_4_slots_masked            m(0..3) = Mask($11..14)
  735. copy_4_slots_masked            m(4..7) = Mask($15..18)
  736. copy_4_slots_masked            m(8..11) = Mask($19..22)
  737. copy_4_slots_masked            m(12..15) = Mask($23..26)
  738. store_condition_mask           $11 = CondMask
  739. copy_4_slots_unmasked          $12..15 = m(0..3)
  740. copy_4_slots_unmasked          $16..19 = m(4..7)
  741. copy_4_slots_unmasked          $20..23 = m(8..11)
  742. copy_4_slots_unmasked          $24..27 = m(12..15)
  743. zero_slot_unmasked             $28 = 0
  744. copy_slot_unmasked             $29 = scalar
  745. shuffle                        $28..43 = ($28..43)[1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1]
  746. cmpne_n_floats                 $12..27 = notEqual($12..27, $28..43)
  747. bitwise_or_4_ints              $20..23 |= $24..27
  748. bitwise_or_4_ints              $16..19 |= $20..23
  749. bitwise_or_4_ints              $12..15 |= $16..19
  750. bitwise_or_2_ints              $12..13 |= $14..15
  751. bitwise_or_int                 $12 |= $13
  752. merge_condition_mask           CondMask = $11 & $12
  753. zero_slot_unmasked             $13 = 0
  754. copy_slot_masked               [test_no_op_mat4_X_scalar].result = Mask($13)
  755. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  756. load_condition_mask            CondMask = $11
  757. copy_slot_unmasked             $11 = scalar
  758. swizzle_4                      $11..14 = ($11..14).xxxx
  759. copy_4_slots_unmasked          $15..18 = $11..14
  760. copy_4_slots_unmasked          $19..22 = $15..18
  761. copy_4_slots_unmasked          $23..26 = $19..22
  762. copy_4_slots_unmasked          $27..30 = s(0..3)
  763. copy_4_slots_unmasked          $31..34 = s(4..7)
  764. copy_4_slots_unmasked          $35..38 = s(8..11)
  765. copy_4_slots_unmasked          $39..42 = s(12..15)
  766. div_n_floats                   $11..26 /= $27..42
  767. copy_4_slots_masked            m(0..3) = Mask($11..14)
  768. copy_4_slots_masked            m(4..7) = Mask($15..18)
  769. copy_4_slots_masked            m(8..11) = Mask($19..22)
  770. copy_4_slots_masked            m(12..15) = Mask($23..26)
  771. store_condition_mask           $11 = CondMask
  772. copy_4_slots_unmasked          $12..15 = m(0..3)
  773. copy_4_slots_unmasked          $16..19 = m(4..7)
  774. copy_4_slots_unmasked          $20..23 = m(8..11)
  775. copy_4_slots_unmasked          $24..27 = m(12..15)
  776. copy_4_slots_unmasked          $28..31 = scalar4
  777. copy_4_slots_unmasked          $32..35 = scalar4
  778. copy_4_slots_unmasked          $36..39 = scalar4
  779. copy_4_slots_unmasked          $40..43 = scalar4
  780. cmpne_n_floats                 $12..27 = notEqual($12..27, $28..43)
  781. bitwise_or_4_ints              $20..23 |= $24..27
  782. bitwise_or_4_ints              $16..19 |= $20..23
  783. bitwise_or_4_ints              $12..15 |= $16..19
  784. bitwise_or_2_ints              $12..13 |= $14..15
  785. bitwise_or_int                 $12 |= $13
  786. merge_condition_mask           CondMask = $11 & $12
  787. zero_slot_unmasked             $13 = 0
  788. copy_slot_masked               [test_no_op_mat4_X_scalar].result = Mask($13)
  789. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  790. load_condition_mask            CondMask = $11
  791. copy_slot_unmasked             $11 = scalar
  792. swizzle_4                      $11..14 = ($11..14).xxxx
  793. copy_4_slots_unmasked          $15..18 = $11..14
  794. copy_4_slots_unmasked          $19..22 = $15..18
  795. copy_4_slots_unmasked          $23..26 = $19..22
  796. copy_4_slots_unmasked          $27..30 = z(0..3)
  797. copy_4_slots_unmasked          $31..34 = z(4..7)
  798. copy_4_slots_unmasked          $35..38 = z(8..11)
  799. copy_4_slots_unmasked          $39..42 = z(12..15)
  800. add_n_floats                   $11..26 += $27..42
  801. copy_4_slots_masked            m(0..3) = Mask($11..14)
  802. copy_4_slots_masked            m(4..7) = Mask($15..18)
  803. copy_4_slots_masked            m(8..11) = Mask($19..22)
  804. copy_4_slots_masked            m(12..15) = Mask($23..26)
  805. copy_4_slots_unmasked          $11..14 = z(0..3)
  806. copy_4_slots_unmasked          $15..18 = z(4..7)
  807. copy_4_slots_unmasked          $19..22 = z(8..11)
  808. copy_4_slots_unmasked          $23..26 = z(12..15)
  809. copy_slot_unmasked             $27 = scalar
  810. swizzle_4                      $27..30 = ($27..30).xxxx
  811. copy_4_slots_unmasked          $31..34 = $27..30
  812. copy_4_slots_unmasked          $35..38 = $31..34
  813. copy_4_slots_unmasked          $39..42 = $35..38
  814. add_n_floats                   $11..26 += $27..42
  815. copy_4_slots_masked            m(0..3) = Mask($11..14)
  816. copy_4_slots_masked            m(4..7) = Mask($15..18)
  817. copy_4_slots_masked            m(8..11) = Mask($19..22)
  818. copy_4_slots_masked            m(12..15) = Mask($23..26)
  819. store_condition_mask           $11 = CondMask
  820. copy_4_slots_unmasked          $12..15 = m(0..3)
  821. copy_4_slots_unmasked          $16..19 = m(4..7)
  822. copy_4_slots_unmasked          $20..23 = m(8..11)
  823. copy_4_slots_unmasked          $24..27 = m(12..15)
  824. copy_4_slots_unmasked          $28..31 = scalar4
  825. copy_4_slots_unmasked          $32..35 = scalar4
  826. copy_4_slots_unmasked          $36..39 = scalar4
  827. copy_4_slots_unmasked          $40..43 = scalar4
  828. cmpne_n_floats                 $12..27 = notEqual($12..27, $28..43)
  829. bitwise_or_4_ints              $20..23 |= $24..27
  830. bitwise_or_4_ints              $16..19 |= $20..23
  831. bitwise_or_4_ints              $12..15 |= $16..19
  832. bitwise_or_2_ints              $12..13 |= $14..15
  833. bitwise_or_int                 $12 |= $13
  834. merge_condition_mask           CondMask = $11 & $12
  835. zero_slot_unmasked             $13 = 0
  836. copy_slot_masked               [test_no_op_mat4_X_scalar].result = Mask($13)
  837. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  838. load_condition_mask            CondMask = $11
  839. copy_slot_unmasked             $11 = scalar
  840. swizzle_4                      $11..14 = ($11..14).xxxx
  841. copy_4_slots_unmasked          $15..18 = $11..14
  842. copy_4_slots_unmasked          $19..22 = $15..18
  843. copy_4_slots_unmasked          $23..26 = $19..22
  844. copy_4_slots_unmasked          $27..30 = z(0..3)
  845. copy_4_slots_unmasked          $31..34 = z(4..7)
  846. copy_4_slots_unmasked          $35..38 = z(8..11)
  847. copy_4_slots_unmasked          $39..42 = z(12..15)
  848. sub_n_floats                   $11..26 -= $27..42
  849. copy_4_slots_masked            m(0..3) = Mask($11..14)
  850. copy_4_slots_masked            m(4..7) = Mask($15..18)
  851. copy_4_slots_masked            m(8..11) = Mask($19..22)
  852. copy_4_slots_masked            m(12..15) = Mask($23..26)
  853. copy_4_slots_unmasked          $11..14 = z(0..3)
  854. copy_4_slots_unmasked          $15..18 = z(4..7)
  855. copy_4_slots_unmasked          $19..22 = z(8..11)
  856. copy_4_slots_unmasked          $23..26 = z(12..15)
  857. copy_slot_unmasked             $27 = scalar
  858. swizzle_4                      $27..30 = ($27..30).xxxx
  859. copy_4_slots_unmasked          $31..34 = $27..30
  860. copy_4_slots_unmasked          $35..38 = $31..34
  861. copy_4_slots_unmasked          $39..42 = $35..38
  862. sub_n_floats                   $11..26 -= $27..42
  863. copy_4_slots_masked            m(0..3) = Mask($11..14)
  864. copy_4_slots_masked            m(4..7) = Mask($15..18)
  865. copy_4_slots_masked            m(8..11) = Mask($19..22)
  866. copy_4_slots_masked            m(12..15) = Mask($23..26)
  867. store_condition_mask           $11 = CondMask
  868. copy_4_slots_unmasked          $12..15 = m(0..3)
  869. copy_4_slots_unmasked          $16..19 = m(4..7)
  870. copy_4_slots_unmasked          $20..23 = m(8..11)
  871. copy_4_slots_unmasked          $24..27 = m(12..15)
  872. zero_4_slots_unmasked          $28..31 = 0
  873. zero_4_slots_unmasked          $32..35 = 0
  874. zero_4_slots_unmasked          $36..39 = 0
  875. zero_4_slots_unmasked          $40..43 = 0
  876. copy_4_slots_unmasked          $44..47 = scalar4
  877. copy_4_slots_unmasked          $48..51 = scalar4
  878. copy_4_slots_unmasked          $52..55 = scalar4
  879. copy_4_slots_unmasked          $56..59 = scalar4
  880. sub_n_floats                   $28..43 -= $44..59
  881. cmpne_n_floats                 $12..27 = notEqual($12..27, $28..43)
  882. bitwise_or_4_ints              $20..23 |= $24..27
  883. bitwise_or_4_ints              $16..19 |= $20..23
  884. bitwise_or_4_ints              $12..15 |= $16..19
  885. bitwise_or_2_ints              $12..13 |= $14..15
  886. bitwise_or_int                 $12 |= $13
  887. merge_condition_mask           CondMask = $11 & $12
  888. zero_slot_unmasked             $13 = 0
  889. copy_slot_masked               [test_no_op_mat4_X_scalar].result = Mask($13)
  890. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  891. load_condition_mask            CondMask = $11
  892. zero_2_slots_unmasked          $11..12 = 0
  893. shuffle                        $11..26 = ($11..26)[1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1]
  894. copy_4_slots_masked            mm(0..3) = Mask($11..14)
  895. copy_4_slots_masked            mm(4..7) = Mask($15..18)
  896. copy_4_slots_masked            mm(8..11) = Mask($19..22)
  897. copy_4_slots_masked            mm(12..15) = Mask($23..26)
  898. zero_2_slots_unmasked          $11..12 = 0
  899. shuffle                        $11..26 = ($11..26)[1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1]
  900. copy_4_slots_masked            mm(0..3) = Mask($11..14)
  901. copy_4_slots_masked            mm(4..7) = Mask($15..18)
  902. copy_4_slots_masked            mm(8..11) = Mask($19..22)
  903. copy_4_slots_masked            mm(12..15) = Mask($23..26)
  904. copy_4_slots_unmasked          $27..30 = z(0..3)
  905. copy_4_slots_unmasked          $31..34 = z(4..7)
  906. copy_4_slots_unmasked          $35..38 = z(8..11)
  907. copy_4_slots_unmasked          $39..42 = z(12..15)
  908. cmpeq_n_floats                 $11..26 = equal($11..26, $27..42)
  909. bitwise_and_4_ints             $19..22 &= $23..26
  910. bitwise_and_4_ints             $15..18 &= $19..22
  911. bitwise_and_4_ints             $11..14 &= $15..18
  912. bitwise_and_2_ints             $11..12 &= $13..14
  913. bitwise_and_int                $11 &= $12
  914. copy_slot_masked               [test_no_op_mat4_X_scalar].result = Mask($11)
  915. load_return_mask               RetMask = $10
  916. copy_slot_unmasked             $10 = [test_no_op_mat4_X_scalar].result
  917. copy_slot_masked               $9 = Mask($10)
  918. load_condition_mask            CondMask = $112
  919. copy_4_constants               $0..3 = colorRed
  920. merge_condition_mask           CondMask = $8 & $9
  921. copy_4_constants               $4..7 = colorGreen
  922. copy_4_slots_masked            $0..3 = Mask($4..7)
  923. load_condition_mask            CondMask = $8
  924. copy_4_slots_unmasked          [main].result = $0..3
  925. load_src                       src.rgba = [main].result
