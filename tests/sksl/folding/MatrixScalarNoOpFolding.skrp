    1. store_src_rg                   coords = src.rg
    2. init_lane_masks                CondMask = LoopMask = RetMask = true
    3. store_condition_mask           $8 = CondMask
    4. store_condition_mask           $112 = CondMask
    5. store_condition_mask           $143 = CondMask
    6. store_condition_mask           $60 = CondMask
    7. store_condition_mask           $174 = CondMask
    8. store_condition_mask           $159 = CondMask
    9. branch_if_no_active_lanes      branch_if_no_active_lanes +74 (label 0 at #83)
   10. store_return_mask              $160 = RetMask
   11. zero_4_slots_unmasked          m = 0
   12. zero_4_slots_unmasked          mm = 0
   13. zero_2_slots_unmasked          $161..162 = 0
   14. swizzle_4                      $161..164 = ($161..164).yxxy
   15. copy_4_slots_unmasked          z = $161..164
   16. copy_4_constants               $161..164 = testMatrix2x2
   17. copy_4_slots_masked            m = Mask($161..164)
   18. copy_4_constants               $161..164 = testMatrix2x2
   19. copy_4_slots_masked            m = Mask($161..164)
   20. store_condition_mask           $161 = CondMask
   21. copy_4_slots_unmasked          $162..165 = m
   22. copy_4_constants               $166..169 = testMatrix2x2
   23. cmpne_4_floats                 $162..165 = notEqual($162..165, $166..169)
   24. bitwise_or_2_ints              $162..163 |= $164..165
   25. bitwise_or_int                 $162 |= $163
   26. merge_condition_mask           CondMask = $161 & $162
   27. zero_slot_unmasked             $163 = 0
   28. copy_slot_masked               [test_no_op_scalar_X_mat2].result = Mask($163)
   29. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   30. load_condition_mask            CondMask = $161
   31. store_condition_mask           $161 = CondMask
   32. copy_4_slots_unmasked          $162..165 = m
   33. copy_4_constants               $166..169 = testMatrix2x2
   34. cmpne_4_floats                 $162..165 = notEqual($162..165, $166..169)
   35. bitwise_or_2_ints              $162..163 |= $164..165
   36. bitwise_or_int                 $162 |= $163
   37. merge_condition_mask           CondMask = $161 & $162
   38. zero_slot_unmasked             $163 = 0
   39. copy_slot_masked               [test_no_op_scalar_X_mat2].result = Mask($163)
   40. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   41. load_condition_mask            CondMask = $161
   42. store_condition_mask           $161 = CondMask
   43. copy_4_slots_unmasked          $162..165 = m
   44. copy_4_constants               $166..169 = testMatrix2x2
   45. cmpne_4_floats                 $162..165 = notEqual($162..165, $166..169)
   46. bitwise_or_2_ints              $162..163 |= $164..165
   47. bitwise_or_int                 $162 |= $163
   48. merge_condition_mask           CondMask = $161 & $162
   49. zero_slot_unmasked             $163 = 0
   50. copy_slot_masked               [test_no_op_scalar_X_mat2].result = Mask($163)
   51. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   52. load_condition_mask            CondMask = $161
   53. zero_4_slots_unmasked          $161..164 = 0
   54. copy_4_slots_unmasked          $165..168 = m
   55. sub_4_floats                   $161..164 -= $165..168
   56. copy_4_slots_masked            m = Mask($161..164)
   57. store_condition_mask           $161 = CondMask
   58. copy_4_slots_unmasked          $162..165 = m
   59. zero_4_slots_unmasked          $166..169 = 0
   60. copy_4_constants               $170..173 = testMatrix2x2
   61. sub_4_floats                   $166..169 -= $170..173
   62. cmpne_4_floats                 $162..165 = notEqual($162..165, $166..169)
   63. bitwise_or_2_ints              $162..163 |= $164..165
   64. bitwise_or_int                 $162 |= $163
   65. merge_condition_mask           CondMask = $161 & $162
   66. zero_slot_unmasked             $163 = 0
   67. copy_slot_masked               [test_no_op_scalar_X_mat2].result = Mask($163)
   68. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   69. load_condition_mask            CondMask = $161
   70. zero_2_slots_unmasked          $161..162 = 0
   71. swizzle_4                      $161..164 = ($161..164).yxxy
   72. copy_4_slots_masked            mm = Mask($161..164)
   73. zero_2_slots_unmasked          $161..162 = 0
   74. swizzle_4                      $161..164 = ($161..164).yxxy
   75. copy_4_slots_masked            mm = Mask($161..164)
   76. copy_4_slots_unmasked          $165..168 = z
   77. cmpeq_4_floats                 $161..164 = equal($161..164, $165..168)
   78. bitwise_and_2_ints             $161..162 &= $163..164
   79. bitwise_and_int                $161 &= $162
   80. copy_slot_masked               [test_no_op_scalar_X_mat2].result = Mask($161)
   81. load_return_mask               RetMask = $160
   82. copy_slot_unmasked             $160 = [test_no_op_scalar_X_mat2].result
   83. label                          label 0x00000000
   84. zero_slot_unmasked             $175 = 0
   85. merge_condition_mask           CondMask = $159 & $160
   86. branch_if_no_active_lanes      branch_if_no_active_lanes +129 (label 1 at #215)
   87. store_return_mask              $176 = RetMask
   88. zero_4_slots_unmasked          m₁(0..3) = 0
   89. zero_4_slots_unmasked          m₁(4..7) = 0
   90. zero_4_slots_unmasked          m₁(8), mm₁(0..2) = 0
   91. zero_4_slots_unmasked          mm₁(3..6) = 0
   92. zero_2_slots_unmasked          mm₁(7..8) = 0
   93. zero_2_slots_unmasked          $177..178 = 0
   94. shuffle                        $177..185 = ($177..185)[1 0 0 0 1 0 0 0 1]
   95. copy_4_slots_unmasked          z₁(0..3) = $177..180
   96. copy_4_slots_unmasked          z₁(4..7) = $181..184
   97. copy_slot_unmasked             z₁(8) = $185
   98. copy_4_constants               $177..180 = testMatrix3x3(0..3)
   99. copy_4_constants               $181..184 = testMatrix3x3(4..7)
  100. copy_constant                  $185 = testMatrix3x3(8)
  101. copy_4_slots_masked            m₁(0..3) = Mask($177..180)
  102. copy_4_slots_masked            m₁(4..7) = Mask($181..184)
  103. copy_slot_masked               m₁(8) = Mask($185)
  104. copy_4_constants               $177..180 = testMatrix3x3(0..3)
  105. copy_4_constants               $181..184 = testMatrix3x3(4..7)
  106. copy_constant                  $185 = testMatrix3x3(8)
  107. copy_4_slots_masked            m₁(0..3) = Mask($177..180)
  108. copy_4_slots_masked            m₁(4..7) = Mask($181..184)
  109. copy_slot_masked               m₁(8) = Mask($185)
  110. store_condition_mask           $177 = CondMask
  111. copy_4_slots_unmasked          $178..181 = m₁(0..3)
  112. copy_4_slots_unmasked          $182..185 = m₁(4..7)
  113. copy_slot_unmasked             $186 = m₁(8)
  114. copy_4_constants               $187..190 = testMatrix3x3(0..3)
  115. copy_4_constants               $191..194 = testMatrix3x3(4..7)
  116. copy_constant                  $195 = testMatrix3x3(8)
  117. cmpne_n_floats                 $178..186 = notEqual($178..186, $187..195)
  118. bitwise_or_4_ints              $179..182 |= $183..186
  119. bitwise_or_2_ints              $179..180 |= $181..182
  120. bitwise_or_int                 $179 |= $180
  121. bitwise_or_int                 $178 |= $179
  122. merge_condition_mask           CondMask = $177 & $178
  123. zero_slot_unmasked             $179 = 0
  124. copy_slot_masked               [test_no_op_scalar_X_mat3].result = Mask($179)
  125. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  126. load_condition_mask            CondMask = $177
  127. store_condition_mask           $177 = CondMask
  128. copy_4_slots_unmasked          $178..181 = m₁(0..3)
  129. copy_4_slots_unmasked          $182..185 = m₁(4..7)
  130. copy_slot_unmasked             $186 = m₁(8)
  131. copy_4_constants               $187..190 = testMatrix3x3(0..3)
  132. copy_4_constants               $191..194 = testMatrix3x3(4..7)
  133. copy_constant                  $195 = testMatrix3x3(8)
  134. cmpne_n_floats                 $178..186 = notEqual($178..186, $187..195)
  135. bitwise_or_4_ints              $179..182 |= $183..186
  136. bitwise_or_2_ints              $179..180 |= $181..182
  137. bitwise_or_int                 $179 |= $180
  138. bitwise_or_int                 $178 |= $179
  139. merge_condition_mask           CondMask = $177 & $178
  140. zero_slot_unmasked             $179 = 0
  141. copy_slot_masked               [test_no_op_scalar_X_mat3].result = Mask($179)
  142. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  143. load_condition_mask            CondMask = $177
  144. store_condition_mask           $177 = CondMask
  145. copy_4_slots_unmasked          $178..181 = m₁(0..3)
  146. copy_4_slots_unmasked          $182..185 = m₁(4..7)
  147. copy_slot_unmasked             $186 = m₁(8)
  148. copy_4_constants               $187..190 = testMatrix3x3(0..3)
  149. copy_4_constants               $191..194 = testMatrix3x3(4..7)
  150. copy_constant                  $195 = testMatrix3x3(8)
  151. cmpne_n_floats                 $178..186 = notEqual($178..186, $187..195)
  152. bitwise_or_4_ints              $179..182 |= $183..186
  153. bitwise_or_2_ints              $179..180 |= $181..182
  154. bitwise_or_int                 $179 |= $180
  155. bitwise_or_int                 $178 |= $179
  156. merge_condition_mask           CondMask = $177 & $178
  157. zero_slot_unmasked             $179 = 0
  158. copy_slot_masked               [test_no_op_scalar_X_mat3].result = Mask($179)
  159. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  160. load_condition_mask            CondMask = $177
  161. zero_4_slots_unmasked          $177..180 = 0
  162. zero_4_slots_unmasked          $181..184 = 0
  163. zero_slot_unmasked             $185 = 0
  164. copy_4_slots_unmasked          $186..189 = m₁(0..3)
  165. copy_4_slots_unmasked          $190..193 = m₁(4..7)
  166. copy_slot_unmasked             $194 = m₁(8)
  167. sub_n_floats                   $177..185 -= $186..194
  168. copy_4_slots_masked            m₁(0..3) = Mask($177..180)
  169. copy_4_slots_masked            m₁(4..7) = Mask($181..184)
  170. copy_slot_masked               m₁(8) = Mask($185)
  171. store_condition_mask           $177 = CondMask
  172. copy_4_slots_unmasked          $178..181 = m₁(0..3)
  173. copy_4_slots_unmasked          $182..185 = m₁(4..7)
  174. copy_slot_unmasked             $186 = m₁(8)
  175. zero_4_slots_unmasked          $187..190 = 0
  176. zero_4_slots_unmasked          $191..194 = 0
  177. zero_slot_unmasked             $195 = 0
  178. copy_4_constants               $196..199 = testMatrix3x3(0..3)
  179. copy_4_constants               $200..203 = testMatrix3x3(4..7)
  180. copy_constant                  $204 = testMatrix3x3(8)
  181. sub_n_floats                   $187..195 -= $196..204
  182. cmpne_n_floats                 $178..186 = notEqual($178..186, $187..195)
  183. bitwise_or_4_ints              $179..182 |= $183..186
  184. bitwise_or_2_ints              $179..180 |= $181..182
  185. bitwise_or_int                 $179 |= $180
  186. bitwise_or_int                 $178 |= $179
  187. merge_condition_mask           CondMask = $177 & $178
  188. zero_slot_unmasked             $179 = 0
  189. copy_slot_masked               [test_no_op_scalar_X_mat3].result = Mask($179)
  190. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  191. load_condition_mask            CondMask = $177
  192. zero_2_slots_unmasked          $177..178 = 0
  193. shuffle                        $177..185 = ($177..185)[1 0 0 0 1 0 0 0 1]
  194. copy_4_slots_masked            mm₁(0..3) = Mask($177..180)
  195. copy_4_slots_masked            mm₁(4..7) = Mask($181..184)
  196. copy_slot_masked               mm₁(8) = Mask($185)
  197. zero_2_slots_unmasked          $177..178 = 0
  198. shuffle                        $177..185 = ($177..185)[1 0 0 0 1 0 0 0 1]
  199. copy_4_slots_masked            mm₁(0..3) = Mask($177..180)
  200. copy_4_slots_masked            mm₁(4..7) = Mask($181..184)
  201. copy_slot_masked               mm₁(8) = Mask($185)
  202. copy_4_slots_unmasked          $186..189 = z₁(0..3)
  203. copy_4_slots_unmasked          $190..193 = z₁(4..7)
  204. copy_slot_unmasked             $194 = z₁(8)
  205. cmpeq_n_floats                 $177..185 = equal($177..185, $186..194)
  206. bitwise_and_4_ints             $178..181 &= $182..185
  207. bitwise_and_2_ints             $178..179 &= $180..181
  208. bitwise_and_int                $178 &= $179
  209. bitwise_and_int                $177 &= $178
  210. copy_slot_masked               [test_no_op_scalar_X_mat3].result = Mask($177)
  211. load_return_mask               RetMask = $176
  212. copy_slot_unmasked             $176 = [test_no_op_scalar_X_mat3].result
  213. label                          label 0x00000002
  214. copy_slot_masked               $175 = Mask($176)
  215. label                          label 0x00000001
  216. load_condition_mask            CondMask = $159
  217. zero_slot_unmasked             $61 = 0
  218. merge_condition_mask           CondMask = $174 & $175
  219. branch_if_no_active_lanes      branch_if_no_active_lanes +165 (label 3 at #384)
  220. store_return_mask              $62 = RetMask
  221. copy_4_constants               $63..66 = testInputs
  222. copy_4_constants               $67..70 = testInputs
  223. copy_4_constants               $71..74 = testInputs
  224. copy_4_constants               $75..78 = testInputs
  225. copy_4_slots_unmasked          testMatrix4x4(0..3) = $63..66
  226. copy_4_slots_unmasked          testMatrix4x4(4..7) = $67..70
  227. copy_4_slots_unmasked          testMatrix4x4(8..11) = $71..74
  228. copy_4_slots_unmasked          testMatrix4x4(12..15) = $75..78
  229. zero_4_slots_unmasked          m₂(0..3) = 0
  230. zero_4_slots_unmasked          m₂(4..7) = 0
  231. zero_4_slots_unmasked          m₂(8..11) = 0
  232. zero_4_slots_unmasked          m₂(12..15) = 0
  233. zero_4_slots_unmasked          mm₂(0..3) = 0
  234. zero_4_slots_unmasked          mm₂(4..7) = 0
  235. zero_4_slots_unmasked          mm₂(8..11) = 0
  236. zero_4_slots_unmasked          mm₂(12..15) = 0
  237. zero_2_slots_unmasked          $63..64 = 0
  238. shuffle                        $63..78 = ($63..78)[1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1]
  239. copy_4_slots_unmasked          z₂(0..3) = $63..66
  240. copy_4_slots_unmasked          z₂(4..7) = $67..70
  241. copy_4_slots_unmasked          z₂(8..11) = $71..74
  242. copy_4_slots_unmasked          z₂(12..15) = $75..78
  243. copy_4_slots_unmasked          $63..66 = testMatrix4x4(0..3)
  244. copy_4_slots_unmasked          $67..70 = testMatrix4x4(4..7)
  245. copy_4_slots_unmasked          $71..74 = testMatrix4x4(8..11)
  246. copy_4_slots_unmasked          $75..78 = testMatrix4x4(12..15)
  247. copy_4_slots_masked            m₂(0..3) = Mask($63..66)
  248. copy_4_slots_masked            m₂(4..7) = Mask($67..70)
  249. copy_4_slots_masked            m₂(8..11) = Mask($71..74)
  250. copy_4_slots_masked            m₂(12..15) = Mask($75..78)
  251. copy_4_slots_unmasked          $63..66 = testMatrix4x4(0..3)
  252. copy_4_slots_unmasked          $67..70 = testMatrix4x4(4..7)
  253. copy_4_slots_unmasked          $71..74 = testMatrix4x4(8..11)
  254. copy_4_slots_unmasked          $75..78 = testMatrix4x4(12..15)
  255. copy_4_slots_masked            m₂(0..3) = Mask($63..66)
  256. copy_4_slots_masked            m₂(4..7) = Mask($67..70)
  257. copy_4_slots_masked            m₂(8..11) = Mask($71..74)
  258. copy_4_slots_masked            m₂(12..15) = Mask($75..78)
  259. store_condition_mask           $63 = CondMask
  260. copy_4_slots_unmasked          $64..67 = m₂(0..3)
  261. copy_4_slots_unmasked          $68..71 = m₂(4..7)
  262. copy_4_slots_unmasked          $72..75 = m₂(8..11)
  263. copy_4_slots_unmasked          $76..79 = m₂(12..15)
  264. copy_4_slots_unmasked          $80..83 = testMatrix4x4(0..3)
  265. copy_4_slots_unmasked          $84..87 = testMatrix4x4(4..7)
  266. copy_4_slots_unmasked          $88..91 = testMatrix4x4(8..11)
  267. copy_4_slots_unmasked          $92..95 = testMatrix4x4(12..15)
  268. cmpne_n_floats                 $64..79 = notEqual($64..79, $80..95)
  269. bitwise_or_4_ints              $72..75 |= $76..79
  270. bitwise_or_4_ints              $68..71 |= $72..75
  271. bitwise_or_4_ints              $64..67 |= $68..71
  272. bitwise_or_2_ints              $64..65 |= $66..67
  273. bitwise_or_int                 $64 |= $65
  274. merge_condition_mask           CondMask = $63 & $64
  275. zero_slot_unmasked             $65 = 0
  276. copy_slot_masked               [test_no_op_scalar_X_mat4].result = Mask($65)
  277. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  278. load_condition_mask            CondMask = $63
  279. store_condition_mask           $63 = CondMask
  280. copy_4_slots_unmasked          $64..67 = m₂(0..3)
  281. copy_4_slots_unmasked          $68..71 = m₂(4..7)
  282. copy_4_slots_unmasked          $72..75 = m₂(8..11)
  283. copy_4_slots_unmasked          $76..79 = m₂(12..15)
  284. copy_4_slots_unmasked          $80..83 = testMatrix4x4(0..3)
  285. copy_4_slots_unmasked          $84..87 = testMatrix4x4(4..7)
  286. copy_4_slots_unmasked          $88..91 = testMatrix4x4(8..11)
  287. copy_4_slots_unmasked          $92..95 = testMatrix4x4(12..15)
  288. cmpne_n_floats                 $64..79 = notEqual($64..79, $80..95)
  289. bitwise_or_4_ints              $72..75 |= $76..79
  290. bitwise_or_4_ints              $68..71 |= $72..75
  291. bitwise_or_4_ints              $64..67 |= $68..71
  292. bitwise_or_2_ints              $64..65 |= $66..67
  293. bitwise_or_int                 $64 |= $65
  294. merge_condition_mask           CondMask = $63 & $64
  295. zero_slot_unmasked             $65 = 0
  296. copy_slot_masked               [test_no_op_scalar_X_mat4].result = Mask($65)
  297. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  298. load_condition_mask            CondMask = $63
  299. store_condition_mask           $63 = CondMask
  300. copy_4_slots_unmasked          $64..67 = m₂(0..3)
  301. copy_4_slots_unmasked          $68..71 = m₂(4..7)
  302. copy_4_slots_unmasked          $72..75 = m₂(8..11)
  303. copy_4_slots_unmasked          $76..79 = m₂(12..15)
  304. copy_4_slots_unmasked          $80..83 = testMatrix4x4(0..3)
  305. copy_4_slots_unmasked          $84..87 = testMatrix4x4(4..7)
  306. copy_4_slots_unmasked          $88..91 = testMatrix4x4(8..11)
  307. copy_4_slots_unmasked          $92..95 = testMatrix4x4(12..15)
  308. cmpne_n_floats                 $64..79 = notEqual($64..79, $80..95)
  309. bitwise_or_4_ints              $72..75 |= $76..79
  310. bitwise_or_4_ints              $68..71 |= $72..75
  311. bitwise_or_4_ints              $64..67 |= $68..71
  312. bitwise_or_2_ints              $64..65 |= $66..67
  313. bitwise_or_int                 $64 |= $65
  314. merge_condition_mask           CondMask = $63 & $64
  315. zero_slot_unmasked             $65 = 0
  316. copy_slot_masked               [test_no_op_scalar_X_mat4].result = Mask($65)
  317. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  318. load_condition_mask            CondMask = $63
  319. zero_4_slots_unmasked          $63..66 = 0
  320. zero_4_slots_unmasked          $67..70 = 0
  321. zero_4_slots_unmasked          $71..74 = 0
  322. zero_4_slots_unmasked          $75..78 = 0
  323. copy_4_slots_unmasked          $79..82 = m₂(0..3)
  324. copy_4_slots_unmasked          $83..86 = m₂(4..7)
  325. copy_4_slots_unmasked          $87..90 = m₂(8..11)
  326. copy_4_slots_unmasked          $91..94 = m₂(12..15)
  327. sub_n_floats                   $63..78 -= $79..94
  328. copy_4_slots_masked            m₂(0..3) = Mask($63..66)
  329. copy_4_slots_masked            m₂(4..7) = Mask($67..70)
  330. copy_4_slots_masked            m₂(8..11) = Mask($71..74)
  331. copy_4_slots_masked            m₂(12..15) = Mask($75..78)
  332. store_condition_mask           $63 = CondMask
  333. copy_4_slots_unmasked          $64..67 = m₂(0..3)
  334. copy_4_slots_unmasked          $68..71 = m₂(4..7)
  335. copy_4_slots_unmasked          $72..75 = m₂(8..11)
  336. copy_4_slots_unmasked          $76..79 = m₂(12..15)
  337. zero_4_slots_unmasked          $80..83 = 0
  338. zero_4_slots_unmasked          $84..87 = 0
  339. zero_4_slots_unmasked          $88..91 = 0
  340. zero_4_slots_unmasked          $92..95 = 0
  341. copy_4_slots_unmasked          $96..99 = testMatrix4x4(0..3)
  342. copy_4_slots_unmasked          $100..103 = testMatrix4x4(4..7)
  343. copy_4_slots_unmasked          $104..107 = testMatrix4x4(8..11)
  344. copy_4_slots_unmasked          $108..111 = testMatrix4x4(12..15)
  345. sub_n_floats                   $80..95 -= $96..111
  346. cmpne_n_floats                 $64..79 = notEqual($64..79, $80..95)
  347. bitwise_or_4_ints              $72..75 |= $76..79
  348. bitwise_or_4_ints              $68..71 |= $72..75
  349. bitwise_or_4_ints              $64..67 |= $68..71
  350. bitwise_or_2_ints              $64..65 |= $66..67
  351. bitwise_or_int                 $64 |= $65
  352. merge_condition_mask           CondMask = $63 & $64
  353. zero_slot_unmasked             $65 = 0
  354. copy_slot_masked               [test_no_op_scalar_X_mat4].result = Mask($65)
  355. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  356. load_condition_mask            CondMask = $63
  357. zero_2_slots_unmasked          $63..64 = 0
  358. shuffle                        $63..78 = ($63..78)[1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1]
  359. copy_4_slots_masked            mm₂(0..3) = Mask($63..66)
  360. copy_4_slots_masked            mm₂(4..7) = Mask($67..70)
  361. copy_4_slots_masked            mm₂(8..11) = Mask($71..74)
  362. copy_4_slots_masked            mm₂(12..15) = Mask($75..78)
  363. zero_2_slots_unmasked          $63..64 = 0
  364. shuffle                        $63..78 = ($63..78)[1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1]
  365. copy_4_slots_masked            mm₂(0..3) = Mask($63..66)
  366. copy_4_slots_masked            mm₂(4..7) = Mask($67..70)
  367. copy_4_slots_masked            mm₂(8..11) = Mask($71..74)
  368. copy_4_slots_masked            mm₂(12..15) = Mask($75..78)
  369. copy_4_slots_unmasked          $79..82 = z₂(0..3)
  370. copy_4_slots_unmasked          $83..86 = z₂(4..7)
  371. copy_4_slots_unmasked          $87..90 = z₂(8..11)
  372. copy_4_slots_unmasked          $91..94 = z₂(12..15)
  373. cmpeq_n_floats                 $63..78 = equal($63..78, $79..94)
  374. bitwise_and_4_ints             $71..74 &= $75..78
  375. bitwise_and_4_ints             $67..70 &= $71..74
  376. bitwise_and_4_ints             $63..66 &= $67..70
  377. bitwise_and_2_ints             $63..64 &= $65..66
  378. bitwise_and_int                $63 &= $64
  379. copy_slot_masked               [test_no_op_scalar_X_mat4].result = Mask($63)
  380. load_return_mask               RetMask = $62
  381. copy_slot_unmasked             $62 = [test_no_op_scalar_X_mat4].result
  382. label                          label 0x00000004
  383. copy_slot_masked               $61 = Mask($62)
  384. label                          label 0x00000003
  385. load_condition_mask            CondMask = $174
  386. zero_slot_unmasked             $144 = 0
  387. merge_condition_mask           CondMask = $60 & $61
  388. branch_if_no_active_lanes      branch_if_no_active_lanes +118 (label 5 at #506)
  389. store_return_mask              $145 = RetMask
  390. zero_4_slots_unmasked          m₃ = 0
  391. zero_4_slots_unmasked          mm₃ = 0
  392. zero_2_slots_unmasked          $146..147 = 0
  393. swizzle_4                      $146..149 = ($146..149).yxxy
  394. copy_4_slots_unmasked          z₃ = $146..149
  395. copy_constant                  $146 = 0x3F800000 (1.0)
  396. swizzle_4                      $146..149 = ($146..149).xxxx
  397. copy_4_slots_unmasked          s = $146..149
  398. copy_constant                  $146 = testInputs(0)
  399. copy_slot_unmasked             scalar = $146
  400. zero_slot_unmasked             $146 = 0
  401. copy_slot_unmasked             $147 = scalar
  402. swizzle_4                      $146..149 = ($146..149).yxxy
  403. copy_4_slots_masked            m₃ = Mask($146..149)
  404. zero_slot_unmasked             $146 = 0
  405. copy_slot_unmasked             $147 = scalar
  406. swizzle_4                      $146..149 = ($146..149).yxxy
  407. copy_4_slots_masked            m₃ = Mask($146..149)
  408. store_condition_mask           $146 = CondMask
  409. copy_4_slots_unmasked          $147..150 = m₃
  410. zero_slot_unmasked             $151 = 0
  411. copy_slot_unmasked             $152 = scalar
  412. swizzle_4                      $151..154 = ($151..154).yxxy
  413. cmpne_4_floats                 $147..150 = notEqual($147..150, $151..154)
  414. bitwise_or_2_ints              $147..148 |= $149..150
  415. bitwise_or_int                 $147 |= $148
  416. merge_condition_mask           CondMask = $146 & $147
  417. zero_slot_unmasked             $148 = 0
  418. copy_slot_masked               [test_no_op_mat2_X_scalar].result = Mask($148)
  419. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  420. load_condition_mask            CondMask = $146
  421. copy_slot_unmasked             $146 = scalar
  422. swizzle_4                      $146..149 = ($146..149).xxxx
  423. copy_4_slots_unmasked          $150..153 = s
  424. div_4_floats                   $146..149 /= $150..153
  425. copy_4_slots_masked            m₃ = Mask($146..149)
  426. store_condition_mask           $146 = CondMask
  427. copy_4_slots_unmasked          $147..150 = m₃
  428. copy_slot_unmasked             $151 = scalar
  429. copy_slot_unmasked             $152 = scalar
  430. copy_slot_unmasked             $153 = scalar
  431. copy_slot_unmasked             $154 = scalar
  432. cmpne_4_floats                 $147..150 = notEqual($147..150, $151..154)
  433. bitwise_or_2_ints              $147..148 |= $149..150
  434. bitwise_or_int                 $147 |= $148
  435. merge_condition_mask           CondMask = $146 & $147
  436. zero_slot_unmasked             $148 = 0
  437. copy_slot_masked               [test_no_op_mat2_X_scalar].result = Mask($148)
  438. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  439. load_condition_mask            CondMask = $146
  440. copy_slot_unmasked             $146 = scalar
  441. swizzle_4                      $146..149 = ($146..149).xxxx
  442. copy_4_slots_unmasked          $150..153 = z₃
  443. add_4_floats                   $146..149 += $150..153
  444. copy_4_slots_masked            m₃ = Mask($146..149)
  445. copy_4_slots_unmasked          $146..149 = z₃
  446. copy_slot_unmasked             $150 = scalar
  447. swizzle_4                      $150..153 = ($150..153).xxxx
  448. add_4_floats                   $146..149 += $150..153
  449. copy_4_slots_masked            m₃ = Mask($146..149)
  450. store_condition_mask           $146 = CondMask
  451. copy_4_slots_unmasked          $147..150 = m₃
  452. copy_slot_unmasked             $151 = scalar
  453. copy_slot_unmasked             $152 = scalar
  454. copy_slot_unmasked             $153 = scalar
  455. copy_slot_unmasked             $154 = scalar
  456. cmpne_4_floats                 $147..150 = notEqual($147..150, $151..154)
  457. bitwise_or_2_ints              $147..148 |= $149..150
  458. bitwise_or_int                 $147 |= $148
  459. merge_condition_mask           CondMask = $146 & $147
  460. zero_slot_unmasked             $148 = 0
  461. copy_slot_masked               [test_no_op_mat2_X_scalar].result = Mask($148)
  462. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  463. load_condition_mask            CondMask = $146
  464. copy_slot_unmasked             $146 = scalar
  465. swizzle_4                      $146..149 = ($146..149).xxxx
  466. copy_4_slots_unmasked          $150..153 = z₃
  467. sub_4_floats                   $146..149 -= $150..153
  468. copy_4_slots_masked            m₃ = Mask($146..149)
  469. copy_4_slots_unmasked          $146..149 = z₃
  470. copy_slot_unmasked             $150 = scalar
  471. swizzle_4                      $150..153 = ($150..153).xxxx
  472. sub_4_floats                   $146..149 -= $150..153
  473. copy_4_slots_masked            m₃ = Mask($146..149)
  474. store_condition_mask           $146 = CondMask
  475. copy_4_slots_unmasked          $147..150 = m₃
  476. zero_4_slots_unmasked          $151..154 = 0
  477. copy_slot_unmasked             $155 = scalar
  478. copy_slot_unmasked             $156 = scalar
  479. copy_slot_unmasked             $157 = scalar
  480. copy_slot_unmasked             $158 = scalar
  481. sub_4_floats                   $151..154 -= $155..158
  482. cmpne_4_floats                 $147..150 = notEqual($147..150, $151..154)
  483. bitwise_or_2_ints              $147..148 |= $149..150
  484. bitwise_or_int                 $147 |= $148
  485. merge_condition_mask           CondMask = $146 & $147
  486. zero_slot_unmasked             $148 = 0
  487. copy_slot_masked               [test_no_op_mat2_X_scalar].result = Mask($148)
  488. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  489. load_condition_mask            CondMask = $146
  490. zero_2_slots_unmasked          $146..147 = 0
  491. swizzle_4                      $146..149 = ($146..149).yxxy
  492. copy_4_slots_masked            mm₃ = Mask($146..149)
  493. zero_2_slots_unmasked          $146..147 = 0
  494. swizzle_4                      $146..149 = ($146..149).yxxy
  495. copy_4_slots_masked            mm₃ = Mask($146..149)
  496. copy_4_slots_unmasked          $150..153 = z₃
  497. cmpeq_4_floats                 $146..149 = equal($146..149, $150..153)
  498. bitwise_and_2_ints             $146..147 &= $148..149
  499. bitwise_and_int                $146 &= $147
  500. copy_slot_masked               [test_no_op_mat2_X_scalar].result = Mask($146)
  501. load_return_mask               RetMask = $145
  502. stack_rewind
  503. copy_slot_unmasked             $145 = [test_no_op_mat2_X_scalar].result
  504. label                          label 0x00000006
  505. copy_slot_masked               $144 = Mask($145)
  506. label                          label 0x00000005
  507. load_condition_mask            CondMask = $60
  508. zero_slot_unmasked             $113 = 0
  509. merge_condition_mask           CondMask = $143 & $144
  510. branch_if_no_active_lanes      branch_if_no_active_lanes +187 (label 7 at #697)
  511. store_return_mask              $114 = RetMask
  512. zero_4_slots_unmasked          m₄(0..3) = 0
  513. zero_4_slots_unmasked          m₄(4..7) = 0
  514. zero_4_slots_unmasked          m₄(8), mm₄(0..2) = 0
  515. zero_4_slots_unmasked          mm₄(3..6) = 0
  516. zero_2_slots_unmasked          mm₄(7..8) = 0
  517. zero_2_slots_unmasked          $115..116 = 0
  518. shuffle                        $115..123 = ($115..123)[1 0 0 0 1 0 0 0 1]
  519. copy_4_slots_unmasked          z₄(0..3) = $115..118
  520. copy_4_slots_unmasked          z₄(4..7) = $119..122
  521. copy_slot_unmasked             z₄(8) = $123
  522. copy_constant                  $115 = 0x3F800000 (1.0)
  523. swizzle_3                      $115..117 = ($115..117).xxx
  524. copy_constant                  $118 = 0x3F800000 (1.0)
  525. swizzle_3                      $118..120 = ($118..120).xxx
  526. copy_constant                  $121 = 0x3F800000 (1.0)
  527. swizzle_3                      $121..123 = ($121..123).xxx
  528. copy_4_slots_unmasked          s₁(0..3) = $115..118
  529. copy_4_slots_unmasked          s₁(4..7) = $119..122
  530. copy_slot_unmasked             s₁(8) = $123
  531. copy_constant                  $115 = testInputs(0)
  532. copy_slot_unmasked             scalar₁ = $115
  533. swizzle_3                      $115..117 = ($115..117).xxx
  534. copy_3_slots_unmasked          scalar3 = $115..117
  535. zero_slot_unmasked             $115 = 0
  536. copy_slot_unmasked             $116 = scalar₁
  537. shuffle                        $115..123 = ($115..123)[1 0 0 0 1 0 0 0 1]
  538. copy_4_slots_masked            m₄(0..3) = Mask($115..118)
  539. copy_4_slots_masked            m₄(4..7) = Mask($119..122)
  540. copy_slot_masked               m₄(8) = Mask($123)
  541. zero_slot_unmasked             $115 = 0
  542. copy_slot_unmasked             $116 = scalar₁
  543. shuffle                        $115..123 = ($115..123)[1 0 0 0 1 0 0 0 1]
  544. copy_4_slots_masked            m₄(0..3) = Mask($115..118)
  545. copy_4_slots_masked            m₄(4..7) = Mask($119..122)
  546. copy_slot_masked               m₄(8) = Mask($123)
  547. store_condition_mask           $115 = CondMask
  548. copy_4_slots_unmasked          $116..119 = m₄(0..3)
  549. copy_4_slots_unmasked          $120..123 = m₄(4..7)
  550. copy_slot_unmasked             $124 = m₄(8)
  551. zero_slot_unmasked             $125 = 0
  552. copy_slot_unmasked             $126 = scalar₁
  553. shuffle                        $125..133 = ($125..133)[1 0 0 0 1 0 0 0 1]
  554. cmpne_n_floats                 $116..124 = notEqual($116..124, $125..133)
  555. bitwise_or_4_ints              $117..120 |= $121..124
  556. bitwise_or_2_ints              $117..118 |= $119..120
  557. bitwise_or_int                 $117 |= $118
  558. bitwise_or_int                 $116 |= $117
  559. merge_condition_mask           CondMask = $115 & $116
  560. zero_slot_unmasked             $117 = 0
  561. copy_slot_masked               [test_no_op_mat3_X_scalar].result = Mask($117)
  562. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  563. load_condition_mask            CondMask = $115
  564. copy_slot_unmasked             $115 = scalar₁
  565. swizzle_4                      $115..118 = ($115..118).xxxx
  566. copy_4_slots_unmasked          $119..122 = $115..118
  567. copy_slot_unmasked             $123 = $122
  568. copy_4_slots_unmasked          $124..127 = s₁(0..3)
  569. copy_4_slots_unmasked          $128..131 = s₁(4..7)
  570. copy_slot_unmasked             $132 = s₁(8)
  571. div_n_floats                   $115..123 /= $124..132
  572. copy_4_slots_masked            m₄(0..3) = Mask($115..118)
  573. copy_4_slots_masked            m₄(4..7) = Mask($119..122)
  574. copy_slot_masked               m₄(8) = Mask($123)
  575. store_condition_mask           $115 = CondMask
  576. copy_4_slots_unmasked          $116..119 = m₄(0..3)
  577. copy_4_slots_unmasked          $120..123 = m₄(4..7)
  578. copy_slot_unmasked             $124 = m₄(8)
  579. copy_3_slots_unmasked          $125..127 = scalar3
  580. copy_3_slots_unmasked          $128..130 = scalar3
  581. copy_3_slots_unmasked          $131..133 = scalar3
  582. cmpne_n_floats                 $116..124 = notEqual($116..124, $125..133)
  583. bitwise_or_4_ints              $117..120 |= $121..124
  584. bitwise_or_2_ints              $117..118 |= $119..120
  585. bitwise_or_int                 $117 |= $118
  586. bitwise_or_int                 $116 |= $117
  587. merge_condition_mask           CondMask = $115 & $116
  588. zero_slot_unmasked             $117 = 0
  589. copy_slot_masked               [test_no_op_mat3_X_scalar].result = Mask($117)
  590. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  591. load_condition_mask            CondMask = $115
  592. copy_slot_unmasked             $115 = scalar₁
  593. swizzle_4                      $115..118 = ($115..118).xxxx
  594. copy_4_slots_unmasked          $119..122 = $115..118
  595. copy_slot_unmasked             $123 = $122
  596. copy_4_slots_unmasked          $124..127 = z₄(0..3)
  597. copy_4_slots_unmasked          $128..131 = z₄(4..7)
  598. copy_slot_unmasked             $132 = z₄(8)
  599. add_n_floats                   $115..123 += $124..132
  600. copy_4_slots_masked            m₄(0..3) = Mask($115..118)
  601. copy_4_slots_masked            m₄(4..7) = Mask($119..122)
  602. copy_slot_masked               m₄(8) = Mask($123)
  603. copy_4_slots_unmasked          $115..118 = z₄(0..3)
  604. copy_4_slots_unmasked          $119..122 = z₄(4..7)
  605. copy_slot_unmasked             $123 = z₄(8)
  606. copy_slot_unmasked             $124 = scalar₁
  607. swizzle_4                      $124..127 = ($124..127).xxxx
  608. copy_4_slots_unmasked          $128..131 = $124..127
  609. copy_slot_unmasked             $132 = $131
  610. add_n_floats                   $115..123 += $124..132
  611. copy_4_slots_masked            m₄(0..3) = Mask($115..118)
  612. copy_4_slots_masked            m₄(4..7) = Mask($119..122)
  613. copy_slot_masked               m₄(8) = Mask($123)
  614. store_condition_mask           $115 = CondMask
  615. copy_4_slots_unmasked          $116..119 = m₄(0..3)
  616. copy_4_slots_unmasked          $120..123 = m₄(4..7)
  617. copy_slot_unmasked             $124 = m₄(8)
  618. copy_3_slots_unmasked          $125..127 = scalar3
  619. copy_3_slots_unmasked          $128..130 = scalar3
  620. copy_3_slots_unmasked          $131..133 = scalar3
  621. cmpne_n_floats                 $116..124 = notEqual($116..124, $125..133)
  622. bitwise_or_4_ints              $117..120 |= $121..124
  623. bitwise_or_2_ints              $117..118 |= $119..120
  624. bitwise_or_int                 $117 |= $118
  625. bitwise_or_int                 $116 |= $117
  626. merge_condition_mask           CondMask = $115 & $116
  627. zero_slot_unmasked             $117 = 0
  628. copy_slot_masked               [test_no_op_mat3_X_scalar].result = Mask($117)
  629. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  630. load_condition_mask            CondMask = $115
  631. copy_slot_unmasked             $115 = scalar₁
  632. swizzle_4                      $115..118 = ($115..118).xxxx
  633. copy_4_slots_unmasked          $119..122 = $115..118
  634. copy_slot_unmasked             $123 = $122
  635. copy_4_slots_unmasked          $124..127 = z₄(0..3)
  636. copy_4_slots_unmasked          $128..131 = z₄(4..7)
  637. copy_slot_unmasked             $132 = z₄(8)
  638. sub_n_floats                   $115..123 -= $124..132
  639. copy_4_slots_masked            m₄(0..3) = Mask($115..118)
  640. copy_4_slots_masked            m₄(4..7) = Mask($119..122)
  641. copy_slot_masked               m₄(8) = Mask($123)
  642. copy_4_slots_unmasked          $115..118 = z₄(0..3)
  643. copy_4_slots_unmasked          $119..122 = z₄(4..7)
  644. copy_slot_unmasked             $123 = z₄(8)
  645. copy_slot_unmasked             $124 = scalar₁
  646. swizzle_4                      $124..127 = ($124..127).xxxx
  647. copy_4_slots_unmasked          $128..131 = $124..127
  648. copy_slot_unmasked             $132 = $131
  649. sub_n_floats                   $115..123 -= $124..132
  650. copy_4_slots_masked            m₄(0..3) = Mask($115..118)
  651. copy_4_slots_masked            m₄(4..7) = Mask($119..122)
  652. copy_slot_masked               m₄(8) = Mask($123)
  653. store_condition_mask           $115 = CondMask
  654. copy_4_slots_unmasked          $116..119 = m₄(0..3)
  655. copy_4_slots_unmasked          $120..123 = m₄(4..7)
  656. copy_slot_unmasked             $124 = m₄(8)
  657. zero_4_slots_unmasked          $125..128 = 0
  658. zero_4_slots_unmasked          $129..132 = 0
  659. zero_slot_unmasked             $133 = 0
  660. copy_3_slots_unmasked          $134..136 = scalar3
  661. copy_3_slots_unmasked          $137..139 = scalar3
  662. copy_3_slots_unmasked          $140..142 = scalar3
  663. sub_n_floats                   $125..133 -= $134..142
  664. cmpne_n_floats                 $116..124 = notEqual($116..124, $125..133)
  665. bitwise_or_4_ints              $117..120 |= $121..124
  666. bitwise_or_2_ints              $117..118 |= $119..120
  667. bitwise_or_int                 $117 |= $118
  668. bitwise_or_int                 $116 |= $117
  669. merge_condition_mask           CondMask = $115 & $116
  670. zero_slot_unmasked             $117 = 0
  671. copy_slot_masked               [test_no_op_mat3_X_scalar].result = Mask($117)
  672. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  673. load_condition_mask            CondMask = $115
  674. zero_2_slots_unmasked          $115..116 = 0
  675. shuffle                        $115..123 = ($115..123)[1 0 0 0 1 0 0 0 1]
  676. copy_4_slots_masked            mm₄(0..3) = Mask($115..118)
  677. copy_4_slots_masked            mm₄(4..7) = Mask($119..122)
  678. copy_slot_masked               mm₄(8) = Mask($123)
  679. zero_2_slots_unmasked          $115..116 = 0
  680. shuffle                        $115..123 = ($115..123)[1 0 0 0 1 0 0 0 1]
  681. copy_4_slots_masked            mm₄(0..3) = Mask($115..118)
  682. copy_4_slots_masked            mm₄(4..7) = Mask($119..122)
  683. copy_slot_masked               mm₄(8) = Mask($123)
  684. copy_4_slots_unmasked          $124..127 = z₄(0..3)
  685. copy_4_slots_unmasked          $128..131 = z₄(4..7)
  686. copy_slot_unmasked             $132 = z₄(8)
  687. cmpeq_n_floats                 $115..123 = equal($115..123, $124..132)
  688. bitwise_and_4_ints             $116..119 &= $120..123
  689. bitwise_and_2_ints             $116..117 &= $118..119
  690. bitwise_and_int                $116 &= $117
  691. bitwise_and_int                $115 &= $116
  692. copy_slot_masked               [test_no_op_mat3_X_scalar].result = Mask($115)
  693. load_return_mask               RetMask = $114
  694. copy_slot_unmasked             $114 = [test_no_op_mat3_X_scalar].result
  695. label                          label 0x00000008
  696. copy_slot_masked               $113 = Mask($114)
  697. label                          label 0x00000007
  698. load_condition_mask            CondMask = $143
  699. zero_slot_unmasked             $9 = 0
  700. merge_condition_mask           CondMask = $112 & $113
  701. branch_if_no_active_lanes      branch_if_no_active_lanes +227 (label 9 at #928)
  702. store_return_mask              $10 = RetMask
  703. zero_4_slots_unmasked          m₅(0..3) = 0
  704. zero_4_slots_unmasked          m₅(4..7) = 0
  705. zero_4_slots_unmasked          m₅(8..11) = 0
  706. zero_4_slots_unmasked          m₅(12..15) = 0
  707. zero_4_slots_unmasked          mm₅(0..3) = 0
  708. zero_4_slots_unmasked          mm₅(4..7) = 0
  709. zero_4_slots_unmasked          mm₅(8..11) = 0
  710. zero_4_slots_unmasked          mm₅(12..15) = 0
  711. zero_2_slots_unmasked          $11..12 = 0
  712. shuffle                        $11..26 = ($11..26)[1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1]
  713. copy_4_slots_unmasked          z₅(0..3) = $11..14
  714. copy_4_slots_unmasked          z₅(4..7) = $15..18
  715. copy_4_slots_unmasked          z₅(8..11) = $19..22
  716. copy_4_slots_unmasked          z₅(12..15) = $23..26
  717. copy_constant                  $11 = 0x3F800000 (1.0)
  718. swizzle_4                      $11..14 = ($11..14).xxxx
  719. copy_constant                  $15 = 0x3F800000 (1.0)
  720. swizzle_4                      $15..18 = ($15..18).xxxx
  721. copy_constant                  $19 = 0x3F800000 (1.0)
  722. swizzle_4                      $19..22 = ($19..22).xxxx
  723. copy_constant                  $23 = 0x3F800000 (1.0)
  724. swizzle_4                      $23..26 = ($23..26).xxxx
  725. copy_4_slots_unmasked          s₂(0..3) = $11..14
  726. copy_4_slots_unmasked          s₂(4..7) = $15..18
  727. copy_4_slots_unmasked          s₂(8..11) = $19..22
  728. copy_4_slots_unmasked          s₂(12..15) = $23..26
  729. copy_constant                  $11 = testInputs(0)
  730. copy_slot_unmasked             scalar₂ = $11
  731. swizzle_4                      $11..14 = ($11..14).xxxx
  732. copy_4_slots_unmasked          scalar4 = $11..14
  733. zero_slot_unmasked             $11 = 0
  734. copy_slot_unmasked             $12 = scalar₂
  735. shuffle                        $11..26 = ($11..26)[1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1]
  736. copy_4_slots_masked            m₅(0..3) = Mask($11..14)
  737. copy_4_slots_masked            m₅(4..7) = Mask($15..18)
  738. copy_4_slots_masked            m₅(8..11) = Mask($19..22)
  739. copy_4_slots_masked            m₅(12..15) = Mask($23..26)
  740. zero_slot_unmasked             $11 = 0
  741. copy_slot_unmasked             $12 = scalar₂
  742. shuffle                        $11..26 = ($11..26)[1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1]
  743. copy_4_slots_masked            m₅(0..3) = Mask($11..14)
  744. copy_4_slots_masked            m₅(4..7) = Mask($15..18)
  745. copy_4_slots_masked            m₅(8..11) = Mask($19..22)
  746. copy_4_slots_masked            m₅(12..15) = Mask($23..26)
  747. store_condition_mask           $11 = CondMask
  748. copy_4_slots_unmasked          $12..15 = m₅(0..3)
  749. copy_4_slots_unmasked          $16..19 = m₅(4..7)
  750. copy_4_slots_unmasked          $20..23 = m₅(8..11)
  751. copy_4_slots_unmasked          $24..27 = m₅(12..15)
  752. zero_slot_unmasked             $28 = 0
  753. copy_slot_unmasked             $29 = scalar₂
  754. shuffle                        $28..43 = ($28..43)[1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1]
  755. cmpne_n_floats                 $12..27 = notEqual($12..27, $28..43)
  756. bitwise_or_4_ints              $20..23 |= $24..27
  757. bitwise_or_4_ints              $16..19 |= $20..23
  758. bitwise_or_4_ints              $12..15 |= $16..19
  759. bitwise_or_2_ints              $12..13 |= $14..15
  760. bitwise_or_int                 $12 |= $13
  761. merge_condition_mask           CondMask = $11 & $12
  762. zero_slot_unmasked             $13 = 0
  763. copy_slot_masked               [test_no_op_mat4_X_scalar].result = Mask($13)
  764. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  765. load_condition_mask            CondMask = $11
  766. copy_slot_unmasked             $11 = scalar₂
  767. swizzle_4                      $11..14 = ($11..14).xxxx
  768. copy_4_slots_unmasked          $15..18 = $11..14
  769. copy_4_slots_unmasked          $19..22 = $15..18
  770. copy_4_slots_unmasked          $23..26 = $19..22
  771. copy_4_slots_unmasked          $27..30 = s₂(0..3)
  772. copy_4_slots_unmasked          $31..34 = s₂(4..7)
  773. copy_4_slots_unmasked          $35..38 = s₂(8..11)
  774. copy_4_slots_unmasked          $39..42 = s₂(12..15)
  775. div_n_floats                   $11..26 /= $27..42
  776. copy_4_slots_masked            m₅(0..3) = Mask($11..14)
  777. copy_4_slots_masked            m₅(4..7) = Mask($15..18)
  778. copy_4_slots_masked            m₅(8..11) = Mask($19..22)
  779. copy_4_slots_masked            m₅(12..15) = Mask($23..26)
  780. store_condition_mask           $11 = CondMask
  781. copy_4_slots_unmasked          $12..15 = m₅(0..3)
  782. copy_4_slots_unmasked          $16..19 = m₅(4..7)
  783. copy_4_slots_unmasked          $20..23 = m₅(8..11)
  784. copy_4_slots_unmasked          $24..27 = m₅(12..15)
  785. copy_4_slots_unmasked          $28..31 = scalar4
  786. copy_4_slots_unmasked          $32..35 = scalar4
  787. copy_4_slots_unmasked          $36..39 = scalar4
  788. copy_4_slots_unmasked          $40..43 = scalar4
  789. cmpne_n_floats                 $12..27 = notEqual($12..27, $28..43)
  790. bitwise_or_4_ints              $20..23 |= $24..27
  791. bitwise_or_4_ints              $16..19 |= $20..23
  792. bitwise_or_4_ints              $12..15 |= $16..19
  793. bitwise_or_2_ints              $12..13 |= $14..15
  794. bitwise_or_int                 $12 |= $13
  795. merge_condition_mask           CondMask = $11 & $12
  796. zero_slot_unmasked             $13 = 0
  797. copy_slot_masked               [test_no_op_mat4_X_scalar].result = Mask($13)
  798. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  799. load_condition_mask            CondMask = $11
  800. copy_slot_unmasked             $11 = scalar₂
  801. swizzle_4                      $11..14 = ($11..14).xxxx
  802. copy_4_slots_unmasked          $15..18 = $11..14
  803. copy_4_slots_unmasked          $19..22 = $15..18
  804. copy_4_slots_unmasked          $23..26 = $19..22
  805. copy_4_slots_unmasked          $27..30 = z₅(0..3)
  806. copy_4_slots_unmasked          $31..34 = z₅(4..7)
  807. copy_4_slots_unmasked          $35..38 = z₅(8..11)
  808. copy_4_slots_unmasked          $39..42 = z₅(12..15)
  809. add_n_floats                   $11..26 += $27..42
  810. copy_4_slots_masked            m₅(0..3) = Mask($11..14)
  811. copy_4_slots_masked            m₅(4..7) = Mask($15..18)
  812. copy_4_slots_masked            m₅(8..11) = Mask($19..22)
  813. copy_4_slots_masked            m₅(12..15) = Mask($23..26)
  814. copy_4_slots_unmasked          $11..14 = z₅(0..3)
  815. copy_4_slots_unmasked          $15..18 = z₅(4..7)
  816. copy_4_slots_unmasked          $19..22 = z₅(8..11)
  817. copy_4_slots_unmasked          $23..26 = z₅(12..15)
  818. copy_slot_unmasked             $27 = scalar₂
  819. swizzle_4                      $27..30 = ($27..30).xxxx
  820. copy_4_slots_unmasked          $31..34 = $27..30
  821. copy_4_slots_unmasked          $35..38 = $31..34
  822. copy_4_slots_unmasked          $39..42 = $35..38
  823. add_n_floats                   $11..26 += $27..42
  824. copy_4_slots_masked            m₅(0..3) = Mask($11..14)
  825. copy_4_slots_masked            m₅(4..7) = Mask($15..18)
  826. copy_4_slots_masked            m₅(8..11) = Mask($19..22)
  827. copy_4_slots_masked            m₅(12..15) = Mask($23..26)
  828. store_condition_mask           $11 = CondMask
  829. copy_4_slots_unmasked          $12..15 = m₅(0..3)
  830. copy_4_slots_unmasked          $16..19 = m₅(4..7)
  831. copy_4_slots_unmasked          $20..23 = m₅(8..11)
  832. copy_4_slots_unmasked          $24..27 = m₅(12..15)
  833. copy_4_slots_unmasked          $28..31 = scalar4
  834. copy_4_slots_unmasked          $32..35 = scalar4
  835. copy_4_slots_unmasked          $36..39 = scalar4
  836. copy_4_slots_unmasked          $40..43 = scalar4
  837. cmpne_n_floats                 $12..27 = notEqual($12..27, $28..43)
  838. bitwise_or_4_ints              $20..23 |= $24..27
  839. bitwise_or_4_ints              $16..19 |= $20..23
  840. bitwise_or_4_ints              $12..15 |= $16..19
  841. bitwise_or_2_ints              $12..13 |= $14..15
  842. bitwise_or_int                 $12 |= $13
  843. merge_condition_mask           CondMask = $11 & $12
  844. zero_slot_unmasked             $13 = 0
  845. copy_slot_masked               [test_no_op_mat4_X_scalar].result = Mask($13)
  846. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  847. load_condition_mask            CondMask = $11
  848. copy_slot_unmasked             $11 = scalar₂
  849. swizzle_4                      $11..14 = ($11..14).xxxx
  850. copy_4_slots_unmasked          $15..18 = $11..14
  851. copy_4_slots_unmasked          $19..22 = $15..18
  852. copy_4_slots_unmasked          $23..26 = $19..22
  853. copy_4_slots_unmasked          $27..30 = z₅(0..3)
  854. copy_4_slots_unmasked          $31..34 = z₅(4..7)
  855. copy_4_slots_unmasked          $35..38 = z₅(8..11)
  856. copy_4_slots_unmasked          $39..42 = z₅(12..15)
  857. sub_n_floats                   $11..26 -= $27..42
  858. copy_4_slots_masked            m₅(0..3) = Mask($11..14)
  859. copy_4_slots_masked            m₅(4..7) = Mask($15..18)
  860. copy_4_slots_masked            m₅(8..11) = Mask($19..22)
  861. copy_4_slots_masked            m₅(12..15) = Mask($23..26)
  862. copy_4_slots_unmasked          $11..14 = z₅(0..3)
  863. copy_4_slots_unmasked          $15..18 = z₅(4..7)
  864. copy_4_slots_unmasked          $19..22 = z₅(8..11)
  865. copy_4_slots_unmasked          $23..26 = z₅(12..15)
  866. copy_slot_unmasked             $27 = scalar₂
  867. swizzle_4                      $27..30 = ($27..30).xxxx
  868. copy_4_slots_unmasked          $31..34 = $27..30
  869. copy_4_slots_unmasked          $35..38 = $31..34
  870. copy_4_slots_unmasked          $39..42 = $35..38
  871. sub_n_floats                   $11..26 -= $27..42
  872. copy_4_slots_masked            m₅(0..3) = Mask($11..14)
  873. copy_4_slots_masked            m₅(4..7) = Mask($15..18)
  874. copy_4_slots_masked            m₅(8..11) = Mask($19..22)
  875. copy_4_slots_masked            m₅(12..15) = Mask($23..26)
  876. store_condition_mask           $11 = CondMask
  877. copy_4_slots_unmasked          $12..15 = m₅(0..3)
  878. copy_4_slots_unmasked          $16..19 = m₅(4..7)
  879. copy_4_slots_unmasked          $20..23 = m₅(8..11)
  880. copy_4_slots_unmasked          $24..27 = m₅(12..15)
  881. zero_4_slots_unmasked          $28..31 = 0
  882. zero_4_slots_unmasked          $32..35 = 0
  883. zero_4_slots_unmasked          $36..39 = 0
  884. zero_4_slots_unmasked          $40..43 = 0
  885. copy_4_slots_unmasked          $44..47 = scalar4
  886. copy_4_slots_unmasked          $48..51 = scalar4
  887. copy_4_slots_unmasked          $52..55 = scalar4
  888. copy_4_slots_unmasked          $56..59 = scalar4
  889. sub_n_floats                   $28..43 -= $44..59
  890. cmpne_n_floats                 $12..27 = notEqual($12..27, $28..43)
  891. bitwise_or_4_ints              $20..23 |= $24..27
  892. bitwise_or_4_ints              $16..19 |= $20..23
  893. bitwise_or_4_ints              $12..15 |= $16..19
  894. bitwise_or_2_ints              $12..13 |= $14..15
  895. bitwise_or_int                 $12 |= $13
  896. merge_condition_mask           CondMask = $11 & $12
  897. zero_slot_unmasked             $13 = 0
  898. copy_slot_masked               [test_no_op_mat4_X_scalar].result = Mask($13)
  899. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  900. load_condition_mask            CondMask = $11
  901. zero_2_slots_unmasked          $11..12 = 0
  902. shuffle                        $11..26 = ($11..26)[1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1]
  903. copy_4_slots_masked            mm₅(0..3) = Mask($11..14)
  904. copy_4_slots_masked            mm₅(4..7) = Mask($15..18)
  905. copy_4_slots_masked            mm₅(8..11) = Mask($19..22)
  906. copy_4_slots_masked            mm₅(12..15) = Mask($23..26)
  907. zero_2_slots_unmasked          $11..12 = 0
  908. shuffle                        $11..26 = ($11..26)[1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1]
  909. copy_4_slots_masked            mm₅(0..3) = Mask($11..14)
  910. copy_4_slots_masked            mm₅(4..7) = Mask($15..18)
  911. copy_4_slots_masked            mm₅(8..11) = Mask($19..22)
  912. copy_4_slots_masked            mm₅(12..15) = Mask($23..26)
  913. copy_4_slots_unmasked          $27..30 = z₅(0..3)
  914. copy_4_slots_unmasked          $31..34 = z₅(4..7)
  915. copy_4_slots_unmasked          $35..38 = z₅(8..11)
  916. copy_4_slots_unmasked          $39..42 = z₅(12..15)
  917. cmpeq_n_floats                 $11..26 = equal($11..26, $27..42)
  918. bitwise_and_4_ints             $19..22 &= $23..26
  919. bitwise_and_4_ints             $15..18 &= $19..22
  920. bitwise_and_4_ints             $11..14 &= $15..18
  921. bitwise_and_2_ints             $11..12 &= $13..14
  922. bitwise_and_int                $11 &= $12
  923. copy_slot_masked               [test_no_op_mat4_X_scalar].result = Mask($11)
  924. load_return_mask               RetMask = $10
  925. copy_slot_unmasked             $10 = [test_no_op_mat4_X_scalar].result
  926. label                          label 0x0000000A
  927. copy_slot_masked               $9 = Mask($10)
  928. label                          label 0x00000009
  929. load_condition_mask            CondMask = $112
  930. copy_4_constants               $0..3 = colorRed
  931. merge_condition_mask           CondMask = $8 & $9
  932. copy_4_constants               $4..7 = colorGreen
  933. copy_4_slots_masked            $0..3 = Mask($4..7)
  934. label                          label 0x0000000B
  935. load_condition_mask            CondMask = $8
  936. copy_4_slots_unmasked          [main].result = $0..3
  937. load_src                       src.rgba = [main].result
