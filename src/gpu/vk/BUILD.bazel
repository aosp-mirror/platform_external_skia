load("//bazel:skia_rules.bzl", "exports_files_legacy", "generate_cpp_files_for_headers", "skia_cc_deps", "skia_filegroup", "split_srcs_and_hdrs")

package(
    default_applicable_licenses = ["//:license"],
)

licenses(["notice"])

exports_files_legacy()

VK_FILES = [
    "VulkanExtensions.cpp",
    "VulkanInterface.cpp",
    "VulkanInterface.h",
    "VulkanMemory.cpp",
    "VulkanMemory.h",
    "VulkanUtilsPriv.cpp",
    "VulkanUtilsPriv.h",
    "VulkanMutableTextureStatePriv.h",
    "VulkanMutableTextureState.cpp",
]

split_srcs_and_hdrs(
    name = "vk",
    files = VK_FILES,
)

skia_filegroup(
    name = "srcs",
    srcs = [
        ":vk_srcs",
        ":vma_srcs",
    ],
    visibility = [
        "//src/gpu:__pkg__",
        "//src/gpu/ganesh/vk:__pkg__",
    ],
)

skia_filegroup(
    name = "private_hdrs",
    srcs = [
        ":vk_hdrs",
        ":vma_hdrs",
    ],
    visibility = [
        "//src/gpu:__pkg__",
        "//src/gpu/ganesh/vk:__pkg__",
    ],
)

skia_cc_deps(
    name = "deps",
    visibility = ["//src/gpu:__pkg__"],
    deps = select({
        "//src/gpu:vulkan_with_vma": ["//third_party/vulkanmemoryallocator"],
        "//conditions:default": [],
    }),
)

generate_cpp_files_for_headers(
    name = "headers_to_compile",
    headers = [
        "VulkanMutableTextureStatePriv.h",
    ],
)

skia_filegroup(
    name = "vma_hdrs",
    srcs = [
        "VulkanAMDMemoryAllocator.h",
    ],
    visibility = [
        "//src/gpu/ganesh/vk:__pkg__",
    ],
)

skia_filegroup(
    name = "vma_srcs",
    srcs = [
        "VulkanAMDMemoryAllocator.cpp",
    ],
    visibility = [
        "//src/gpu/ganesh/vk:__pkg__",
    ],
)
